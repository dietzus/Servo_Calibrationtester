
F411_Calibrationtester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800c470  0800c470  0000d470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c850  0800c850  0000e2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c850  0800c850  0000d850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c858  0800c858  0000e2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c858  0800c858  0000d858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c85c  0800c85c  0000d85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800c860  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dfc  200002d0  0800cb30  0000e2d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020cc  0800cb30  0000f0cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015760  00000000  00000000  0000e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360a  00000000  00000000  00023a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00027070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9b  00000000  00000000  000284b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001911e  00000000  00000000  00029453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ab6  00000000  00000000  00042571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094114  00000000  00000000  0005c027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f013b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  000f0180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f68a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c454 	.word	0x0800c454

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800c454 	.word	0x0800c454

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <findRightMagnitude>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void findRightMagnitude() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb4:	482a      	ldr	r0, [pc, #168]	@ (8000f60 <findRightMagnitude+0xb8>)
 8000eb6:	f001 f93f 	bl	8002138 <HAL_GPIO_WritePin>
	uint8_t found = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
	uint16_t foundcounter = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	81bb      	strh	r3, [r7, #12]
	uint16_t treshholdcounter = 10;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	817b      	strh	r3, [r7, #10]
	uint16_t minvalue = 5;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	813b      	strh	r3, [r7, #8]
	uint16_t maxvalue = 4091;
 8000eca:	f640 73fb 	movw	r3, #4091	@ 0xffb
 8000ece:	80fb      	strh	r3, [r7, #6]
	while (found != 1) {
 8000ed0:	e039      	b.n	8000f46 <findRightMagnitude+0x9e>
		uint16_t tempbuffer = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	80bb      	strh	r3, [r7, #4]
		HAL_I2C_Mem_Read(&hi2c1, AS5600ADRESS, AS5600MAGNITUDE, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tempbuffer, 2, HAL_MAX_DELAY);
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2302      	movs	r3, #2
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	220d      	movs	r2, #13
 8000ee8:	2136      	movs	r1, #54	@ 0x36
 8000eea:	481e      	ldr	r0, [pc, #120]	@ (8000f64 <findRightMagnitude+0xbc>)
 8000eec:	f001 fa82 	bl	80023f4 <HAL_I2C_Mem_Read>
		tempbuffer = tempbuffer & 0x0FFF;
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	80bb      	strh	r3, [r7, #4]
		if(tempbuffer >= minvalue && tempbuffer <= maxvalue) {
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	893a      	ldrh	r2, [r7, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d816      	bhi.n	8000f30 <findRightMagnitude+0x88>
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d312      	bcc.n	8000f30 <findRightMagnitude+0x88>
			foundcounter++;
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	81bb      	strh	r3, [r7, #12]
			if(foundcounter >= 3) {
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d905      	bls.n	8000f22 <findRightMagnitude+0x7a>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1c:	4810      	ldr	r0, [pc, #64]	@ (8000f60 <findRightMagnitude+0xb8>)
 8000f1e:	f001 f90b 	bl	8002138 <HAL_GPIO_WritePin>
			}
			if(foundcounter >= treshholdcounter) {
 8000f22:	89ba      	ldrh	r2, [r7, #12]
 8000f24:	897b      	ldrh	r3, [r7, #10]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d30a      	bcc.n	8000f40 <findRightMagnitude+0x98>
				found = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
			if(foundcounter >= treshholdcounter) {
 8000f2e:	e007      	b.n	8000f40 <findRightMagnitude+0x98>
			}
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f36:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <findRightMagnitude+0xb8>)
 8000f38:	f001 f8fe 	bl	8002138 <HAL_GPIO_WritePin>
			foundcounter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	81bb      	strh	r3, [r7, #12]
		}
		HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	@ 0x64
 8000f42:	f000 fe3f 	bl	8001bc4 <HAL_Delay>
	while (found != 1) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d1c2      	bne.n	8000ed2 <findRightMagnitude+0x2a>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f52:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <findRightMagnitude+0xb8>)
 8000f54:	f001 f8f0 	bl	8002138 <HAL_GPIO_WritePin>
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020800 	.word	0x40020800
 8000f64:	200002ec 	.word	0x200002ec

08000f68 <readAngle>:
uint16_t readAngle() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af04      	add	r7, sp, #16
	uint16_t tempbuffer = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_StateTypeDef tempstatus = HAL_I2C_STATE_ERROR;
 8000f72:	23e0      	movs	r3, #224	@ 0xe0
 8000f74:	71fb      	strb	r3, [r7, #7]
	while (tempstatus != HAL_I2C_STATE_READY) {
 8000f76:	e00e      	b.n	8000f96 <readAngle+0x2e>
		tempstatus = HAL_I2C_Mem_Read(&hi2c1, AS5600ADRESS, AS5600RAWANGLE, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tempbuffer, 2, HAL_MAX_DELAY);
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	220c      	movs	r2, #12
 8000f8a:	2136      	movs	r1, #54	@ 0x36
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <readAngle+0x48>)
 8000f8e:	f001 fa31 	bl	80023f4 <HAL_I2C_Mem_Read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	while (tempstatus != HAL_I2C_STATE_READY) {
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d1ed      	bne.n	8000f78 <readAngle+0x10>
	}
	tempbuffer = tempbuffer & 0x0FFF;
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	80bb      	strh	r3, [r7, #4]
	//	uint16_t value = (tempbuffer[0] << 8) | tempbuffer[1];


	return tempbuffer;
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200002ec 	.word	0x200002ec

08000fb4 <rawAngleToDegrees>:

float rawAngleToDegrees(uint16_t rawAngle) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
	return (float)rawAngle * 360.0f / 4096.0f;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000fec <rawAngleToDegrees+0x38>
 8000fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000ff0 <rawAngleToDegrees+0x3c>
 8000fd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd8:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	43b40000 	.word	0x43b40000
 8000ff0:	45800000 	.word	0x45800000

08000ff4 <getCCRforAngle>:

uint16_t getCCRforAngle(float angle) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempCCR = angle * BASEK + BASED + 0.5f;
 8000ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001002:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001050 <getCCRforAngle+0x5c>
 8001006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001054 <getCCRforAngle+0x60>
 800100e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001012:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800101a:	edc7 7a03 	vstr	s15, [r7, #12]

	tempCCR = tempCCR * CALIBK + CALIBD + 0.5f;
 800101e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001022:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001058 <getCCRforAngle+0x64>
 8001026:	ee77 7a87 	vadd.f32	s15, s15, s14
 800102a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800102e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001032:	edc7 7a03 	vstr	s15, [r7, #12]

	return (uint16_t)(tempCCR);
 8001036:	edd7 7a03 	vldr	s15, [r7, #12]
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	ee17 3a90 	vmov	r3, s15
 8001042:	b29b      	uxth	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	4131c71c 	.word	0x4131c71c
 8001054:	453b8000 	.word	0x453b8000
 8001058:	00000000 	.word	0x00000000

0800105c <setAngle>:

void setAngle(float newAngle) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
	htim3.Instance->CCR1 = getCCRforAngle(newAngle);
 8001066:	ed97 0a01 	vldr	s0, [r7, #4]
 800106a:	f7ff ffc3 	bl	8000ff4 <getCCRforAngle>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <setAngle+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000340 	.word	0x20000340

08001084 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800108a:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800108c:	f000 fd28 	bl	8001ae0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001090:	f000 f9aa 	bl	80013e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001094:	f000 fab6 	bl	8001604 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001098:	f000 fa0e 	bl	80014b8 <MX_I2C1_Init>
	MX_TIM3_Init();
 800109c:	f000 fa3a 	bl	8001514 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80010a0:	f007 fe74 	bl	8008d8c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010aa:	48c5      	ldr	r0, [pc, #788]	@ (80013c0 <main+0x33c>)
 80010ac:	f001 f844 	bl	8002138 <HAL_GPIO_WritePin>

	findRightMagnitude();
 80010b0:	f7ff fefa 	bl	8000ea8 <findRightMagnitude>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010b4:	2100      	movs	r1, #0
 80010b6:	48c3      	ldr	r0, [pc, #780]	@ (80013c4 <main+0x340>)
 80010b8:	f003 fde0 	bl	8004c7c <HAL_TIM_PWM_Start>

	if (check_bothsides == 1) {
 80010bc:	4bc2      	ldr	r3, [pc, #776]	@ (80013c8 <main+0x344>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d121      	bne.n	8001108 <main+0x84>
		angles = malloc(sizeof(float) * num_steps * 2 - 1);
 80010c4:	4bc1      	ldr	r3, [pc, #772]	@ (80013cc <main+0x348>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 fb6d 	bl	80097ac <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4bbe      	ldr	r3, [pc, #760]	@ (80013d0 <main+0x34c>)
 80010d8:	601a      	str	r2, [r3, #0]
		readValues = malloc(sizeof(uint16_t) * num_steps * 2 - 1);
 80010da:	4bbc      	ldr	r3, [pc, #752]	@ (80013cc <main+0x348>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f008 fb62 	bl	80097ac <malloc>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4bb9      	ldr	r3, [pc, #740]	@ (80013d4 <main+0x350>)
 80010ee:	601a      	str	r2, [r3, #0]
		readAngles = malloc(sizeof(float) * num_steps * 2 - 1);
 80010f0:	4bb6      	ldr	r3, [pc, #728]	@ (80013cc <main+0x348>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f008 fb57 	bl	80097ac <malloc>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4bb5      	ldr	r3, [pc, #724]	@ (80013d8 <main+0x354>)
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e01d      	b.n	8001144 <main+0xc0>
	} else {
		angles = malloc(sizeof(float) * num_steps);
 8001108:	4bb0      	ldr	r3, [pc, #704]	@ (80013cc <main+0x348>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fb4c 	bl	80097ac <malloc>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4bad      	ldr	r3, [pc, #692]	@ (80013d0 <main+0x34c>)
 800111a:	601a      	str	r2, [r3, #0]
		readValues = malloc(sizeof(uint16_t) * num_steps);
 800111c:	4bab      	ldr	r3, [pc, #684]	@ (80013cc <main+0x348>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f008 fb42 	bl	80097ac <malloc>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4ba9      	ldr	r3, [pc, #676]	@ (80013d4 <main+0x350>)
 800112e:	601a      	str	r2, [r3, #0]
		readAngles = malloc(sizeof(float) * num_steps);
 8001130:	4ba6      	ldr	r3, [pc, #664]	@ (80013cc <main+0x348>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4618      	mov	r0, r3
 8001138:	f008 fb38 	bl	80097ac <malloc>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4ba5      	ldr	r3, [pc, #660]	@ (80013d8 <main+0x354>)
 8001142:	601a      	str	r2, [r3, #0]
	}

	float minangle = angle1;
 8001144:	4ba5      	ldr	r3, [pc, #660]	@ (80013dc <main+0x358>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	float maxangle = angle2;
 800114c:	4ba4      	ldr	r3, [pc, #656]	@ (80013e0 <main+0x35c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	if (angle1 > angle2) {
 8001154:	4ba1      	ldr	r3, [pc, #644]	@ (80013dc <main+0x358>)
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	4ba1      	ldr	r3, [pc, #644]	@ (80013e0 <main+0x35c>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001168:	dd07      	ble.n	800117a <main+0xf6>
		minangle = angle2;
 800116a:	4b9d      	ldr	r3, [pc, #628]	@ (80013e0 <main+0x35c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		maxangle = angle1;
 8001172:	4b9a      	ldr	r3, [pc, #616]	@ (80013dc <main+0x358>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	}

	for(uint16_t i=0; i<num_steps; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 8001180:	e027      	b.n	80011d2 <main+0x14e>
		angles[i] = minangle + i * (maxangle - minangle) / (num_steps-1);
 8001182:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118e:	edd7 6a86 	vldr	s13, [r7, #536]	@ 0x218
 8001192:	edd7 7a87 	vldr	s15, [r7, #540]	@ 0x21c
 8001196:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800119a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800119e:	4b8b      	ldr	r3, [pc, #556]	@ (80013cc <main+0x348>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011b0:	4b87      	ldr	r3, [pc, #540]	@ (80013d0 <main+0x34c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	edd7 7a87 	vldr	s15, [r7, #540]	@ 0x21c
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0; i<num_steps; i++) {
 80011c8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80011cc:	3301      	adds	r3, #1
 80011ce:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 80011d2:	4b7e      	ldr	r3, [pc, #504]	@ (80013cc <main+0x348>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3d1      	bcc.n	8001182 <main+0xfe>
	}
	if (check_bothsides == 1) {
 80011de:	4b7a      	ldr	r3, [pc, #488]	@ (80013c8 <main+0x344>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d13c      	bne.n	8001260 <main+0x1dc>
		for(uint16_t i=1; i<num_steps; i++) {
 80011e6:	2301      	movs	r3, #1
 80011e8:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
 80011ec:	e032      	b.n	8001254 <main+0x1d0>
			angles[num_steps + i -1] = minangle + (num_steps - 1 - i) * (maxangle - minangle) / (num_steps-1);
 80011ee:	4b77      	ldr	r3, [pc, #476]	@ (80013cc <main+0x348>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001202:	edd7 6a86 	vldr	s13, [r7, #536]	@ 0x218
 8001206:	edd7 7a87 	vldr	s15, [r7, #540]	@ 0x21c
 800120a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800120e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001212:	4b6e      	ldr	r3, [pc, #440]	@ (80013cc <main+0x348>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	3b01      	subs	r3, #1
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001224:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <main+0x34c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	@ (80013cc <main+0x348>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8001232:	440b      	add	r3, r1
 8001234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001238:	3b01      	subs	r3, #1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	edd7 7a87 	vldr	s15, [r7, #540]	@ 0x21c
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i=1; i<num_steps; i++) {
 800124a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 800124e:	3301      	adds	r3, #1
 8001250:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
 8001254:	4b5d      	ldr	r3, [pc, #372]	@ (80013cc <main+0x348>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 800125c:	429a      	cmp	r2, r3
 800125e:	d3c6      	bcc.n	80011ee <main+0x16a>
		}
	}

	setAngle(minangle);
 8001260:	ed97 0a87 	vldr	s0, [r7, #540]	@ 0x21c
 8001264:	f7ff fefa 	bl	800105c <setAngle>
	HAL_Delay(3000);
 8001268:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800126c:	f000 fcaa 	bl	8001bc4 <HAL_Delay>

	uint16_t laststep = num_steps;
 8001270:	4b56      	ldr	r3, [pc, #344]	@ (80013cc <main+0x348>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
	if (check_bothsides == 1) {
 8001278:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <main+0x344>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d106      	bne.n	800128e <main+0x20a>
		laststep = laststep * 2 - 1;
 8001280:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	b29b      	uxth	r3, r3
 8001288:	3b01      	subs	r3, #1
 800128a:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
	}
	for(uint16_t i=0; i<laststep; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
 8001294:	e032      	b.n	80012fc <main+0x278>
		setAngle(angles[i]);
 8001296:	4b4e      	ldr	r3, [pc, #312]	@ (80013d0 <main+0x34c>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	eeb0 0a67 	vmov.f32	s0, s15
 80012aa:	f7ff fed7 	bl	800105c <setAngle>
		HAL_Delay(500);
 80012ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012b2:	f000 fc87 	bl	8001bc4 <HAL_Delay>
		readValues[i] = readAngle();
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <main+0x350>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	18d4      	adds	r4, r2, r3
 80012c2:	f7ff fe51 	bl	8000f68 <readAngle>
 80012c6:	4603      	mov	r3, r0
 80012c8:	8023      	strh	r3, [r4, #0]
		readAngles[i] = rawAngleToDegrees(readValues[i]);
 80012ca:	4b42      	ldr	r3, [pc, #264]	@ (80013d4 <main+0x350>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	8819      	ldrh	r1, [r3, #0]
 80012d8:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <main+0x354>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	18d4      	adds	r4, r2, r3
 80012e4:	4608      	mov	r0, r1
 80012e6:	f7ff fe65 	bl	8000fb4 <rawAngleToDegrees>
 80012ea:	eef0 7a40 	vmov.f32	s15, s0
 80012ee:	edc4 7a00 	vstr	s15, [r4]
	for(uint16_t i=0; i<laststep; i++) {
 80012f2:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
 80012fc:	f8b7 2210 	ldrh.w	r2, [r7, #528]	@ 0x210
 8001300:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001304:	429a      	cmp	r2, r3
 8001306:	d3c6      	bcc.n	8001296 <main+0x212>
	}

	uint8_t buffer[500] = {0};
 8001308:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800130c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	3304      	adds	r3, #4
 8001316:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f009 f878 	bl	800a412 <memset>
	char tempbuffer[20];
	for(uint16_t i=0; i<laststep; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8001328:	e034      	b.n	8001394 <main+0x310>
		sprintf(tempbuffer, "%.1f,%d,%.2f\n", angles[i], readValues[i], readAngles[i]);
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <main+0x34c>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f90d 	bl	8000558 <__aeabi_f2d>
 800133e:	4604      	mov	r4, r0
 8001340:	460d      	mov	r5, r1
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <main+0x350>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461e      	mov	r6, r3
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <main+0x354>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8f9 	bl	8000558 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	1d38      	adds	r0, r7, #4
 800136c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001370:	9600      	str	r6, [sp, #0]
 8001372:	4622      	mov	r2, r4
 8001374:	462b      	mov	r3, r5
 8001376:	491b      	ldr	r1, [pc, #108]	@ (80013e4 <main+0x360>)
 8001378:	f008 ffe8 	bl	800a34c <siprintf>
		strcat((char*)buffer, tempbuffer);
 800137c:	1d3a      	adds	r2, r7, #4
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f009 f84c 	bl	800a422 <strcat>
	for(uint16_t i=0; i<laststep; i++) {
 800138a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800138e:	3301      	adds	r3, #1
 8001390:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8001394:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8001398:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 800139c:	429a      	cmp	r2, r3
 800139e:	d3c4      	bcc.n	800132a <main+0x2a6>
	}

	CDC_Transmit_FS(buffer, strlen((char*)buffer));
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff6b 	bl	8000280 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f007 fda7 	bl	8008f08 <CDC_Transmit_FS>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80013ba:	bf00      	nop
 80013bc:	e7fd      	b.n	80013ba <main+0x336>
 80013be:	bf00      	nop
 80013c0:	40020800 	.word	0x40020800
 80013c4:	20000340 	.word	0x20000340
 80013c8:	20000002 	.word	0x20000002
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000388 	.word	0x20000388
 80013d4:	2000038c 	.word	0x2000038c
 80013d8:	20000390 	.word	0x20000390
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000008 	.word	0x20000008
 80013e4:	0800c470 	.word	0x0800c470

080013e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	@ 0x50
 80013ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2230      	movs	r2, #48	@ 0x30
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f009 f80b 	bl	800a412 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <SystemClock_Config+0xc8>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	4a26      	ldr	r2, [pc, #152]	@ (80014b0 <SystemClock_Config+0xc8>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	@ 0x40
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <SystemClock_Config+0xc8>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <SystemClock_Config+0xcc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a20      	ldr	r2, [pc, #128]	@ (80014b4 <SystemClock_Config+0xcc>)
 8001432:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <SystemClock_Config+0xcc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001444:	2301      	movs	r3, #1
 8001446:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001452:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001456:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001458:	2319      	movs	r3, #25
 800145a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 800145c:	23c0      	movs	r3, #192	@ 0xc0
 800145e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f002 ff19 	bl	80042a4 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001478:	f000 f924 	bl	80016c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2103      	movs	r1, #3
 8001498:	4618      	mov	r0, r3
 800149a:	f003 f97b 	bl	8004794 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80014a4:	f000 f90e 	bl	80016c4 <Error_Handler>
	}
}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	@ 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014be:	4a13      	ldr	r2, [pc, #76]	@ (800150c <MX_I2C1_Init+0x54>)
 80014c0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <MX_I2C1_Init+0x58>)
 80014c6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014da:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_I2C1_Init+0x50>)
 80014f6:	f000 fe39 	bl	800216c <HAL_I2C_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001500:	f000 f8e0 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200002ec 	.word	0x200002ec
 800150c:	40005400 	.word	0x40005400
 8001510:	000186a0 	.word	0x000186a0

08001514 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	@ 0x38
 8001518:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001544:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001546:	4a2e      	ldr	r2, [pc, #184]	@ (8001600 <MX_TIM3_Init+0xec>)
 8001548:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48-1;
 800154a:	4b2c      	ldr	r3, [pc, #176]	@ (80015fc <MX_TIM3_Init+0xe8>)
 800154c:	222f      	movs	r2, #47	@ 0x2f
 800154e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 40000-1;
 8001556:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001558:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800155c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b25      	ldr	r3, [pc, #148]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800156a:	4824      	ldr	r0, [pc, #144]	@ (80015fc <MX_TIM3_Init+0xe8>)
 800156c:	f003 fade 	bl	8004b2c <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 8001576:	f000 f8a5 	bl	80016c4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001580:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001584:	4619      	mov	r1, r3
 8001586:	481d      	ldr	r0, [pc, #116]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001588:	f003 fcea 	bl	8004f60 <HAL_TIM_ConfigClockSource>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 8001592:	f000 f897 	bl	80016c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001596:	4819      	ldr	r0, [pc, #100]	@ (80015fc <MX_TIM3_Init+0xe8>)
 8001598:	f003 fb17 	bl	8004bca <HAL_TIM_PWM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 80015a2:	f000 f88f 	bl	80016c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	4619      	mov	r1, r3
 80015b4:	4811      	ldr	r0, [pc, #68]	@ (80015fc <MX_TIM3_Init+0xe8>)
 80015b6:	f004 f873 	bl	80056a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 80015c0:	f000 f880 	bl	80016c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c4:	2360      	movs	r3, #96	@ 0x60
 80015c6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 4915-1;
 80015c8:	f241 3332 	movw	r3, #4914	@ 0x1332
 80015cc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4807      	ldr	r0, [pc, #28]	@ (80015fc <MX_TIM3_Init+0xe8>)
 80015de:	f003 fbfd 	bl	8004ddc <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 80015e8:	f000 f86c 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <MX_TIM3_Init+0xe8>)
 80015ee:	f000 f901 	bl	80017f4 <HAL_TIM_MspPostInit>

}
 80015f2:	bf00      	nop
 80015f4:	3738      	adds	r7, #56	@ 0x38
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000340 	.word	0x20000340
 8001600:	40000400 	.word	0x40000400

08001604 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <MX_GPIO_Init+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_GPIO_Init+0xb8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a1f      	ldr	r2, [pc, #124]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <MX_GPIO_Init+0xb8>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_GPIO_Init+0xb8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <MX_GPIO_Init+0xbc>)
 8001692:	f000 fd51 	bl	8002138 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001696:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_GPIO_Init+0xbc>)
 80016b0:	f000 fbbe 	bl	8001e30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020800 	.word	0x40020800

080016c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <Error_Handler+0x8>

080016d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_MspInit+0x4c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_MspInit+0x4c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <HAL_I2C_MspInit+0x84>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12b      	bne.n	800179a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <HAL_I2C_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_I2C_MspInit+0x88>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_I2C_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175e:	23c0      	movs	r3, #192	@ 0xc0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800176e:	2304      	movs	r3, #4
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <HAL_I2C_MspInit+0x8c>)
 800177a:	f000 fb59 	bl	8001e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_I2C_MspInit+0x88>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_I2C_MspInit+0x88>)
 8001788:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_I2C_MspInit+0x88>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	@ 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40005400 	.word	0x40005400
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_TIM_Base_MspInit+0x3c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10d      	bne.n	80017de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a12      	ldr	r2, [pc, #72]	@ (800185c <HAL_TIM_MspPostInit+0x68>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d11d      	bne.n	8001852 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_TIM_MspPostInit+0x6c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_TIM_MspPostInit+0x6c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_TIM_MspPostInit+0x6c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001832:	2340      	movs	r3, #64	@ 0x40
 8001834:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001842:	2302      	movs	r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <HAL_TIM_MspPostInit+0x70>)
 800184e:	f000 faef 	bl	8001e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40000400 	.word	0x40000400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f961 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <OTG_FS_IRQHandler+0x10>)
 80018ce:	f001 fbdd 	bl	800308c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000187c 	.word	0x2000187c

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_kill>:

int _kill(int pid, int sig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f6:	f008 fdfd 	bl	800a4f4 <__errno>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2216      	movs	r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_exit>:

void _exit (int status)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffe7 	bl	80018ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800191e:	bf00      	nop
 8001920:	e7fd      	b.n	800191e <_exit+0x12>

08001922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e00a      	b.n	800194a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001934:	f3af 8000 	nop.w
 8001938:	4601      	mov	r1, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60ba      	str	r2, [r7, #8]
 8001940:	b2ca      	uxtb	r2, r1
 8001942:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbf0      	blt.n	8001934 <_read+0x12>
  }

  return len;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e009      	b.n	8001982 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	60ba      	str	r2, [r7, #8]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	dbf1      	blt.n	800196e <_write+0x12>
  }
  return len;
 800198a:	687b      	ldr	r3, [r7, #4]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_close>:

int _close(int file)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019bc:	605a      	str	r2, [r3, #4]
  return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_isatty>:

int _isatty(int file)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f008 fd62 	bl	800a4f4 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20020000 	.word	0x20020000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000394 	.word	0x20000394
 8001a64:	200020d0 	.word	0x200020d0

08001a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <SystemInit+0x20>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <SystemInit+0x20>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a90:	f7ff ffea 	bl	8001a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	@ (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f008 fd21 	bl	800a500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fae1 	bl	8001084 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001ad0:	0800c860 	.word	0x0800c860
  ldr r2, =_sbss
 8001ad4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001ad8:	200020cc 	.word	0x200020cc

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f94f 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fddc 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f967 	bl	8001e16 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f92f 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	20000014 	.word	0x20000014
 8001b80:	20000010 	.word	0x20000010

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000014 	.word	0x20000014
 8001ba8:	20000398 	.word	0x20000398

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000398 	.word	0x20000398

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000014 	.word	0x20000014

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	@ (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff29 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff3e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff31 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e159      	b.n	8002100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f040 8148 	bne.w	80020fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d005      	beq.n	8001e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d130      	bne.n	8001ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 0201 	and.w	r2, r3, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d017      	beq.n	8001f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d123      	bne.n	8001f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a2 	beq.w	80020fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	4a56      	ldr	r2, [pc, #344]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc6:	4b54      	ldr	r3, [pc, #336]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd2:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_GPIO_Init+0x2ec>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	@ (8002120 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x202>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a48      	ldr	r2, [pc, #288]	@ (8002124 <HAL_GPIO_Init+0x2f4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x1fe>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a47      	ldr	r2, [pc, #284]	@ (8002128 <HAL_GPIO_Init+0x2f8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x1fa>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a46      	ldr	r2, [pc, #280]	@ (800212c <HAL_GPIO_Init+0x2fc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x1f6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a45      	ldr	r2, [pc, #276]	@ (8002130 <HAL_GPIO_Init+0x300>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x1f2>
 800201e:	2304      	movs	r3, #4
 8002020:	e008      	b.n	8002034 <HAL_GPIO_Init+0x204>
 8002022:	2307      	movs	r3, #7
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x204>
 8002026:	2303      	movs	r3, #3
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x204>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x204>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x204>
 8002032:	2300      	movs	r3, #0
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f002 0203 	and.w	r2, r2, #3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002044:	4935      	ldr	r1, [pc, #212]	@ (800211c <HAL_GPIO_Init+0x2ec>)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002052:	4b38      	ldr	r3, [pc, #224]	@ (8002134 <HAL_GPIO_Init+0x304>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002076:	4a2f      	ldr	r2, [pc, #188]	@ (8002134 <HAL_GPIO_Init+0x304>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800207c:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <HAL_GPIO_Init+0x304>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a0:	4a24      	ldr	r2, [pc, #144]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d0:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	f67f aea2 	bls.w	8001e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3724      	adds	r7, #36	@ 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002154:	e003      	b.n	800215e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e12b      	b.n	80023d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fac4 	bl	8001720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	@ 0x24
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d0:	f002 fc98 	bl	8004b04 <HAL_RCC_GetPCLK1Freq>
 80021d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a81      	ldr	r2, [pc, #516]	@ (80023e0 <HAL_I2C_Init+0x274>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d807      	bhi.n	80021f0 <HAL_I2C_Init+0x84>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a80      	ldr	r2, [pc, #512]	@ (80023e4 <HAL_I2C_Init+0x278>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bf94      	ite	ls
 80021e8:	2301      	movls	r3, #1
 80021ea:	2300      	movhi	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e006      	b.n	80021fe <HAL_I2C_Init+0x92>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a7d      	ldr	r2, [pc, #500]	@ (80023e8 <HAL_I2C_Init+0x27c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0e7      	b.n	80023d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a78      	ldr	r2, [pc, #480]	@ (80023ec <HAL_I2C_Init+0x280>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a6a      	ldr	r2, [pc, #424]	@ (80023e0 <HAL_I2C_Init+0x274>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d802      	bhi.n	8002240 <HAL_I2C_Init+0xd4>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3301      	adds	r3, #1
 800223e:	e009      	b.n	8002254 <HAL_I2C_Init+0xe8>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a69      	ldr	r2, [pc, #420]	@ (80023f0 <HAL_I2C_Init+0x284>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	3301      	adds	r3, #1
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	430b      	orrs	r3, r1
 800225a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002266:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	495c      	ldr	r1, [pc, #368]	@ (80023e0 <HAL_I2C_Init+0x274>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d819      	bhi.n	80022a8 <HAL_I2C_Init+0x13c>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e59      	subs	r1, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002288:	400b      	ands	r3, r1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_I2C_Init+0x138>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1e59      	subs	r1, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fbb1 f3f3 	udiv	r3, r1, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a2:	e051      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e04f      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d111      	bne.n	80022d4 <HAL_I2C_Init+0x168>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e012      	b.n	80022fa <HAL_I2C_Init+0x18e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e58      	subs	r0, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	0099      	lsls	r1, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Init+0x196>
 80022fe:	2301      	movs	r3, #1
 8002300:	e022      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10e      	bne.n	8002328 <HAL_I2C_Init+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e58      	subs	r0, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	440b      	add	r3, r1
 8002318:	fbb0 f3f3 	udiv	r3, r0, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002326:	e00f      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e58      	subs	r0, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	0099      	lsls	r1, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	fbb0 f3f3 	udiv	r3, r0, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	6809      	ldr	r1, [r1, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002376:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6911      	ldr	r1, [r2, #16]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68d2      	ldr	r2, [r2, #12]
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	000186a0 	.word	0x000186a0
 80023e4:	001e847f 	.word	0x001e847f
 80023e8:	003d08ff 	.word	0x003d08ff
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4603      	mov	r3, r0
 8002404:	817b      	strh	r3, [r7, #10]
 8002406:	460b      	mov	r3, r1
 8002408:	813b      	strh	r3, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800240e:	f7ff fbcd 	bl	8001bac <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b20      	cmp	r3, #32
 800241e:	f040 8214 	bne.w	800284a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2319      	movs	r3, #25
 8002428:	2201      	movs	r2, #1
 800242a:	497b      	ldr	r1, [pc, #492]	@ (8002618 <HAL_I2C_Mem_Read+0x224>)
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fafb 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	e207      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_I2C_Mem_Read+0x56>
 8002446:	2302      	movs	r3, #2
 8002448:	e200      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d007      	beq.n	8002470 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2222      	movs	r2, #34	@ 0x22
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2240      	movs	r2, #64	@ 0x40
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a5b      	ldr	r2, [pc, #364]	@ (800261c <HAL_I2C_Mem_Read+0x228>)
 80024b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024b2:	88f8      	ldrh	r0, [r7, #6]
 80024b4:	893a      	ldrh	r2, [r7, #8]
 80024b6:	8979      	ldrh	r1, [r7, #10]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	4603      	mov	r3, r0
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f9c8 	bl	8002858 <I2C_RequestMemoryRead>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1bc      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	623b      	str	r3, [r7, #32]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	623b      	str	r3, [r7, #32]
 80024ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e190      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	2b01      	cmp	r3, #1
 8002508:	d11b      	bne.n	8002542 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e170      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002546:	2b02      	cmp	r3, #2
 8002548:	d11b      	bne.n	8002582 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002568:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	e150      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002598:	e144      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	2b03      	cmp	r3, #3
 80025a0:	f200 80f1 	bhi.w	8002786 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d123      	bne.n	80025f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fb9b 	bl	8002cec <I2C_WaitOnRXNEFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e145      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025f2:	e117      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d14e      	bne.n	800269a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002602:	2200      	movs	r2, #0
 8002604:	4906      	ldr	r1, [pc, #24]	@ (8002620 <HAL_I2C_Mem_Read+0x22c>)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa0e 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e11a      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000
 8002620:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002698:	e0c4      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	2200      	movs	r2, #0
 80026a2:	496c      	ldr	r1, [pc, #432]	@ (8002854 <HAL_I2C_Mem_Read+0x460>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f9bf 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0cb      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fc:	2200      	movs	r2, #0
 80026fe:	4955      	ldr	r1, [pc, #340]	@ (8002854 <HAL_I2C_Mem_Read+0x460>)
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f991 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e09d      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002784:	e04e      	b.n	8002824 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 faae 	bl	8002cec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e058      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d124      	bne.n	8002824 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d107      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f aeb6 	bne.w	800259a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800284a:	2302      	movs	r3, #2
  }
}
 800284c:	4618      	mov	r0, r3
 800284e:	3728      	adds	r7, #40	@ 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	00010004 	.word	0x00010004

08002858 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002880:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002890:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	2200      	movs	r2, #0
 800289a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f8c2 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b8:	d103      	bne.n	80028c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0aa      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028c6:	897b      	ldrh	r3, [r7, #10]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	4952      	ldr	r1, [pc, #328]	@ (8002a24 <I2C_RequestMemoryRead+0x1cc>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f91d 	bl	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e097      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002904:	6a39      	ldr	r1, [r7, #32]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f9a8 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2b04      	cmp	r3, #4
 8002918:	d107      	bne.n	800292a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002928:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e076      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002934:	893b      	ldrh	r3, [r7, #8]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	e021      	b.n	8002984 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002940:	893b      	ldrh	r3, [r7, #8]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29b      	uxth	r3, r3
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002950:	6a39      	ldr	r1, [r7, #32]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f982 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b04      	cmp	r3, #4
 8002964:	d107      	bne.n	8002976 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002974:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e050      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800297a:	893b      	ldrh	r3, [r7, #8]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f967 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e035      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f82b 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e6:	d103      	bne.n	80029f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e013      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029f4:	897b      	ldrh	r3, [r7, #10]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	4906      	ldr	r1, [pc, #24]	@ (8002a24 <I2C_RequestMemoryRead+0x1cc>)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f886 	bl	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00010002 	.word	0x00010002

08002a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a38:	e048      	b.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d044      	beq.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f8b3 	bl	8001bac <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d139      	bne.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	e00c      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d116      	bne.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e023      	b.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10d      	bne.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	e00c      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d093      	beq.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b2a:	e071      	b.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	d123      	bne.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e067      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d041      	beq.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7ff f80e 	bl	8001bac <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d136      	bne.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e00b      	b.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e021      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	0c1b      	lsrs	r3, r3, #16
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10c      	bne.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	43da      	mvns	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e00b      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f af6d 	bne.w	8002b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c68:	e034      	b.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f89b 	bl	8002da6 <I2C_IsAcknowledgeFailed>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e034      	b.n	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d028      	beq.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7fe ff93 	bl	8001bac <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11d      	bne.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b80      	cmp	r3, #128	@ 0x80
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d1c3      	bne.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cf8:	e049      	b.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d119      	bne.n	8002d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0210 	mvn.w	r2, #16
 8002d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e030      	b.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3c:	f7fe ff36 	bl	8001bac <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d302      	bcc.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11d      	bne.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5c:	2b40      	cmp	r3, #64	@ 0x40
 8002d5e:	d016      	beq.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e007      	b.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d98:	2b40      	cmp	r3, #64	@ 0x40
 8002d9a:	d1ae      	bne.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dbc:	d11b      	bne.n	8002df6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f043 0204 	orr.w	r2, r3, #4
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e101      	b.n	800301a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f006 f9b1 	bl	8009198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fdaa 	bl	80059aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7c1a      	ldrb	r2, [r3, #16]
 8002e5e:	f88d 2000 	strb.w	r2, [sp]
 8002e62:	3304      	adds	r3, #4
 8002e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e66:	f002 fc89 	bl	800577c <USB_CoreInit>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0ce      	b.n	800301a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 fda2 	bl	80059cc <USB_SetCurrentMode>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0bf      	b.n	800301a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	e04a      	b.n	8002f36 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3315      	adds	r3, #21
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	b298      	uxth	r0, r3
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	332e      	adds	r3, #46	@ 0x2e
 8002edc:	4602      	mov	r2, r0
 8002ede:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3318      	adds	r3, #24
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	331c      	adds	r3, #28
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3320      	adds	r3, #32
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3324      	adds	r3, #36	@ 0x24
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	3301      	adds	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	791b      	ldrb	r3, [r3, #4]
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d3af      	bcc.n	8002ea0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e044      	b.n	8002fd0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	791b      	ldrb	r3, [r3, #4]
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3b5      	bcc.n	8002f46 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7c1a      	ldrb	r2, [r3, #16]
 8002fe2:	f88d 2000 	strb.w	r2, [sp]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fea:	f002 fd3b 	bl	8005a64 <USB_DevInit>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e00c      	b.n	800301a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 fd7f 	bl	8006b16 <USB_DevDisconnect>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_PCD_Start+0x1c>
 800303a:	2302      	movs	r3, #2
 800303c:	e022      	b.n	8003084 <HAL_PCD_Start+0x62>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003056:	2b01      	cmp	r3, #1
 8003058:	d105      	bne.n	8003066 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f002 fc8c 	bl	8005988 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fd2d 	bl	8006ad4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b08d      	sub	sp, #52	@ 0x34
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fdeb 	bl	8006c7e <USB_GetMode>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 848c 	bne.w	80039c8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fd4f 	bl	8006b58 <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8482 	beq.w	80039c6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fd3c 	bl	8006b58 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f002 0202 	and.w	r2, r2, #2
 80030f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fd2a 	bl	8006b58 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b10      	cmp	r3, #16
 800310c:	d161      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0210 	bic.w	r2, r2, #16
 800311c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 020f 	and.w	r2, r3, #15
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	3304      	adds	r3, #4
 800313c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	0c5b      	lsrs	r3, r3, #17
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	2b02      	cmp	r3, #2
 8003148:	d124      	bne.n	8003194 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d035      	beq.n	80031c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	6a38      	ldr	r0, [r7, #32]
 800316a:	f003 fb61 	bl	8006830 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317a:	441a      	add	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800318c:	441a      	add	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	615a      	str	r2, [r3, #20]
 8003192:	e016      	b.n	80031c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	0c5b      	lsrs	r3, r3, #17
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	2b06      	cmp	r3, #6
 800319e:	d110      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031a6:	2208      	movs	r2, #8
 80031a8:	4619      	mov	r1, r3
 80031aa:	6a38      	ldr	r0, [r7, #32]
 80031ac:	f003 fb40 	bl	8006830 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031bc:	441a      	add	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0210 	orr.w	r2, r2, #16
 80031d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 fcbe 	bl	8006b58 <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031e6:	f040 80a7 	bne.w	8003338 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 fcc3 	bl	8006b7e <USB_ReadDevAllOutEpInterrupt>
 80031f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80031fa:	e099      	b.n	8003330 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 808e 	beq.w	8003324 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f003 fce7 	bl	8006be6 <USB_ReadDevOutEPInterrupt>
 8003218:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00c      	beq.n	800323e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	2301      	movs	r3, #1
 8003234:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fea1 	bl	8003f80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	2308      	movs	r3, #8
 8003258:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800325a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 ff77 	bl	8004150 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	2310      	movs	r3, #16
 800327c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d030      	beq.n	80032ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003290:	2b80      	cmp	r3, #128	@ 0x80
 8003292:	d109      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	78db      	ldrb	r3, [r3, #3]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f006 f85c 	bl	8009390 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e4:	461a      	mov	r2, r3
 80032e6:	2302      	movs	r3, #2
 80032e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	2320      	movs	r3, #32
 8003304:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003322:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	3301      	adds	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	f47f af62 	bne.w	80031fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f003 fc0b 	bl	8006b58 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003348:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800334c:	f040 80db 	bne.w	8003506 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fc2c 	bl	8006bb2 <USB_ReadDevAllInEpInterrupt>
 800335a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003360:	e0cd      	b.n	80034fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80c2 	beq.w	80034f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fc52 	bl	8006c22 <USB_ReadDevInEPInterrupt>
 800337e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d057      	beq.n	800343a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2201      	movs	r2, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69f9      	ldr	r1, [r7, #28]
 80033a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033aa:	4013      	ands	r3, r2
 80033ac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ba:	461a      	mov	r2, r3
 80033bc:	2301      	movs	r3, #1
 80033be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	799b      	ldrb	r3, [r3, #6]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d132      	bne.n	800342e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3320      	adds	r3, #32
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4403      	add	r3, r0
 80033e8:	331c      	adds	r3, #28
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4419      	add	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	3320      	adds	r3, #32
 80033fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d113      	bne.n	800342e <HAL_PCD_IRQHandler+0x3a2>
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3324      	adds	r3, #36	@ 0x24
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003426:	461a      	mov	r2, r3
 8003428:	2101      	movs	r1, #1
 800342a:	f003 fc59 	bl	8006ce0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f005 ff30 	bl	800929a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003450:	461a      	mov	r2, r3
 8003452:	2308      	movs	r3, #8
 8003454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346c:	461a      	mov	r2, r3
 800346e:	2310      	movs	r3, #16
 8003470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003488:	461a      	mov	r2, r3
 800348a:	2340      	movs	r3, #64	@ 0x40
 800348c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800349a:	6a38      	ldr	r0, [r7, #32]
 800349c:	f002 fc46 	bl	8005d2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3310      	adds	r3, #16
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	78db      	ldrb	r3, [r3, #3]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2200      	movs	r2, #0
 80034c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f005 ff73 	bl	80093b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034da:	461a      	mov	r2, r3
 80034dc:	2302      	movs	r3, #2
 80034de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fcbb 	bl	8003e68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	3301      	adds	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	f47f af2e 	bne.w	8003362 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fb24 	bl	8006b58 <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800351a:	d122      	bne.n	8003562 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003536:	2b01      	cmp	r3, #1
 8003538:	d108      	bne.n	800354c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003542:	2100      	movs	r1, #0
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fea1 	bl	800428c <HAL_PCDEx_LPM_Callback>
 800354a:	e002      	b.n	8003552 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f005 ff11 	bl	8009374 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 faf6 	bl	8006b58 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003576:	d112      	bne.n	800359e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f005 fecd 	bl	8009328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800359c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 fad8 	bl	8006b58 <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b2:	f040 80b7 	bne.w	8003724 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2110      	movs	r1, #16
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 fbab 	bl	8005d2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035da:	e046      	b.n	800366a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e8:	461a      	mov	r2, r3
 80035ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800360a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800360e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361c:	461a      	mov	r2, r3
 800361e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003622:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800363e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003642:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800365e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003662:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003666:	3301      	adds	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	791b      	ldrb	r3, [r3, #4]
 800366e:	461a      	mov	r2, r3
 8003670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003672:	4293      	cmp	r3, r2
 8003674:	d3b2      	bcc.n	80035dc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003684:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003688:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7bdb      	ldrb	r3, [r3, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a2:	f043 030b 	orr.w	r3, r3, #11
 80036a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b8:	f043 030b 	orr.w	r3, r3, #11
 80036bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036be:	e015      	b.n	80036ec <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036d2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80036d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e6:	f043 030b 	orr.w	r3, r3, #11
 80036ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80036fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800370e:	461a      	mov	r2, r3
 8003710:	f003 fae6 	bl	8006ce0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fa15 	bl	8006b58 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003738:	d123      	bne.n	8003782 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f003 faab 	bl	8006c9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f002 fb68 	bl	8005e1e <USB_GetDevSpeed>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681c      	ldr	r4, [r3, #0]
 800375a:	f001 f9c7 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 800375e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003764:	461a      	mov	r2, r3
 8003766:	4620      	mov	r0, r4
 8003768:	f002 f86c 	bl	8005844 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f005 fdbc 	bl	80092ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003780:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 f9e6 	bl	8006b58 <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d10a      	bne.n	80037ac <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 fd99 	bl	80092ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f002 0208 	and.w	r2, r2, #8
 80037aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 f9d1 	bl	8006b58 <USB_ReadInterrupts>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037bc:	2b80      	cmp	r3, #128	@ 0x80
 80037be:	d123      	bne.n	8003808 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d0:	e014      	b.n	80037fc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb08 	bl	8003e06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	3301      	adds	r3, #1
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	791b      	ldrb	r3, [r3, #4]
 8003800:	461a      	mov	r2, r3
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	4293      	cmp	r3, r2
 8003806:	d3e4      	bcc.n	80037d2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f003 f9a3 	bl	8006b58 <USB_ReadInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800381c:	d13c      	bne.n	8003898 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800381e:	2301      	movs	r3, #1
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
 8003822:	e02b      	b.n	800387c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3318      	adds	r3, #24
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d115      	bne.n	8003876 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800384a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800384c:	2b00      	cmp	r3, #0
 800384e:	da12      	bge.n	8003876 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3317      	adds	r3, #23
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800386c:	b2db      	uxtb	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fac8 	bl	8003e06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	3301      	adds	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	791b      	ldrb	r3, [r3, #4]
 8003880:	461a      	mov	r2, r3
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	4293      	cmp	r3, r2
 8003886:	d3cd      	bcc.n	8003824 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f003 f95b 	bl	8006b58 <USB_ReadInterrupts>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ac:	d156      	bne.n	800395c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ae:	2301      	movs	r3, #1
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b2:	e045      	b.n	8003940 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d12e      	bne.n	800393a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038de:	2b00      	cmp	r3, #0
 80038e0:	da2b      	bge.n	800393a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80038ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d121      	bne.n	800393a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003936:	6053      	str	r3, [r2, #4]
            break;
 8003938:	e008      	b.n	800394c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	461a      	mov	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	4293      	cmp	r3, r2
 800394a:	d3b3      	bcc.n	80038b4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800395a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f003 f8f9 	bl	8006b58 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003970:	d10a      	bne.n	8003988 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f005 fd30 	bl	80093d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f003 f8e3 	bl	8006b58 <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d115      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f005 fd20 	bl	80093f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	e000      	b.n	80039c8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80039c6:	bf00      	nop
    }
  }
}
 80039c8:	3734      	adds	r7, #52	@ 0x34
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}

080039ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_PCD_SetAddress+0x1a>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e012      	b.n	8003a0e <HAL_PCD_SetAddress+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 f842 	bl	8006a88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	4608      	mov	r0, r1
 8003a20:	4611      	mov	r1, r2
 8003a22:	461a      	mov	r2, r3
 8003a24:	4603      	mov	r3, r0
 8003a26:	70fb      	strb	r3, [r7, #3]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	803b      	strh	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da0f      	bge.n	8003a5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 020f 	and.w	r2, r3, #15
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	3310      	adds	r3, #16
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	3304      	adds	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	705a      	strb	r2, [r3, #1]
 8003a5a:	e00f      	b.n	8003a7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f003 020f 	and.w	r2, r3, #15
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a88:	883a      	ldrh	r2, [r7, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	78ba      	ldrb	r2, [r7, #2]
 8003a92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003aa6:	78bb      	ldrb	r3, [r7, #2]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d102      	bne.n	8003ab2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_PCD_EP_Open+0xaa>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e00e      	b.n	8003ade <HAL_PCD_EP_Open+0xc8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f002 f9ca 	bl	8005e68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003adc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da0f      	bge.n	8003b1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3310      	adds	r3, #16
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	705a      	strb	r2, [r3, #1]
 8003b18:	e00f      	b.n	8003b3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	3304      	adds	r3, #4
 8003b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_PCD_EP_Close+0x6e>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e00e      	b.n	8003b72 <HAL_PCD_EP_Close+0x8c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68f9      	ldr	r1, [r7, #12]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fa08 	bl	8005f78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	460b      	mov	r3, r1
 8003b88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	799b      	ldrb	r3, [r3, #6]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	799b      	ldrb	r3, [r3, #6]
 8003bde:	461a      	mov	r2, r3
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	f002 faa5 	bl	8006130 <USB_EPStartXfer>

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	f003 020f 	and.w	r2, r3, #15
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3310      	adds	r3, #16
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c60:	7afb      	ldrb	r3, [r7, #11]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	799b      	ldrb	r3, [r3, #6]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	799b      	ldrb	r3, [r3, #6]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	f002 fa53 	bl	8006130 <USB_EPStartXfer>

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	7912      	ldrb	r2, [r2, #4]
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e04f      	b.n	8003d52 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da0f      	bge.n	8003cda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	3310      	adds	r3, #16
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
 8003cd8:	e00d      	b.n	8003cf6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_PCD_EP_SetStall+0x82>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e01d      	b.n	8003d52 <HAL_PCD_EP_SetStall+0xbe>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f002 fddb 	bl	80068e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7999      	ldrb	r1, [r3, #6]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d42:	461a      	mov	r2, r3
 8003d44:	f002 ffcc 	bl	8006ce0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	7912      	ldrb	r2, [r2, #4]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e042      	b.n	8003dfe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da0f      	bge.n	8003da0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	3310      	adds	r3, #16
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	3304      	adds	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	705a      	strb	r2, [r3, #1]
 8003d9e:	e00f      	b.n	8003dc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	3304      	adds	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_PCD_EP_ClrStall+0x86>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e00e      	b.n	8003dfe <HAL_PCD_EP_ClrStall+0xa4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 fde4 	bl	80069bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da0c      	bge.n	8003e34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	3310      	adds	r3, #16
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3304      	adds	r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e00c      	b.n	8003e4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f002 fc03 	bl	8006660 <USB_EPStopXfer>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	@ 0x28
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d901      	bls.n	8003ea0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e06b      	b.n	8003f78 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d902      	bls.n	8003ebc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	3303      	adds	r3, #3
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ec4:	e02a      	b.n	8003f1c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d902      	bls.n	8003ee2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3303      	adds	r3, #3
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68d9      	ldr	r1, [r3, #12]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f002 fc58 	bl	80067b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	441a      	add	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d809      	bhi.n	8003f46 <PCD_WriteEmptyTxFifo+0xde>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d203      	bcs.n	8003f46 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1bf      	bne.n	8003ec6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d811      	bhi.n	8003f76 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2201      	movs	r2, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	6939      	ldr	r1, [r7, #16]
 8003f6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f72:	4013      	ands	r3, r2
 8003f74:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	333c      	adds	r3, #60	@ 0x3c
 8003f98:	3304      	adds	r3, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	799b      	ldrb	r3, [r3, #6]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d17b      	bne.n	80040ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4a61      	ldr	r2, [pc, #388]	@ (8004148 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f240 80b9 	bls.w	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80b3 	beq.w	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe8:	6093      	str	r3, [r2, #8]
 8003fea:	e0a7      	b.n	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004002:	461a      	mov	r2, r3
 8004004:	2320      	movs	r3, #32
 8004006:	6093      	str	r3, [r2, #8]
 8004008:	e098      	b.n	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8093 	bne.w	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4a4b      	ldr	r2, [pc, #300]	@ (8004148 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d90f      	bls.n	800403e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	6093      	str	r3, [r2, #8]
 800403c:	e07e      	b.n	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	0159      	lsls	r1, r3, #5
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	440b      	add	r3, r1
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d114      	bne.n	80040a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004088:	461a      	mov	r2, r3
 800408a:	2101      	movs	r1, #1
 800408c:	f002 fe28 	bl	8006ce0 <USB_EP0_OutStart>
 8004090:	e006      	b.n	80040a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	441a      	add	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f005 f8dc 	bl	8009264 <HAL_PCD_DataOutStageCallback>
 80040ac:	e046      	b.n	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4a26      	ldr	r2, [pc, #152]	@ (800414c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d124      	bne.n	8004100 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	e032      	b.n	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	2320      	movs	r3, #32
 80040f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f005 f8b3 	bl	8009264 <HAL_PCD_DataOutStageCallback>
 80040fe:	e01d      	b.n	800413c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d114      	bne.n	8004130 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d108      	bne.n	8004130 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004128:	461a      	mov	r2, r3
 800412a:	2100      	movs	r1, #0
 800412c:	f002 fdd8 	bl	8006ce0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f005 f894 	bl	8009264 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	4f54300a 	.word	0x4f54300a
 800414c:	4f54310a 	.word	0x4f54310a

08004150 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	333c      	adds	r3, #60	@ 0x3c
 8004168:	3304      	adds	r3, #4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d90e      	bls.n	80041a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419c:	461a      	mov	r2, r3
 800419e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f005 f84b 	bl	8009240 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d90c      	bls.n	80041cc <PCD_EP_OutSetupPacket_int+0x7c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	799b      	ldrb	r3, [r3, #6]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d108      	bne.n	80041cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041c4:	461a      	mov	r2, r3
 80041c6:	2101      	movs	r1, #1
 80041c8:	f002 fd8a 	bl	8006ce0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	4f54300a 	.word	0x4f54300a

080041dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
 80041e8:	4613      	mov	r3, r2
 80041ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d107      	bne.n	800420a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041fa:	883b      	ldrh	r3, [r7, #0]
 80041fc:	0419      	lsls	r1, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	430a      	orrs	r2, r1
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28
 8004208:	e028      	b.n	800425c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4413      	add	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e00d      	b.n	800423a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	3340      	adds	r3, #64	@ 0x40
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4413      	add	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	3301      	adds	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	3b01      	subs	r3, #1
 8004240:	429a      	cmp	r2, r3
 8004242:	d3ec      	bcc.n	800421e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004244:	883b      	ldrh	r3, [r7, #0]
 8004246:	0418      	lsls	r0, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	3b01      	subs	r3, #1
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	4302      	orrs	r2, r0
 8004254:	3340      	adds	r3, #64	@ 0x40
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e267      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d075      	beq.n	80043ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c2:	4b88      	ldr	r3, [pc, #544]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d00c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b85      	ldr	r3, [pc, #532]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d112      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b82      	ldr	r3, [pc, #520]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e6:	d10b      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	4b7e      	ldr	r3, [pc, #504]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05b      	beq.n	80043ac <HAL_RCC_OscConfig+0x108>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d157      	bne.n	80043ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e242      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004308:	d106      	bne.n	8004318 <HAL_RCC_OscConfig+0x74>
 800430a:	4b76      	ldr	r3, [pc, #472]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a75      	ldr	r2, [pc, #468]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e01d      	b.n	8004354 <HAL_RCC_OscConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x98>
 8004322:	4b70      	ldr	r3, [pc, #448]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6f      	ldr	r2, [pc, #444]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b6d      	ldr	r3, [pc, #436]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6c      	ldr	r2, [pc, #432]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0xb0>
 800433c:	4b69      	ldr	r3, [pc, #420]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a68      	ldr	r2, [pc, #416]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b66      	ldr	r3, [pc, #408]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a65      	ldr	r2, [pc, #404]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800434e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fd fc26 	bl	8001bac <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fd fc22 	bl	8001bac <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	@ 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e207      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b5b      	ldr	r3, [pc, #364]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0xc0>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd fc12 	bl	8001bac <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438c:	f7fd fc0e 	bl	8001bac <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1f3      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	4b51      	ldr	r3, [pc, #324]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0xe8>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ba:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b44      	ldr	r3, [pc, #272]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x152>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1c7      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4937      	ldr	r1, [pc, #220]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e03a      	b.n	8004482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004414:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <HAL_RCC_OscConfig+0x244>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fd fbc7 	bl	8001bac <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004422:	f7fd fbc3 	bl	8001bac <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1a8      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4925      	ldr	r1, [pc, #148]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_RCC_OscConfig+0x244>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd fba6 	bl	8001bac <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004464:	f7fd fba2 	bl	8001bac <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e187      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d036      	beq.n	80044fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_RCC_OscConfig+0x248>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fd fb86 	bl	8001bac <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fd fb82 	bl	8001bac <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e167      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x200>
 80044c2:	e01b      	b.n	80044fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <HAL_RCC_OscConfig+0x248>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ca:	f7fd fb6f 	bl	8001bac <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	e00e      	b.n	80044f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fd fb6b 	bl	8001bac <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d907      	bls.n	80044f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e150      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	42470000 	.word	0x42470000
 80044ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	4b88      	ldr	r3, [pc, #544]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ea      	bne.n	80044d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8097 	beq.w	8004638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b81      	ldr	r3, [pc, #516]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	4b7d      	ldr	r3, [pc, #500]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	4a7c      	ldr	r2, [pc, #496]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	@ 0x40
 800452a:	4b7a      	ldr	r3, [pc, #488]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b77      	ldr	r3, [pc, #476]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d118      	bne.n	8004578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004546:	4b74      	ldr	r3, [pc, #464]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a73      	ldr	r2, [pc, #460]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fd fb2b 	bl	8001bac <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455a:	f7fd fb27 	bl	8001bac <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e10c      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b6a      	ldr	r3, [pc, #424]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x2ea>
 8004580:	4b64      	ldr	r3, [pc, #400]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a63      	ldr	r2, [pc, #396]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x324>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x30c>
 8004596:	4b5f      	ldr	r3, [pc, #380]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a5e      	ldr	r2, [pc, #376]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x324>
 80045b0:	4b58      	ldr	r3, [pc, #352]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	4a57      	ldr	r2, [pc, #348]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a54      	ldr	r2, [pc, #336]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fd faec 	bl	8001bac <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fd fae8 	bl	8001bac <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0cb      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	4b49      	ldr	r3, [pc, #292]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCC_OscConfig+0x334>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7fd fad6 	bl	8001bac <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fd fad2 	bl	8001bac <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0b5      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	4b3e      	ldr	r3, [pc, #248]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ee      	bne.n	8004604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462c:	4b39      	ldr	r3, [pc, #228]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	4a38      	ldr	r2, [pc, #224]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80a1 	beq.w	8004784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004642:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b08      	cmp	r3, #8
 800464c:	d05c      	beq.n	8004708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d141      	bne.n	80046da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b31      	ldr	r3, [pc, #196]	@ (800471c <HAL_RCC_OscConfig+0x478>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fd faa6 	bl	8001bac <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004664:	f7fd faa2 	bl	8001bac <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e087      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b27      	ldr	r3, [pc, #156]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	491b      	ldr	r1, [pc, #108]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ac:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCC_OscConfig+0x478>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fd fa7b 	bl	8001bac <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fd fa77 	bl	8001bac <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e05c      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046cc:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x416>
 80046d8:	e054      	b.n	8004784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b10      	ldr	r3, [pc, #64]	@ (800471c <HAL_RCC_OscConfig+0x478>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fd fa64 	bl	8001bac <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fd fa60 	bl	8001bac <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e045      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x444>
 8004706:	e03d      	b.n	8004784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e038      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000
 800471c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004720:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x4ec>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d028      	beq.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d121      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d11a      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	4293      	cmp	r3, r2
 800475a:	d111      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0cc      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a8:	4b68      	ldr	r3, [pc, #416]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90c      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b65      	ldr	r3, [pc, #404]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b63      	ldr	r3, [pc, #396]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0b8      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e8:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a58      	ldr	r2, [pc, #352]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004800:	4b53      	ldr	r3, [pc, #332]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a52      	ldr	r2, [pc, #328]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800480a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b50      	ldr	r3, [pc, #320]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	494d      	ldr	r1, [pc, #308]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d044      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b47      	ldr	r3, [pc, #284]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d119      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d003      	beq.n	8004852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	2b03      	cmp	r3, #3
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b3f      	ldr	r3, [pc, #252]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e067      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4934      	ldr	r1, [pc, #208]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004884:	f7fd f992 	bl	8001bac <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fd f98e 	bl	8001bac <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e04f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b4:	4b25      	ldr	r3, [pc, #148]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20c      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b22      	ldr	r3, [pc, #136]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e032      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e8:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4916      	ldr	r1, [pc, #88]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004906:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	490e      	ldr	r1, [pc, #56]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491a:	f000 f821 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 800491e:	4602      	mov	r2, r0
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	490a      	ldr	r1, [pc, #40]	@ (8004954 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	5ccb      	ldrb	r3, [r1, r3]
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a09      	ldr	r2, [pc, #36]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004936:	4b09      	ldr	r3, [pc, #36]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd f8f2 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023c00 	.word	0x40023c00
 8004950:	40023800 	.word	0x40023800
 8004954:	0800c4c8 	.word	0x0800c4c8
 8004958:	2000000c 	.word	0x2000000c
 800495c:	20000010 	.word	0x20000010

08004960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b090      	sub	sp, #64	@ 0x40
 8004966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004970:	2300      	movs	r3, #0
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004978:	4b59      	ldr	r3, [pc, #356]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b08      	cmp	r3, #8
 8004982:	d00d      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004984:	2b08      	cmp	r3, #8
 8004986:	f200 80a1 	bhi.w	8004acc <HAL_RCC_GetSysClockFreq+0x16c>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x34>
 800498e:	2b04      	cmp	r3, #4
 8004990:	d003      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x3a>
 8004992:	e09b      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004996:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004998:	e09b      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499a:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800499c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800499e:	e098      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049aa:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	2200      	movs	r2, #0
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049c8:	2100      	movs	r1, #0
 80049ca:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049cc:	fb03 f201 	mul.w	r2, r3, r1
 80049d0:	2300      	movs	r3, #0
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	4a43      	ldr	r2, [pc, #268]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049da:	fba0 1202 	umull	r1, r2, r0, r2
 80049de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e0:	460a      	mov	r2, r1
 80049e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e6:	4413      	add	r3, r2
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ec:	2200      	movs	r2, #0
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	61fa      	str	r2, [r7, #28]
 80049f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049fa:	f7fc f8dd 	bl	8000bb8 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4613      	mov	r3, r2
 8004a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a06:	e053      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a08:	4b35      	ldr	r3, [pc, #212]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	2200      	movs	r2, #0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	617a      	str	r2, [r7, #20]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a1a:	f04f 0b00 	mov.w	fp, #0
 8004a1e:	4652      	mov	r2, sl
 8004a20:	465b      	mov	r3, fp
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	0159      	lsls	r1, r3, #5
 8004a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a30:	0150      	lsls	r0, r2, #5
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	ebb2 080a 	subs.w	r8, r2, sl
 8004a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a52:	ebb2 0408 	subs.w	r4, r2, r8
 8004a56:	eb63 0509 	sbc.w	r5, r3, r9
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	00eb      	lsls	r3, r5, #3
 8004a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a68:	00e2      	lsls	r2, r4, #3
 8004a6a:	4614      	mov	r4, r2
 8004a6c:	461d      	mov	r5, r3
 8004a6e:	eb14 030a 	adds.w	r3, r4, sl
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	eb45 030b 	adc.w	r3, r5, fp
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a86:	4629      	mov	r1, r5
 8004a88:	028b      	lsls	r3, r1, #10
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a90:	4621      	mov	r1, r4
 8004a92:	028a      	lsls	r2, r1, #10
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa4:	f7fc f888 	bl	8000bb8 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4613      	mov	r3, r2
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	3301      	adds	r3, #1
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004ac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004aca:	e002      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ace:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3740      	adds	r7, #64	@ 0x40
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	00f42400 	.word	0x00f42400
 8004ae8:	017d7840 	.word	0x017d7840

08004aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af0:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2000000c 	.word	0x2000000c

08004b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b08:	f7ff fff0 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0a9b      	lsrs	r3, r3, #10
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4903      	ldr	r1, [pc, #12]	@ (8004b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	0800c4d8 	.word	0x0800c4d8

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fe2c 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fac0 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e041      	b.n	8004c60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f839 	bl	8004c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 fa71 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start+0x24>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e022      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x6a>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d109      	bne.n	8004cba <HAL_TIM_PWM_Start+0x3e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e015      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x6a>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d109      	bne.n	8004cd4 <HAL_TIM_PWM_Start+0x58>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e008      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x6a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e068      	b.n	8004dc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0x82>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_PWM_Start+0xaa>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x92>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_PWM_Start+0xaa>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_PWM_Start+0xaa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fc90 	bl	8005654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a23      	ldr	r2, [pc, #140]	@ (8004dc8 <HAL_TIM_PWM_Start+0x14c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d107      	bne.n	8004d4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <HAL_TIM_PWM_Start+0x14c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x10e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d60:	d013      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x10e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a19      	ldr	r2, [pc, #100]	@ (8004dcc <HAL_TIM_PWM_Start+0x150>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x10e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a17      	ldr	r2, [pc, #92]	@ (8004dd0 <HAL_TIM_PWM_Start+0x154>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x10e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a16      	ldr	r2, [pc, #88]	@ (8004dd4 <HAL_TIM_PWM_Start+0x158>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x10e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <HAL_TIM_PWM_Start+0x15c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d111      	bne.n	8004dae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d010      	beq.n	8004dbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	e007      	b.n	8004dbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40014000 	.word	0x40014000

08004ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e0ae      	b.n	8004f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	f200 809f 	bhi.w	8004f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e45 	.word	0x08004e45
 8004e14:	08004f49 	.word	0x08004f49
 8004e18:	08004f49 	.word	0x08004f49
 8004e1c:	08004f49 	.word	0x08004f49
 8004e20:	08004e85 	.word	0x08004e85
 8004e24:	08004f49 	.word	0x08004f49
 8004e28:	08004f49 	.word	0x08004f49
 8004e2c:	08004f49 	.word	0x08004f49
 8004e30:	08004ec7 	.word	0x08004ec7
 8004e34:	08004f49 	.word	0x08004f49
 8004e38:	08004f49 	.word	0x08004f49
 8004e3c:	08004f49 	.word	0x08004f49
 8004e40:	08004f07 	.word	0x08004f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f9dc 	bl	8005208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0208 	orr.w	r2, r2, #8
 8004e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0204 	bic.w	r2, r2, #4
 8004e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6999      	ldr	r1, [r3, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	619a      	str	r2, [r3, #24]
      break;
 8004e82:	e064      	b.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fa22 	bl	80052d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	619a      	str	r2, [r3, #24]
      break;
 8004ec4:	e043      	b.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fa6d 	bl	80053ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0208 	orr.w	r2, r2, #8
 8004ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0204 	bic.w	r2, r2, #4
 8004ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69d9      	ldr	r1, [r3, #28]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	61da      	str	r2, [r3, #28]
      break;
 8004f04:	e023      	b.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fab7 	bl	8005480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	021a      	lsls	r2, r3, #8
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	61da      	str	r2, [r3, #28]
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIM_ConfigClockSource+0x1c>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e0b4      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x186>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fb4:	d03e      	beq.n	8005034 <HAL_TIM_ConfigClockSource+0xd4>
 8004fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fba:	f200 8087 	bhi.w	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc2:	f000 8086 	beq.w	80050d2 <HAL_TIM_ConfigClockSource+0x172>
 8004fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fca:	d87f      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004fcc:	2b70      	cmp	r3, #112	@ 0x70
 8004fce:	d01a      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xa6>
 8004fd0:	2b70      	cmp	r3, #112	@ 0x70
 8004fd2:	d87b      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b60      	cmp	r3, #96	@ 0x60
 8004fd6:	d050      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x11a>
 8004fd8:	2b60      	cmp	r3, #96	@ 0x60
 8004fda:	d877      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b50      	cmp	r3, #80	@ 0x50
 8004fde:	d03c      	beq.n	800505a <HAL_TIM_ConfigClockSource+0xfa>
 8004fe0:	2b50      	cmp	r3, #80	@ 0x50
 8004fe2:	d873      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004fe4:	2b40      	cmp	r3, #64	@ 0x40
 8004fe6:	d058      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x13a>
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d86f      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b30      	cmp	r3, #48	@ 0x30
 8004fee:	d064      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x15a>
 8004ff0:	2b30      	cmp	r3, #48	@ 0x30
 8004ff2:	d86b      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d060      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x15a>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d867      	bhi.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d05c      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x15a>
 8005000:	2b10      	cmp	r3, #16
 8005002:	d05a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	e062      	b.n	80050cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005016:	f000 fafd 	bl	8005614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	609a      	str	r2, [r3, #8]
      break;
 8005032:	e04f      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005044:	f000 fae6 	bl	8005614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005056:	609a      	str	r2, [r3, #8]
      break;
 8005058:	e03c      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	461a      	mov	r2, r3
 8005068:	f000 fa5a 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2150      	movs	r1, #80	@ 0x50
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fab3 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005078:	e02c      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	461a      	mov	r2, r3
 8005088:	f000 fa79 	bl	800557e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2160      	movs	r1, #96	@ 0x60
 8005092:	4618      	mov	r0, r3
 8005094:	f000 faa3 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005098:	e01c      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 fa3a 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2140      	movs	r1, #64	@ 0x40
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fa93 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 80050b8:	e00c      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f000 fa8a 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 80050ca:	e003      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	e000      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a3a      	ldr	r2, [pc, #232]	@ (80051ec <TIM_Base_SetConfig+0xfc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a37      	ldr	r2, [pc, #220]	@ (80051f0 <TIM_Base_SetConfig+0x100>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a36      	ldr	r2, [pc, #216]	@ (80051f4 <TIM_Base_SetConfig+0x104>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a35      	ldr	r2, [pc, #212]	@ (80051f8 <TIM_Base_SetConfig+0x108>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2b      	ldr	r2, [pc, #172]	@ (80051ec <TIM_Base_SetConfig+0xfc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01b      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d017      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a28      	ldr	r2, [pc, #160]	@ (80051f0 <TIM_Base_SetConfig+0x100>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a27      	ldr	r2, [pc, #156]	@ (80051f4 <TIM_Base_SetConfig+0x104>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00f      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a26      	ldr	r2, [pc, #152]	@ (80051f8 <TIM_Base_SetConfig+0x108>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a25      	ldr	r2, [pc, #148]	@ (80051fc <TIM_Base_SetConfig+0x10c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a24      	ldr	r2, [pc, #144]	@ (8005200 <TIM_Base_SetConfig+0x110>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a23      	ldr	r2, [pc, #140]	@ (8005204 <TIM_Base_SetConfig+0x114>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0e      	ldr	r2, [pc, #56]	@ (80051ec <TIM_Base_SetConfig+0xfc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]
  }
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800

08005208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 0201 	bic.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0302 	bic.w	r3, r3, #2
 8005250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a1c      	ldr	r2, [pc, #112]	@ (80052d0 <TIM_OC1_SetConfig+0xc8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10c      	bne.n	800527e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0308 	bic.w	r3, r3, #8
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a13      	ldr	r2, [pc, #76]	@ (80052d0 <TIM_OC1_SetConfig+0xc8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40010000 	.word	0x40010000

080052d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 0210 	bic.w	r2, r3, #16
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <TIM_OC2_SetConfig+0xd4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d10d      	bne.n	8005350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800533a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800534e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a15      	ldr	r2, [pc, #84]	@ (80053a8 <TIM_OC2_SetConfig+0xd4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d113      	bne.n	8005380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800535e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000

080053ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0303 	bic.w	r3, r3, #3
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1d      	ldr	r2, [pc, #116]	@ (800547c <TIM_OC3_SetConfig+0xd0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10d      	bne.n	8005426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a14      	ldr	r2, [pc, #80]	@ (800547c <TIM_OC3_SetConfig+0xd0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d113      	bne.n	8005456 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40010000 	.word	0x40010000

08005480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	031b      	lsls	r3, r3, #12
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a10      	ldr	r2, [pc, #64]	@ (800551c <TIM_OC4_SetConfig+0x9c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d109      	bne.n	80054f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	019b      	lsls	r3, r3, #6
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000

08005520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0201 	bic.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f023 0210 	bic.w	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	031b      	lsls	r3, r3, #12
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	43db      	mvns	r3, r3
 8005676:	401a      	ands	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e050      	b.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d018      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005704:	d013      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a18      	ldr	r2, [pc, #96]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a16      	ldr	r2, [pc, #88]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a13      	ldr	r2, [pc, #76]	@ (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10c      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000

0800577c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800577c:	b084      	sub	sp, #16
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	f107 001c 	add.w	r0, r7, #28
 800578a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800578e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005792:	2b01      	cmp	r3, #1
 8005794:	d123      	bne.n	80057de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80057aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 fae2 	bl	8006d9c <USB_CoreReset>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
 80057dc:	e01b      	b.n	8005816 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fad6 	bl	8006d9c <USB_CoreReset>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38
 8005808:	e005      	b.n	8005816 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005816:	7fbb      	ldrb	r3, [r7, #30]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10b      	bne.n	8005834 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f043 0206 	orr.w	r2, r3, #6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005840:	b004      	add	sp, #16
 8005842:	4770      	bx	lr

08005844 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d165      	bne.n	8005924 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a41      	ldr	r2, [pc, #260]	@ (8005960 <USB_SetTurnaroundTime+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d906      	bls.n	800586e <USB_SetTurnaroundTime+0x2a>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4a40      	ldr	r2, [pc, #256]	@ (8005964 <USB_SetTurnaroundTime+0x120>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d202      	bcs.n	800586e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005868:	230f      	movs	r3, #15
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e062      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4a3c      	ldr	r2, [pc, #240]	@ (8005964 <USB_SetTurnaroundTime+0x120>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d306      	bcc.n	8005884 <USB_SetTurnaroundTime+0x40>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4a3b      	ldr	r2, [pc, #236]	@ (8005968 <USB_SetTurnaroundTime+0x124>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d202      	bcs.n	8005884 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800587e:	230e      	movs	r3, #14
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e057      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4a38      	ldr	r2, [pc, #224]	@ (8005968 <USB_SetTurnaroundTime+0x124>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d306      	bcc.n	800589a <USB_SetTurnaroundTime+0x56>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4a37      	ldr	r2, [pc, #220]	@ (800596c <USB_SetTurnaroundTime+0x128>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d202      	bcs.n	800589a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005894:	230d      	movs	r3, #13
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e04c      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4a33      	ldr	r2, [pc, #204]	@ (800596c <USB_SetTurnaroundTime+0x128>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d306      	bcc.n	80058b0 <USB_SetTurnaroundTime+0x6c>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <USB_SetTurnaroundTime+0x12c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d802      	bhi.n	80058b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058aa:	230c      	movs	r3, #12
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e041      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005970 <USB_SetTurnaroundTime+0x12c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d906      	bls.n	80058c6 <USB_SetTurnaroundTime+0x82>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005974 <USB_SetTurnaroundTime+0x130>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d802      	bhi.n	80058c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058c0:	230b      	movs	r3, #11
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e036      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005974 <USB_SetTurnaroundTime+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d906      	bls.n	80058dc <USB_SetTurnaroundTime+0x98>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4a29      	ldr	r2, [pc, #164]	@ (8005978 <USB_SetTurnaroundTime+0x134>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d802      	bhi.n	80058dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80058d6:	230a      	movs	r3, #10
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e02b      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a26      	ldr	r2, [pc, #152]	@ (8005978 <USB_SetTurnaroundTime+0x134>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d906      	bls.n	80058f2 <USB_SetTurnaroundTime+0xae>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a25      	ldr	r2, [pc, #148]	@ (800597c <USB_SetTurnaroundTime+0x138>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d202      	bcs.n	80058f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058ec:	2309      	movs	r3, #9
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e020      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4a21      	ldr	r2, [pc, #132]	@ (800597c <USB_SetTurnaroundTime+0x138>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d306      	bcc.n	8005908 <USB_SetTurnaroundTime+0xc4>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4a20      	ldr	r2, [pc, #128]	@ (8005980 <USB_SetTurnaroundTime+0x13c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d802      	bhi.n	8005908 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005902:	2308      	movs	r3, #8
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e015      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a1d      	ldr	r2, [pc, #116]	@ (8005980 <USB_SetTurnaroundTime+0x13c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d906      	bls.n	800591e <USB_SetTurnaroundTime+0xda>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a1c      	ldr	r2, [pc, #112]	@ (8005984 <USB_SetTurnaroundTime+0x140>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d202      	bcs.n	800591e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005918:	2307      	movs	r3, #7
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e00a      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800591e:	2306      	movs	r3, #6
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e007      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800592a:	2309      	movs	r3, #9
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e001      	b.n	8005934 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005930:	2309      	movs	r3, #9
 8005932:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	00d8acbf 	.word	0x00d8acbf
 8005964:	00e4e1c0 	.word	0x00e4e1c0
 8005968:	00f42400 	.word	0x00f42400
 800596c:	01067380 	.word	0x01067380
 8005970:	011a499f 	.word	0x011a499f
 8005974:	01312cff 	.word	0x01312cff
 8005978:	014ca43f 	.word	0x014ca43f
 800597c:	016e3600 	.word	0x016e3600
 8005980:	01a6ab1f 	.word	0x01a6ab1f
 8005984:	01e84800 	.word	0x01e84800

08005988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f043 0201 	orr.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d115      	bne.n	8005a1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059fa:	200a      	movs	r0, #10
 80059fc:	f7fc f8e2 	bl	8001bc4 <HAL_Delay>
      ms += 10U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	330a      	adds	r3, #10
 8005a04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 f939 	bl	8006c7e <USB_GetMode>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d01e      	beq.n	8005a50 <USB_SetCurrentMode+0x84>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a16:	d9f0      	bls.n	80059fa <USB_SetCurrentMode+0x2e>
 8005a18:	e01a      	b.n	8005a50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d115      	bne.n	8005a4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a2c:	200a      	movs	r0, #10
 8005a2e:	f7fc f8c9 	bl	8001bc4 <HAL_Delay>
      ms += 10U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	330a      	adds	r3, #10
 8005a36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 f920 	bl	8006c7e <USB_GetMode>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <USB_SetCurrentMode+0x84>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a48:	d9f0      	bls.n	8005a2c <USB_SetCurrentMode+0x60>
 8005a4a:	e001      	b.n	8005a50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e005      	b.n	8005a5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a54:	d101      	bne.n	8005a5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a64:	b084      	sub	sp, #16
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e009      	b.n	8005a98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	3340      	adds	r3, #64	@ 0x40
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3301      	adds	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b0e      	cmp	r3, #14
 8005a9c:	d9f2      	bls.n	8005a84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11c      	bne.n	8005ae0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ab4:	f043 0302 	orr.w	r3, r3, #2
 8005ab8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ade:	e00b      	b.n	8005af8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005afe:	461a      	mov	r2, r3
 8005b00:	2300      	movs	r3, #0
 8005b02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10d      	bne.n	8005b28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b14:	2100      	movs	r1, #0
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f968 	bl	8005dec <USB_SetDevSpeed>
 8005b1c:	e008      	b.n	8005b30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b1e:	2101      	movs	r1, #1
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f963 	bl	8005dec <USB_SetDevSpeed>
 8005b26:	e003      	b.n	8005b30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b28:	2103      	movs	r1, #3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f95e 	bl	8005dec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b30:	2110      	movs	r1, #16
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8fa 	bl	8005d2c <USB_FlushTxFifo>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f924 	bl	8005d90 <USB_FlushRxFifo>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	e043      	b.n	8005c04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b92:	d118      	bne.n	8005bc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e013      	b.n	8005bd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e008      	b.n	8005bd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3301      	adds	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c08:	461a      	mov	r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d3b5      	bcc.n	8005b7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	e043      	b.n	8005c9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c2c:	d118      	bne.n	8005c60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c40:	461a      	mov	r2, r3
 8005c42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	e013      	b.n	8005c72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c56:	461a      	mov	r2, r3
 8005c58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e008      	b.n	8005c72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d3b5      	bcc.n	8005c16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005cca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d105      	bne.n	8005ce0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f043 0210 	orr.w	r2, r3, #16
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	4b10      	ldr	r3, [pc, #64]	@ (8005d28 <USB_DevInit+0x2c4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f043 0208 	orr.w	r2, r3, #8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d107      	bne.n	8005d18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d10:	f043 0304 	orr.w	r3, r3, #4
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	803c3800 	.word	0x803c3800

08005d2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d46:	d901      	bls.n	8005d4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e01b      	b.n	8005d84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	daf2      	bge.n	8005d3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	019b      	lsls	r3, r3, #6
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d70:	d901      	bls.n	8005d76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e006      	b.n	8005d84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d0f0      	beq.n	8005d64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005da8:	d901      	bls.n	8005dae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e018      	b.n	8005de0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	daf2      	bge.n	8005d9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dcc:	d901      	bls.n	8005dd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e006      	b.n	8005de0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d0f0      	beq.n	8005dc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0306 	and.w	r3, r3, #6
 8005e36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]
 8005e42:	e00a      	b.n	8005e5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d002      	beq.n	8005e50 <USB_GetDevSpeed+0x32>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b06      	cmp	r3, #6
 8005e4e:	d102      	bne.n	8005e56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e50:	2302      	movs	r3, #2
 8005e52:	75fb      	strb	r3, [r7, #23]
 8005e54:	e001      	b.n	8005e5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e56:	230f      	movs	r3, #15
 8005e58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d13a      	bne.n	8005efa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	68f9      	ldr	r1, [r7, #12]
 8005e9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d155      	bne.n	8005f68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ed8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	059b      	lsls	r3, r3, #22
 8005ede:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e036      	b.n	8005f68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f00:	69da      	ldr	r2, [r3, #28]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11a      	bne.n	8005f68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	791b      	ldrb	r3, [r3, #4]
 8005f4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	4313      	orrs	r3, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d161      	bne.n	8006058 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005faa:	d11f      	bne.n	8005fec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8006002:	b29b      	uxth	r3, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800600c:	4013      	ands	r3, r2
 800600e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006030:	4013      	ands	r3, r2
 8006032:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0159      	lsls	r1, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	440b      	add	r3, r1
 800604a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604e:	4619      	mov	r1, r3
 8006050:	4b35      	ldr	r3, [pc, #212]	@ (8006128 <USB_DeactivateEndpoint+0x1b0>)
 8006052:	4013      	ands	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
 8006056:	e060      	b.n	800611a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800606a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800606e:	d11f      	bne.n	80060b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800608e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	2101      	movs	r1, #1
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	43db      	mvns	r3, r3
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060d0:	4013      	ands	r3, r2
 80060d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	2101      	movs	r1, #1
 80060e6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	43db      	mvns	r3, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060f4:	4013      	ands	r3, r2
 80060f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	0159      	lsls	r1, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	440b      	add	r3, r1
 800610e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006112:	4619      	mov	r1, r3
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <USB_DeactivateEndpoint+0x1b4>)
 8006116:	4013      	ands	r3, r2
 8006118:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	ec337800 	.word	0xec337800
 800612c:	eff37800 	.word	0xeff37800

08006130 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	@ 0x28
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	f040 817a 	bne.w	8006446 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d132      	bne.n	80061c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006174:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006178:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800617c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800619c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b8:	0cdb      	lsrs	r3, r3, #19
 80061ba:	04db      	lsls	r3, r3, #19
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	e092      	b.n	80062e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061da:	0cdb      	lsrs	r3, r3, #19
 80061dc:	04db      	lsls	r3, r3, #19
 80061de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006202:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d11a      	bne.n	8006240 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800623c:	6113      	str	r3, [r2, #16]
 800623e:	e01b      	b.n	8006278 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6919      	ldr	r1, [r3, #16]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	440b      	add	r3, r1
 8006258:	1e59      	subs	r1, r3, #1
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006262:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006264:	4ba2      	ldr	r3, [pc, #648]	@ (80064f0 <USB_EPStartXfer+0x3c0>)
 8006266:	400b      	ands	r3, r1
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	0148      	lsls	r0, r1, #5
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	4401      	add	r1, r0
 8006270:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006274:	4313      	orrs	r3, r2
 8006276:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628e:	69b9      	ldr	r1, [r7, #24]
 8006290:	0148      	lsls	r0, r1, #5
 8006292:	69f9      	ldr	r1, [r7, #28]
 8006294:	4401      	add	r1, r0
 8006296:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800629a:	4313      	orrs	r3, r2
 800629c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	791b      	ldrb	r3, [r3, #4]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d11f      	bne.n	80062e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80062c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d14b      	bne.n	8006384 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	791b      	ldrb	r3, [r3, #4]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d128      	bne.n	8006362 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d110      	bne.n	8006342 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800633a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	e00f      	b.n	8006362 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800635c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006360:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800637c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e165      	b.n	8006650 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d015      	beq.n	80063d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 814d 	beq.w	8006650 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f303 	lsl.w	r3, r1, r3
 80063cc:	69f9      	ldr	r1, [r7, #28]
 80063ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063d2:	4313      	orrs	r3, r2
 80063d4:	634b      	str	r3, [r1, #52]	@ 0x34
 80063d6:	e13b      	b.n	8006650 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d110      	bne.n	800640a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006402:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	e00f      	b.n	800642a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006428:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	68d9      	ldr	r1, [r3, #12]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	b298      	uxth	r0, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	4603      	mov	r3, r0
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f9b8 	bl	80067b4 <USB_WritePacket>
 8006444:	e104      	b.n	8006650 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006460:	0cdb      	lsrs	r3, r3, #19
 8006462:	04db      	lsls	r3, r3, #19
 8006464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006480:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006484:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006488:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d131      	bne.n	80064f4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	0148      	lsls	r0, r1, #5
 80064c2:	69f9      	ldr	r1, [r7, #28]
 80064c4:	4401      	add	r1, r0
 80064c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ca:	4313      	orrs	r3, r2
 80064cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064ec:	6113      	str	r3, [r2, #16]
 80064ee:	e061      	b.n	80065b4 <USB_EPStartXfer+0x484>
 80064f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d123      	bne.n	8006544 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006512:	69b9      	ldr	r1, [r7, #24]
 8006514:	0148      	lsls	r0, r1, #5
 8006516:	69f9      	ldr	r1, [r7, #28]
 8006518:	4401      	add	r1, r0
 800651a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800651e:	4313      	orrs	r3, r2
 8006520:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800653c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006540:	6113      	str	r3, [r2, #16]
 8006542:	e037      	b.n	80065b4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	4413      	add	r3, r2
 800654e:	1e5a      	subs	r2, r3, #1
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	fbb2 f3f3 	udiv	r3, r2, r3
 8006558:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	8afa      	ldrh	r2, [r7, #22]
 8006560:	fb03 f202 	mul.w	r2, r3, r2
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	8afb      	ldrh	r3, [r7, #22]
 8006578:	04d9      	lsls	r1, r3, #19
 800657a:	4b38      	ldr	r3, [pc, #224]	@ (800665c <USB_EPStartXfer+0x52c>)
 800657c:	400b      	ands	r3, r1
 800657e:	69b9      	ldr	r1, [r7, #24]
 8006580:	0148      	lsls	r0, r1, #5
 8006582:	69f9      	ldr	r1, [r7, #28]
 8006584:	4401      	add	r1, r0
 8006586:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800658a:	4313      	orrs	r3, r2
 800658c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a4:	69b9      	ldr	r1, [r7, #24]
 80065a6:	0148      	lsls	r0, r1, #5
 80065a8:	69f9      	ldr	r1, [r7, #28]
 80065aa:	4401      	add	r1, r0
 80065ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065b0:	4313      	orrs	r3, r2
 80065b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10d      	bne.n	80065d6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	68d9      	ldr	r1, [r3, #12]
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	460a      	mov	r2, r1
 80065d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	791b      	ldrb	r3, [r3, #4]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d128      	bne.n	8006630 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d110      	bne.n	8006610 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006608:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e00f      	b.n	8006630 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800662a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800662e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800664a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800664e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	1ff80000 	.word	0x1ff80000

08006660 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d14a      	bne.n	8006714 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006696:	f040 8086 	bne.w	80067a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d902      	bls.n	80066f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
          break;
 80066f6:	e056      	b.n	80067a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800670c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006710:	d0e7      	beq.n	80066e2 <USB_EPStopXfer+0x82>
 8006712:	e048      	b.n	80067a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800672c:	d13b      	bne.n	80067a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	440a      	add	r2, r1
 8006748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006750:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	440a      	add	r2, r1
 800676c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006770:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006774:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006782:	4293      	cmp	r3, r2
 8006784:	d902      	bls.n	800678c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
          break;
 800678a:	e00c      	b.n	80067a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a4:	d0e7      	beq.n	8006776 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	@ 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4611      	mov	r1, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	460b      	mov	r3, r1
 80067c4:	71fb      	strb	r3, [r7, #7]
 80067c6:	4613      	mov	r3, r2
 80067c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d123      	bne.n	8006822 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067da:	88bb      	ldrh	r3, [r7, #4]
 80067dc:	3303      	adds	r3, #3
 80067de:	089b      	lsrs	r3, r3, #2
 80067e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e018      	b.n	800681a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	031a      	lsls	r2, r3, #12
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f4:	461a      	mov	r2, r3
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	3301      	adds	r3, #1
 8006806:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	3301      	adds	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3301      	adds	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	3301      	adds	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	d3e2      	bcc.n	80067e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3724      	adds	r7, #36	@ 0x24
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006830:	b480      	push	{r7}
 8006832:	b08b      	sub	sp, #44	@ 0x2c
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	089b      	lsrs	r3, r3, #2
 800684a:	b29b      	uxth	r3, r3
 800684c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006856:	2300      	movs	r3, #0
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	e014      	b.n	8006886 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	601a      	str	r2, [r3, #0]
    pDest++;
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	3301      	adds	r3, #1
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	3301      	adds	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	3301      	adds	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	3301      	adds	r3, #1
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	3301      	adds	r3, #1
 8006884:	623b      	str	r3, [r7, #32]
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d3e6      	bcc.n	800685c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01e      	beq.n	80068d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689e:	461a      	mov	r2, r3
 80068a0:	f107 0310 	add.w	r3, r7, #16
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	701a      	strb	r2, [r3, #0]
      i++;
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	3301      	adds	r3, #1
 80068be:	623b      	str	r3, [r7, #32]
      pDest++;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80068c6:	8bfb      	ldrh	r3, [r7, #30]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068cc:	8bfb      	ldrh	r3, [r7, #30]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1ea      	bne.n	80068a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	372c      	adds	r7, #44	@ 0x2c
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d12c      	bne.n	8006956 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	db12      	blt.n	8006934 <USB_EPSetStall+0x54>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800692e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006932:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800694e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e02b      	b.n	80069ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	db12      	blt.n	800698e <USB_EPSetStall+0xae>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00f      	beq.n	800698e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006988:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800698c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d128      	bne.n	8006a2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	791b      	ldrb	r3, [r3, #4]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d003      	beq.n	8006a08 <USB_EPClearStall+0x4c>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	791b      	ldrb	r3, [r3, #4]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d138      	bne.n	8006a7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e027      	b.n	8006a7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	791b      	ldrb	r3, [r3, #4]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d003      	beq.n	8006a5a <USB_EPClearStall+0x9e>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	791b      	ldrb	r3, [r3, #4]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d10f      	bne.n	8006a7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aa6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006aaa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b02:	f023 0302 	bic.w	r3, r3, #2
 8006b06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b30:	f023 0303 	bic.w	r3, r3, #3
 8006b34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b70:	68fb      	ldr	r3, [r7, #12]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	0c1b      	lsrs	r3, r3, #16
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	b29b      	uxth	r3, r3
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4013      	ands	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c14:	68bb      	ldr	r3, [r7, #8]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c46:	78fb      	ldrb	r3, [r7, #3]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c52:	01db      	lsls	r3, r3, #7
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c70:	68bb      	ldr	r3, [r7, #8]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006cb8:	f023 0307 	bic.w	r3, r3, #7
 8006cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	333c      	adds	r3, #60	@ 0x3c
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4a26      	ldr	r2, [pc, #152]	@ (8006d98 <USB_EP0_OutStart+0xb8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d90a      	bls.n	8006d1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d14:	d101      	bne.n	8006d1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e037      	b.n	8006d8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d20:	461a      	mov	r2, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d48:	f043 0318 	orr.w	r3, r3, #24
 8006d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006d60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10f      	bne.n	8006d88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	4f54300a 	.word	0x4f54300a

08006d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006db4:	d901      	bls.n	8006dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e01b      	b.n	8006df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	daf2      	bge.n	8006da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f043 0201 	orr.w	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dde:	d901      	bls.n	8006de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d0f0      	beq.n	8006dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e10:	f002 fc88 	bl	8009724 <USBD_static_malloc>
 8006e14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32b0      	adds	r2, #176	@ 0xb0
 8006e26:	2100      	movs	r1, #0
 8006e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e0d4      	b.n	8006fda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006e34:	2100      	movs	r1, #0
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f003 faeb 	bl	800a412 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32b0      	adds	r2, #176	@ 0xb0
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32b0      	adds	r2, #176	@ 0xb0
 8006e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7c1b      	ldrb	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d138      	bne.n	8006eda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e68:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe4 <USBD_CDC_Init+0x1e4>)
 8006e6a:	7819      	ldrb	r1, [r3, #0]
 8006e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e70:	2202      	movs	r2, #2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 fb33 	bl	80094de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e78:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe4 <USBD_CDC_Init+0x1e4>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	3324      	adds	r3, #36	@ 0x24
 8006e8e:	2201      	movs	r2, #1
 8006e90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e92:	4b55      	ldr	r3, [pc, #340]	@ (8006fe8 <USBD_CDC_Init+0x1e8>)
 8006e94:	7819      	ldrb	r1, [r3, #0]
 8006e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f002 fb1e 	bl	80094de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ea2:	4b51      	ldr	r3, [pc, #324]	@ (8006fe8 <USBD_CDC_Init+0x1e8>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	f003 020f 	and.w	r2, r3, #15
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006eba:	2201      	movs	r2, #1
 8006ebc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8006fec <USBD_CDC_Init+0x1ec>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 020f 	and.w	r2, r3, #15
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	3326      	adds	r3, #38	@ 0x26
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	e035      	b.n	8006f46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006eda:	4b42      	ldr	r3, [pc, #264]	@ (8006fe4 <USBD_CDC_Init+0x1e4>)
 8006edc:	7819      	ldrb	r1, [r3, #0]
 8006ede:	2340      	movs	r3, #64	@ 0x40
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f002 fafb 	bl	80094de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8006fe4 <USBD_CDC_Init+0x1e4>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f003 020f 	and.w	r2, r3, #15
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	3324      	adds	r3, #36	@ 0x24
 8006efe:	2201      	movs	r2, #1
 8006f00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f02:	4b39      	ldr	r3, [pc, #228]	@ (8006fe8 <USBD_CDC_Init+0x1e8>)
 8006f04:	7819      	ldrb	r1, [r3, #0]
 8006f06:	2340      	movs	r3, #64	@ 0x40
 8006f08:	2202      	movs	r2, #2
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 fae7 	bl	80094de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f10:	4b35      	ldr	r3, [pc, #212]	@ (8006fe8 <USBD_CDC_Init+0x1e8>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f003 020f 	and.w	r2, r3, #15
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f28:	2201      	movs	r2, #1
 8006f2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006fec <USBD_CDC_Init+0x1ec>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	3326      	adds	r3, #38	@ 0x26
 8006f42:	2210      	movs	r2, #16
 8006f44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f46:	4b29      	ldr	r3, [pc, #164]	@ (8006fec <USBD_CDC_Init+0x1ec>)
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f002 fac5 	bl	80094de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f54:	4b25      	ldr	r3, [pc, #148]	@ (8006fec <USBD_CDC_Init+0x1ec>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3324      	adds	r3, #36	@ 0x24
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	33b0      	adds	r3, #176	@ 0xb0
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e018      	b.n	8006fda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	7c1b      	ldrb	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <USBD_CDC_Init+0x1e8>)
 8006fb2:	7819      	ldrb	r1, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f002 fb7c 	bl	80096bc <USBD_LL_PrepareReceive>
 8006fc4:	e008      	b.n	8006fd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fc6:	4b08      	ldr	r3, [pc, #32]	@ (8006fe8 <USBD_CDC_Init+0x1e8>)
 8006fc8:	7819      	ldrb	r1, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fd0:	2340      	movs	r3, #64	@ 0x40
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f002 fb72 	bl	80096bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000009f 	.word	0x2000009f
 8006fe8:	200000a0 	.word	0x200000a0
 8006fec:	200000a1 	.word	0x200000a1

08006ff0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80070e8 <USBD_CDC_DeInit+0xf8>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f002 fa91 	bl	800952a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007008:	4b37      	ldr	r3, [pc, #220]	@ (80070e8 <USBD_CDC_DeInit+0xf8>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3324      	adds	r3, #36	@ 0x24
 800701e:	2200      	movs	r2, #0
 8007020:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007022:	4b32      	ldr	r3, [pc, #200]	@ (80070ec <USBD_CDC_DeInit+0xfc>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f002 fa7e 	bl	800952a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800702e:	4b2f      	ldr	r3, [pc, #188]	@ (80070ec <USBD_CDC_DeInit+0xfc>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007046:	2200      	movs	r2, #0
 8007048:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800704a:	4b29      	ldr	r3, [pc, #164]	@ (80070f0 <USBD_CDC_DeInit+0x100>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f002 fa6a 	bl	800952a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007056:	4b26      	ldr	r3, [pc, #152]	@ (80070f0 <USBD_CDC_DeInit+0x100>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	f003 020f 	and.w	r2, r3, #15
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	3324      	adds	r3, #36	@ 0x24
 800706c:	2200      	movs	r2, #0
 800706e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007070:	4b1f      	ldr	r3, [pc, #124]	@ (80070f0 <USBD_CDC_DeInit+0x100>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3326      	adds	r3, #38	@ 0x26
 8007086:	2200      	movs	r2, #0
 8007088:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	32b0      	adds	r2, #176	@ 0xb0
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01f      	beq.n	80070dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	33b0      	adds	r3, #176	@ 0xb0
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	32b0      	adds	r2, #176	@ 0xb0
 80070ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070be:	4618      	mov	r0, r3
 80070c0:	f002 fb3e 	bl	8009740 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	32b0      	adds	r2, #176	@ 0xb0
 80070ce:	2100      	movs	r1, #0
 80070d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	2000009f 	.word	0x2000009f
 80070ec:	200000a0 	.word	0x200000a0
 80070f0:	200000a1 	.word	0x200000a1

080070f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	32b0      	adds	r2, #176	@ 0xb0
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e0bf      	b.n	80072a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800712c:	2b00      	cmp	r3, #0
 800712e:	d050      	beq.n	80071d2 <USBD_CDC_Setup+0xde>
 8007130:	2b20      	cmp	r3, #32
 8007132:	f040 80af 	bne.w	8007294 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	88db      	ldrh	r3, [r3, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d03a      	beq.n	80071b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b25b      	sxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	da1b      	bge.n	8007180 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	33b0      	adds	r3, #176	@ 0xb0
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800715e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	88d2      	ldrh	r2, [r2, #6]
 8007164:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b07      	cmp	r3, #7
 800716c:	bf28      	it	cs
 800716e:	2307      	movcs	r3, #7
 8007170:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	89fa      	ldrh	r2, [r7, #14]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fd87 	bl	8008c8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800717e:	e090      	b.n	80072a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	785a      	ldrb	r2, [r3, #1]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	88db      	ldrh	r3, [r3, #6]
 800718e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007190:	d803      	bhi.n	800719a <USBD_CDC_Setup+0xa6>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	e000      	b.n	800719c <USBD_CDC_Setup+0xa8>
 800719a:	2240      	movs	r2, #64	@ 0x40
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071a2:	6939      	ldr	r1, [r7, #16]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80071aa:	461a      	mov	r2, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fd99 	bl	8008ce4 <USBD_CtlPrepareRx>
      break;
 80071b2:	e076      	b.n	80072a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	33b0      	adds	r3, #176	@ 0xb0
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	7850      	ldrb	r0, [r2, #1]
 80071ca:	2200      	movs	r2, #0
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	4798      	blx	r3
      break;
 80071d0:	e067      	b.n	80072a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b0b      	cmp	r3, #11
 80071d8:	d851      	bhi.n	800727e <USBD_CDC_Setup+0x18a>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <USBD_CDC_Setup+0xec>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007211 	.word	0x08007211
 80071e4:	0800728d 	.word	0x0800728d
 80071e8:	0800727f 	.word	0x0800727f
 80071ec:	0800727f 	.word	0x0800727f
 80071f0:	0800727f 	.word	0x0800727f
 80071f4:	0800727f 	.word	0x0800727f
 80071f8:	0800727f 	.word	0x0800727f
 80071fc:	0800727f 	.word	0x0800727f
 8007200:	0800727f 	.word	0x0800727f
 8007204:	0800727f 	.word	0x0800727f
 8007208:	0800723b 	.word	0x0800723b
 800720c:	08007265 	.word	0x08007265
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b03      	cmp	r3, #3
 800721a:	d107      	bne.n	800722c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800721c:	f107 030a 	add.w	r3, r7, #10
 8007220:	2202      	movs	r2, #2
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 fd31 	bl	8008c8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800722a:	e032      	b.n	8007292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fcbb 	bl	8008baa <USBD_CtlError>
            ret = USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	75fb      	strb	r3, [r7, #23]
          break;
 8007238:	e02b      	b.n	8007292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d107      	bne.n	8007256 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007246:	f107 030d 	add.w	r3, r7, #13
 800724a:	2201      	movs	r2, #1
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fd1c 	bl	8008c8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007254:	e01d      	b.n	8007292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fca6 	bl	8008baa <USBD_CtlError>
            ret = USBD_FAIL;
 800725e:	2303      	movs	r3, #3
 8007260:	75fb      	strb	r3, [r7, #23]
          break;
 8007262:	e016      	b.n	8007292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d00f      	beq.n	8007290 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fc99 	bl	8008baa <USBD_CtlError>
            ret = USBD_FAIL;
 8007278:	2303      	movs	r3, #3
 800727a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800727c:	e008      	b.n	8007290 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fc92 	bl	8008baa <USBD_CtlError>
          ret = USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	75fb      	strb	r3, [r7, #23]
          break;
 800728a:	e002      	b.n	8007292 <USBD_CDC_Setup+0x19e>
          break;
 800728c:	bf00      	nop
 800728e:	e008      	b.n	80072a2 <USBD_CDC_Setup+0x1ae>
          break;
 8007290:	bf00      	nop
      }
      break;
 8007292:	e006      	b.n	80072a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 fc87 	bl	8008baa <USBD_CtlError>
      ret = USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	75fb      	strb	r3, [r7, #23]
      break;
 80072a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32b0      	adds	r2, #176	@ 0xb0
 80072ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e065      	b.n	80073a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32b0      	adds	r2, #176	@ 0xb0
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	3318      	adds	r3, #24
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d02f      	beq.n	8007360 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	f003 020f 	and.w	r2, r3, #15
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	3318      	adds	r3, #24
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	f003 010f 	and.w	r1, r3, #15
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	460b      	mov	r3, r1
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	440b      	add	r3, r1
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4403      	add	r3, r0
 8007328:	331c      	adds	r3, #28
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007336:	2b00      	cmp	r3, #0
 8007338:	d112      	bne.n	8007360 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3318      	adds	r3, #24
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007352:	78f9      	ldrb	r1, [r7, #3]
 8007354:	2300      	movs	r3, #0
 8007356:	2200      	movs	r2, #0
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f002 f98e 	bl	800967a <USBD_LL_Transmit>
 800735e:	e01f      	b.n	80073a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	33b0      	adds	r3, #176	@ 0xb0
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	33b0      	adds	r3, #176	@ 0xb0
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	32b0      	adds	r2, #176	@ 0xb0
 80073c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	32b0      	adds	r2, #176	@ 0xb0
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	e01a      	b.n	8007412 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 f98c 	bl	80096fe <USBD_LL_GetRxDataSize>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	33b0      	adds	r3, #176	@ 0xb0
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800740c:	4611      	mov	r1, r2
 800740e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32b0      	adds	r2, #176	@ 0xb0
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007438:	2303      	movs	r3, #3
 800743a:	e024      	b.n	8007486 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	33b0      	adds	r3, #176	@ 0xb0
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d019      	beq.n	8007484 <USBD_CDC_EP0_RxReady+0x6a>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007456:	2bff      	cmp	r3, #255	@ 0xff
 8007458:	d014      	beq.n	8007484 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	33b0      	adds	r3, #176	@ 0xb0
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007472:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800747a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	22ff      	movs	r2, #255	@ 0xff
 8007480:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007498:	2182      	movs	r1, #130	@ 0x82
 800749a:	4818      	ldr	r0, [pc, #96]	@ (80074fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800749c:	f000 fd4f 	bl	8007f3e <USBD_GetEpDesc>
 80074a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074a2:	2101      	movs	r1, #1
 80074a4:	4815      	ldr	r0, [pc, #84]	@ (80074fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074a6:	f000 fd4a 	bl	8007f3e <USBD_GetEpDesc>
 80074aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074ac:	2181      	movs	r1, #129	@ 0x81
 80074ae:	4813      	ldr	r0, [pc, #76]	@ (80074fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074b0:	f000 fd45 	bl	8007f3e <USBD_GetEpDesc>
 80074b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2210      	movs	r2, #16
 80074c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074d0:	711a      	strb	r2, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d006      	beq.n	80074ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074e4:	711a      	strb	r2, [r3, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2243      	movs	r2, #67	@ 0x43
 80074ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	2000005c 	.word	0x2000005c

08007500 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007508:	2182      	movs	r1, #130	@ 0x82
 800750a:	4818      	ldr	r0, [pc, #96]	@ (800756c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800750c:	f000 fd17 	bl	8007f3e <USBD_GetEpDesc>
 8007510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007512:	2101      	movs	r1, #1
 8007514:	4815      	ldr	r0, [pc, #84]	@ (800756c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007516:	f000 fd12 	bl	8007f3e <USBD_GetEpDesc>
 800751a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800751c:	2181      	movs	r1, #129	@ 0x81
 800751e:	4813      	ldr	r0, [pc, #76]	@ (800756c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007520:	f000 fd0d 	bl	8007f3e <USBD_GetEpDesc>
 8007524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2210      	movs	r2, #16
 8007530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d006      	beq.n	8007546 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2200      	movs	r2, #0
 800753c:	711a      	strb	r2, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f042 0202 	orr.w	r2, r2, #2
 8007544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d006      	beq.n	800755a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	711a      	strb	r2, [r3, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f042 0202 	orr.w	r2, r2, #2
 8007558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2243      	movs	r2, #67	@ 0x43
 800755e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007560:	4b02      	ldr	r3, [pc, #8]	@ (800756c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	2000005c 	.word	0x2000005c

08007570 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007578:	2182      	movs	r1, #130	@ 0x82
 800757a:	4818      	ldr	r0, [pc, #96]	@ (80075dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800757c:	f000 fcdf 	bl	8007f3e <USBD_GetEpDesc>
 8007580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007582:	2101      	movs	r1, #1
 8007584:	4815      	ldr	r0, [pc, #84]	@ (80075dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007586:	f000 fcda 	bl	8007f3e <USBD_GetEpDesc>
 800758a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800758c:	2181      	movs	r1, #129	@ 0x81
 800758e:	4813      	ldr	r0, [pc, #76]	@ (80075dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007590:	f000 fcd5 	bl	8007f3e <USBD_GetEpDesc>
 8007594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2210      	movs	r2, #16
 80075a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075b0:	711a      	strb	r2, [r3, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d006      	beq.n	80075ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075c4:	711a      	strb	r2, [r3, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2243      	movs	r2, #67	@ 0x43
 80075ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075d0:	4b02      	ldr	r3, [pc, #8]	@ (80075dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	2000005c 	.word	0x2000005c

080075e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	220a      	movs	r2, #10
 80075ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075ee:	4b03      	ldr	r3, [pc, #12]	@ (80075fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20000018 	.word	0x20000018

08007600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	e009      	b.n	8007628 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	33b0      	adds	r3, #176	@ 0xb0
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	32b0      	adds	r2, #176	@ 0xb0
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007656:	2303      	movs	r3, #3
 8007658:	e008      	b.n	800766c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	32b0      	adds	r2, #176	@ 0xb0
 800768c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007698:	2303      	movs	r3, #3
 800769a:	e004      	b.n	80076a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	32b0      	adds	r2, #176	@ 0xb0
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e025      	b.n	8007726 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d11f      	bne.n	8007724 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076ec:	4b10      	ldr	r3, [pc, #64]	@ (8007730 <USBD_CDC_TransmitPacket+0x7c>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4403      	add	r3, r0
 8007706:	3318      	adds	r3, #24
 8007708:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800770a:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <USBD_CDC_TransmitPacket+0x7c>)
 800770c:	7819      	ldrb	r1, [r3, #0]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 ffad 	bl	800967a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000009f 	.word	0x2000009f

08007734 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	32b0      	adds	r2, #176	@ 0xb0
 8007746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32b0      	adds	r2, #176	@ 0xb0
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	e018      	b.n	8007794 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7c1b      	ldrb	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800776a:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <USBD_CDC_ReceivePacket+0x68>)
 800776c:	7819      	ldrb	r1, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 ff9f 	bl	80096bc <USBD_LL_PrepareReceive>
 800777e:	e008      	b.n	8007792 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007780:	4b06      	ldr	r3, [pc, #24]	@ (800779c <USBD_CDC_ReceivePacket+0x68>)
 8007782:	7819      	ldrb	r1, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800778a:	2340      	movs	r3, #64	@ 0x40
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 ff95 	bl	80096bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	200000a0 	.word	0x200000a0

080077a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e01f      	b.n	80077f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	79fa      	ldrb	r2, [r7, #7]
 80077ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f001 fe0f 	bl	8009410 <USBD_LL_Init>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	e025      	b.n	8007864 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	32ae      	adds	r2, #174	@ 0xae
 800782a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00f      	beq.n	8007854 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32ae      	adds	r2, #174	@ 0xae
 800783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	f107 020e 	add.w	r2, r7, #14
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	4602      	mov	r2, r0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fe17 	bl	80094a8 <USBD_LL_Start>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	4611      	mov	r1, r2
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4611      	mov	r1, r2
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f90c 	bl	8008b36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	2b02      	cmp	r3, #2
 8007940:	d01a      	beq.n	8007978 <USBD_LL_SetupStage+0x72>
 8007942:	2b02      	cmp	r3, #2
 8007944:	d822      	bhi.n	800798c <USBD_LL_SetupStage+0x86>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <USBD_LL_SetupStage+0x4a>
 800794a:	2b01      	cmp	r3, #1
 800794c:	d00a      	beq.n	8007964 <USBD_LL_SetupStage+0x5e>
 800794e:	e01d      	b.n	800798c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb63 	bl	8008024 <USBD_StdDevReq>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]
      break;
 8007962:	e020      	b.n	80079a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fbcb 	bl	8008108 <USBD_StdItfReq>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
      break;
 8007976:	e016      	b.n	80079a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc2d 	bl	80081e0 <USBD_StdEPReq>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
      break;
 800798a:	e00c      	b.n	80079a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007992:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fde4 	bl	8009568 <USBD_LL_StallEP>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
      break;
 80079a4:	bf00      	nop
  }

  return ret;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	460b      	mov	r3, r1
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d16e      	bne.n	8007aa6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80079ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	f040 8098 	bne.w	8007b0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d913      	bls.n	8007a10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	1ad2      	subs	r2, r2, r3
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bf28      	it	cs
 8007a02:	4613      	movcs	r3, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f001 f988 	bl	8008d1e <USBD_CtlContinueRx>
 8007a0e:	e07d      	b.n	8007b0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d014      	beq.n	8007a48 <USBD_LL_DataOutStage+0x98>
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d81d      	bhi.n	8007a5e <USBD_LL_DataOutStage+0xae>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <USBD_LL_DataOutStage+0x7c>
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d003      	beq.n	8007a32 <USBD_LL_DataOutStage+0x82>
 8007a2a:	e018      	b.n	8007a5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a30:	e018      	b.n	8007a64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fa64 	bl	8007f0a <USBD_CoreFindIF>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75bb      	strb	r3, [r7, #22]
            break;
 8007a46:	e00d      	b.n	8007a64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fa66 	bl	8007f24 <USBD_CoreFindEP>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a5c:	e002      	b.n	8007a64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75bb      	strb	r3, [r7, #22]
            break;
 8007a62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a64:	7dbb      	ldrb	r3, [r7, #22]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d119      	bne.n	8007a9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d113      	bne.n	8007a9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a76:	7dba      	ldrb	r2, [r7, #22]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	32ae      	adds	r2, #174	@ 0xae
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a86:	7dba      	ldrb	r2, [r7, #22]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a8e:	7dba      	ldrb	r2, [r7, #22]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	32ae      	adds	r2, #174	@ 0xae
 8007a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f001 f94e 	bl	8008d40 <USBD_CtlSendStatus>
 8007aa4:	e032      	b.n	8007b0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	4619      	mov	r1, r3
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fa37 	bl	8007f24 <USBD_CoreFindEP>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aba:	7dbb      	ldrb	r3, [r7, #22]
 8007abc:	2bff      	cmp	r3, #255	@ 0xff
 8007abe:	d025      	beq.n	8007b0c <USBD_LL_DataOutStage+0x15c>
 8007ac0:	7dbb      	ldrb	r3, [r7, #22]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d122      	bne.n	8007b0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d117      	bne.n	8007b02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ad2:	7dba      	ldrb	r2, [r7, #22]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	32ae      	adds	r2, #174	@ 0xae
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00f      	beq.n	8007b02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ae2:	7dba      	ldrb	r2, [r7, #22]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007aea:	7dba      	ldrb	r2, [r7, #22]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	32ae      	adds	r2, #174	@ 0xae
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	7afa      	ldrb	r2, [r7, #11]
 8007af8:	4611      	mov	r1, r2
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	e000      	b.n	8007b0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b086      	sub	sp, #24
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	607a      	str	r2, [r7, #4]
 8007b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d16f      	bne.n	8007c0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d15a      	bne.n	8007bf0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d914      	bls.n	8007b70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f001 f8b0 	bl	8008cc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b62:	2300      	movs	r3, #0
 8007b64:	2200      	movs	r2, #0
 8007b66:	2100      	movs	r1, #0
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f001 fda7 	bl	80096bc <USBD_LL_PrepareReceive>
 8007b6e:	e03f      	b.n	8007bf0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d11c      	bne.n	8007bb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d316      	bcc.n	8007bb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d20f      	bcs.n	8007bb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f001 f891 	bl	8008cc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	2100      	movs	r1, #0
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f001 fd84 	bl	80096bc <USBD_LL_PrepareReceive>
 8007bb4:	e01c      	b.n	8007bf0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d10f      	bne.n	8007be2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f001 fcbf 	bl	8009568 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f001 f8bb 	bl	8008d66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d03a      	beq.n	8007c70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff fe42 	bl	8007884 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c08:	e032      	b.n	8007c70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f985 	bl	8007f24 <USBD_CoreFindEP>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2bff      	cmp	r3, #255	@ 0xff
 8007c22:	d025      	beq.n	8007c70 <USBD_LL_DataInStage+0x15a>
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d122      	bne.n	8007c70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d11c      	bne.n	8007c70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c36:	7dfa      	ldrb	r2, [r7, #23]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	32ae      	adds	r2, #174	@ 0xae
 8007c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d014      	beq.n	8007c70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c46:	7dfa      	ldrb	r2, [r7, #23]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c4e:	7dfa      	ldrb	r2, [r7, #23]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	32ae      	adds	r2, #174	@ 0xae
 8007c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	7afa      	ldrb	r2, [r7, #11]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c66:	7dbb      	ldrb	r3, [r7, #22]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c6c:	7dbb      	ldrb	r3, [r7, #22]
 8007c6e:	e000      	b.n	8007c72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d014      	beq.n	8007ce0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6852      	ldr	r2, [r2, #4]
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ce0:	2340      	movs	r3, #64	@ 0x40
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fbf9 	bl	80094de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2240      	movs	r2, #64	@ 0x40
 8007cf8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cfc:	2340      	movs	r3, #64	@ 0x40
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2180      	movs	r1, #128	@ 0x80
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fbeb 	bl	80094de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2240      	movs	r2, #64	@ 0x40
 8007d12:	621a      	str	r2, [r3, #32]

  return ret;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	78fa      	ldrb	r2, [r7, #3]
 8007d2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d006      	beq.n	8007d60 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2204      	movs	r2, #4
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d106      	bne.n	8007d98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d110      	bne.n	8007ddc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	460b      	mov	r3, r1
 8007df0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	32ae      	adds	r2, #174	@ 0xae
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e01c      	b.n	8007e42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d115      	bne.n	8007e40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	@ 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32ae      	adds	r2, #174	@ 0xae
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	32ae      	adds	r2, #174	@ 0xae
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e01c      	b.n	8007ea6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d115      	bne.n	8007ea4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	32ae      	adds	r2, #174	@ 0xae
 8007e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	32ae      	adds	r2, #174	@ 0xae
 8007e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00e      	beq.n	8007f00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6852      	ldr	r2, [r2, #4]
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b086      	sub	sp, #24
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d91f      	bls.n	8007fa4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f6a:	e013      	b.n	8007f94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f6c:	f107 030a 	add.w	r3, r7, #10
 8007f70:	4619      	mov	r1, r3
 8007f72:	6978      	ldr	r0, [r7, #20]
 8007f74:	f000 f81b 	bl	8007fae <USBD_GetNextDesc>
 8007f78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d108      	bne.n	8007f94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	789b      	ldrb	r3, [r3, #2]
 8007f8a:	78fa      	ldrb	r2, [r7, #3]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d008      	beq.n	8007fa2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	885b      	ldrh	r3, [r3, #2]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	897b      	ldrh	r3, [r7, #10]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d8e5      	bhi.n	8007f6c <USBD_GetEpDesc+0x2e>
 8007fa0:	e000      	b.n	8007fa4 <USBD_GetEpDesc+0x66>
          break;
 8007fa2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fa4:	693b      	ldr	r3, [r7, #16]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b087      	sub	sp, #28
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008004:	8a3b      	ldrh	r3, [r7, #16]
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	b21a      	sxth	r2, r3
 800800a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800800e:	4313      	orrs	r3, r2
 8008010:	b21b      	sxth	r3, r3
 8008012:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008014:	89fb      	ldrh	r3, [r7, #14]
}
 8008016:	4618      	mov	r0, r3
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800803a:	2b40      	cmp	r3, #64	@ 0x40
 800803c:	d005      	beq.n	800804a <USBD_StdDevReq+0x26>
 800803e:	2b40      	cmp	r3, #64	@ 0x40
 8008040:	d857      	bhi.n	80080f2 <USBD_StdDevReq+0xce>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00f      	beq.n	8008066 <USBD_StdDevReq+0x42>
 8008046:	2b20      	cmp	r3, #32
 8008048:	d153      	bne.n	80080f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	32ae      	adds	r2, #174	@ 0xae
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	4798      	blx	r3
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
      break;
 8008064:	e04a      	b.n	80080fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	785b      	ldrb	r3, [r3, #1]
 800806a:	2b09      	cmp	r3, #9
 800806c:	d83b      	bhi.n	80080e6 <USBD_StdDevReq+0xc2>
 800806e:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <USBD_StdDevReq+0x50>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	080080c9 	.word	0x080080c9
 8008078:	080080dd 	.word	0x080080dd
 800807c:	080080e7 	.word	0x080080e7
 8008080:	080080d3 	.word	0x080080d3
 8008084:	080080e7 	.word	0x080080e7
 8008088:	080080a7 	.word	0x080080a7
 800808c:	0800809d 	.word	0x0800809d
 8008090:	080080e7 	.word	0x080080e7
 8008094:	080080bf 	.word	0x080080bf
 8008098:	080080b1 	.word	0x080080b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa3c 	bl	800851c <USBD_GetDescriptor>
          break;
 80080a4:	e024      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fba1 	bl	80087f0 <USBD_SetAddress>
          break;
 80080ae:	e01f      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fbe0 	bl	8008878 <USBD_SetConfig>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
          break;
 80080bc:	e018      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc83 	bl	80089cc <USBD_GetConfig>
          break;
 80080c6:	e013      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fcb4 	bl	8008a38 <USBD_GetStatus>
          break;
 80080d0:	e00e      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fce3 	bl	8008aa0 <USBD_SetFeature>
          break;
 80080da:	e009      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fd07 	bl	8008af2 <USBD_ClrFeature>
          break;
 80080e4:	e004      	b.n	80080f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fd5e 	bl	8008baa <USBD_CtlError>
          break;
 80080ee:	bf00      	nop
      }
      break;
 80080f0:	e004      	b.n	80080fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fd58 	bl	8008baa <USBD_CtlError>
      break;
 80080fa:	bf00      	nop
  }

  return ret;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop

08008108 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800811e:	2b40      	cmp	r3, #64	@ 0x40
 8008120:	d005      	beq.n	800812e <USBD_StdItfReq+0x26>
 8008122:	2b40      	cmp	r3, #64	@ 0x40
 8008124:	d852      	bhi.n	80081cc <USBD_StdItfReq+0xc4>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <USBD_StdItfReq+0x26>
 800812a:	2b20      	cmp	r3, #32
 800812c:	d14e      	bne.n	80081cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008134:	b2db      	uxtb	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	2b02      	cmp	r3, #2
 800813a:	d840      	bhi.n	80081be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	889b      	ldrh	r3, [r3, #4]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b01      	cmp	r3, #1
 8008144:	d836      	bhi.n	80081b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	889b      	ldrh	r3, [r3, #4]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff fedb 	bl	8007f0a <USBD_CoreFindIF>
 8008154:	4603      	mov	r3, r0
 8008156:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2bff      	cmp	r3, #255	@ 0xff
 800815c:	d01d      	beq.n	800819a <USBD_StdItfReq+0x92>
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11a      	bne.n	800819a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008164:	7bba      	ldrb	r2, [r7, #14]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	32ae      	adds	r2, #174	@ 0xae
 800816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00f      	beq.n	8008194 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008174:	7bba      	ldrb	r2, [r7, #14]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800817c:	7bba      	ldrb	r2, [r7, #14]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32ae      	adds	r2, #174	@ 0xae
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008192:	e004      	b.n	800819e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008198:	e001      	b.n	800819e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800819a:	2303      	movs	r3, #3
 800819c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d110      	bne.n	80081c8 <USBD_StdItfReq+0xc0>
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10d      	bne.n	80081c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fdc7 	bl	8008d40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081b2:	e009      	b.n	80081c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fcf7 	bl	8008baa <USBD_CtlError>
          break;
 80081bc:	e004      	b.n	80081c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fcf2 	bl	8008baa <USBD_CtlError>
          break;
 80081c6:	e000      	b.n	80081ca <USBD_StdItfReq+0xc2>
          break;
 80081c8:	bf00      	nop
      }
      break;
 80081ca:	e004      	b.n	80081d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fceb 	bl	8008baa <USBD_CtlError>
      break;
 80081d4:	bf00      	nop
  }

  return ret;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	889b      	ldrh	r3, [r3, #4]
 80081f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081fc:	2b40      	cmp	r3, #64	@ 0x40
 80081fe:	d007      	beq.n	8008210 <USBD_StdEPReq+0x30>
 8008200:	2b40      	cmp	r3, #64	@ 0x40
 8008202:	f200 817f 	bhi.w	8008504 <USBD_StdEPReq+0x324>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d02a      	beq.n	8008260 <USBD_StdEPReq+0x80>
 800820a:	2b20      	cmp	r3, #32
 800820c:	f040 817a 	bne.w	8008504 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff fe85 	bl	8007f24 <USBD_CoreFindEP>
 800821a:	4603      	mov	r3, r0
 800821c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800821e:	7b7b      	ldrb	r3, [r7, #13]
 8008220:	2bff      	cmp	r3, #255	@ 0xff
 8008222:	f000 8174 	beq.w	800850e <USBD_StdEPReq+0x32e>
 8008226:	7b7b      	ldrb	r3, [r7, #13]
 8008228:	2b00      	cmp	r3, #0
 800822a:	f040 8170 	bne.w	800850e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800822e:	7b7a      	ldrb	r2, [r7, #13]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008236:	7b7a      	ldrb	r2, [r7, #13]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	32ae      	adds	r2, #174	@ 0xae
 800823c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8163 	beq.w	800850e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008248:	7b7a      	ldrb	r2, [r7, #13]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32ae      	adds	r2, #174	@ 0xae
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800825e:	e156      	b.n	800850e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d008      	beq.n	800827a <USBD_StdEPReq+0x9a>
 8008268:	2b03      	cmp	r3, #3
 800826a:	f300 8145 	bgt.w	80084f8 <USBD_StdEPReq+0x318>
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 809b 	beq.w	80083aa <USBD_StdEPReq+0x1ca>
 8008274:	2b01      	cmp	r3, #1
 8008276:	d03c      	beq.n	80082f2 <USBD_StdEPReq+0x112>
 8008278:	e13e      	b.n	80084f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d002      	beq.n	800828c <USBD_StdEPReq+0xac>
 8008286:	2b03      	cmp	r3, #3
 8008288:	d016      	beq.n	80082b8 <USBD_StdEPReq+0xd8>
 800828a:	e02c      	b.n	80082e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <USBD_StdEPReq+0xce>
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b80      	cmp	r3, #128	@ 0x80
 8008296:	d00a      	beq.n	80082ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f963 	bl	8009568 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082a2:	2180      	movs	r1, #128	@ 0x80
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f95f 	bl	8009568 <USBD_LL_StallEP>
 80082aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082ac:	e020      	b.n	80082f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fc7a 	bl	8008baa <USBD_CtlError>
              break;
 80082b6:	e01b      	b.n	80082f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	885b      	ldrh	r3, [r3, #2]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10e      	bne.n	80082de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00b      	beq.n	80082de <USBD_StdEPReq+0xfe>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b80      	cmp	r3, #128	@ 0x80
 80082ca:	d008      	beq.n	80082de <USBD_StdEPReq+0xfe>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88db      	ldrh	r3, [r3, #6]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f945 	bl	8009568 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fd2e 	bl	8008d40 <USBD_CtlSendStatus>

              break;
 80082e4:	e004      	b.n	80082f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fc5e 	bl	8008baa <USBD_CtlError>
              break;
 80082ee:	bf00      	nop
          }
          break;
 80082f0:	e107      	b.n	8008502 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d002      	beq.n	8008304 <USBD_StdEPReq+0x124>
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d016      	beq.n	8008330 <USBD_StdEPReq+0x150>
 8008302:	e04b      	b.n	800839c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00d      	beq.n	8008326 <USBD_StdEPReq+0x146>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b80      	cmp	r3, #128	@ 0x80
 800830e:	d00a      	beq.n	8008326 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f927 	bl	8009568 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800831a:	2180      	movs	r1, #128	@ 0x80
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f923 	bl	8009568 <USBD_LL_StallEP>
 8008322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008324:	e040      	b.n	80083a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc3e 	bl	8008baa <USBD_CtlError>
              break;
 800832e:	e03b      	b.n	80083a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	885b      	ldrh	r3, [r3, #2]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d136      	bne.n	80083a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800833e:	2b00      	cmp	r3, #0
 8008340:	d004      	beq.n	800834c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f92d 	bl	80095a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fcf7 	bl	8008d40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fde4 	bl	8007f24 <USBD_CoreFindEP>
 800835c:	4603      	mov	r3, r0
 800835e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008360:	7b7b      	ldrb	r3, [r7, #13]
 8008362:	2bff      	cmp	r3, #255	@ 0xff
 8008364:	d01f      	beq.n	80083a6 <USBD_StdEPReq+0x1c6>
 8008366:	7b7b      	ldrb	r3, [r7, #13]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11c      	bne.n	80083a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800836c:	7b7a      	ldrb	r2, [r7, #13]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008374:	7b7a      	ldrb	r2, [r7, #13]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32ae      	adds	r2, #174	@ 0xae
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d010      	beq.n	80083a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008384:	7b7a      	ldrb	r2, [r7, #13]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	32ae      	adds	r2, #174	@ 0xae
 800838a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800839a:	e004      	b.n	80083a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc03 	bl	8008baa <USBD_CtlError>
              break;
 80083a4:	e000      	b.n	80083a8 <USBD_StdEPReq+0x1c8>
              break;
 80083a6:	bf00      	nop
          }
          break;
 80083a8:	e0ab      	b.n	8008502 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d002      	beq.n	80083bc <USBD_StdEPReq+0x1dc>
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d032      	beq.n	8008420 <USBD_StdEPReq+0x240>
 80083ba:	e097      	b.n	80084ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <USBD_StdEPReq+0x1f2>
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b80      	cmp	r3, #128	@ 0x80
 80083c6:	d004      	beq.n	80083d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fbed 	bl	8008baa <USBD_CtlError>
                break;
 80083d0:	e091      	b.n	80084f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da0b      	bge.n	80083f2 <USBD_StdEPReq+0x212>
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	3310      	adds	r3, #16
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	3304      	adds	r3, #4
 80083f0:	e00b      	b.n	800840a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2202      	movs	r2, #2
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc37 	bl	8008c8c <USBD_CtlSendData>
              break;
 800841e:	e06a      	b.n	80084f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	da11      	bge.n	800844c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	f003 020f 	and.w	r2, r3, #15
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	3324      	adds	r3, #36	@ 0x24
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d117      	bne.n	8008472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fbb0 	bl	8008baa <USBD_CtlError>
                  break;
 800844a:	e054      	b.n	80084f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	f003 020f 	and.w	r2, r3, #15
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fb9d 	bl	8008baa <USBD_CtlError>
                  break;
 8008470:	e041      	b.n	80084f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	da0b      	bge.n	8008492 <USBD_StdEPReq+0x2b2>
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008480:	4613      	mov	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	3310      	adds	r3, #16
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	3304      	adds	r3, #4
 8008490:	e00b      	b.n	80084aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4413      	add	r3, r2
 80084a8:	3304      	adds	r3, #4
 80084aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <USBD_StdEPReq+0x2d8>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b80      	cmp	r3, #128	@ 0x80
 80084b6:	d103      	bne.n	80084c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e00e      	b.n	80084de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f88d 	bl	80095e4 <USBD_LL_IsStallEP>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2201      	movs	r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	e002      	b.n	80084de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2202      	movs	r2, #2
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fbd1 	bl	8008c8c <USBD_CtlSendData>
              break;
 80084ea:	e004      	b.n	80084f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb5b 	bl	8008baa <USBD_CtlError>
              break;
 80084f4:	bf00      	nop
          }
          break;
 80084f6:	e004      	b.n	8008502 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fb55 	bl	8008baa <USBD_CtlError>
          break;
 8008500:	bf00      	nop
      }
      break;
 8008502:	e005      	b.n	8008510 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fb4f 	bl	8008baa <USBD_CtlError>
      break;
 800850c:	e000      	b.n	8008510 <USBD_StdEPReq+0x330>
      break;
 800850e:	bf00      	nop
  }

  return ret;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	2b06      	cmp	r3, #6
 800853e:	f200 8128 	bhi.w	8008792 <USBD_GetDescriptor+0x276>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <USBD_GetDescriptor+0x2c>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008565 	.word	0x08008565
 800854c:	0800857d 	.word	0x0800857d
 8008550:	080085bd 	.word	0x080085bd
 8008554:	08008793 	.word	0x08008793
 8008558:	08008793 	.word	0x08008793
 800855c:	08008733 	.word	0x08008733
 8008560:	0800875f 	.word	0x0800875f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	7c12      	ldrb	r2, [r2, #16]
 8008570:	f107 0108 	add.w	r1, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
      break;
 800857a:	e112      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7c1b      	ldrb	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10d      	bne.n	80085a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	f107 0208 	add.w	r2, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800859e:	e100      	b.n	80087a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a8:	f107 0208 	add.w	r2, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
      break;
 80085ba:	e0f2      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	f200 80ac 	bhi.w	8008720 <USBD_GetDescriptor+0x204>
 80085c8:	a201      	add	r2, pc, #4	@ (adr r2, 80085d0 <USBD_GetDescriptor+0xb4>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008685 	.word	0x08008685
 80085e0:	080086b9 	.word	0x080086b9
 80085e4:	080086ed 	.word	0x080086ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7c12      	ldrb	r2, [r2, #16]
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860a:	e091      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 facb 	bl	8008baa <USBD_CtlError>
            err++;
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	3301      	adds	r3, #1
 8008618:	72fb      	strb	r3, [r7, #11]
          break;
 800861a:	e089      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863e:	e077      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fab1 	bl	8008baa <USBD_CtlError>
            err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
          break;
 800864e:	e06f      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008672:	e05d      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa97 	bl	8008baa <USBD_CtlError>
            err++;
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	3301      	adds	r3, #1
 8008680:	72fb      	strb	r3, [r7, #11]
          break;
 8008682:	e055      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7c12      	ldrb	r2, [r2, #16]
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a6:	e043      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa7d 	bl	8008baa <USBD_CtlError>
            err++;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	3301      	adds	r3, #1
 80086b4:	72fb      	strb	r3, [r7, #11]
          break;
 80086b6:	e03b      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086da:	e029      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa63 	bl	8008baa <USBD_CtlError>
            err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ea:	e021      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e00f      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa49 	bl	8008baa <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e007      	b.n	8008730 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa41 	bl	8008baa <USBD_CtlError>
          err++;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	3301      	adds	r3, #1
 800872c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800872e:	bf00      	nop
      }
      break;
 8008730:	e037      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7c1b      	ldrb	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008742:	f107 0208 	add.w	r2, r7, #8
 8008746:	4610      	mov	r0, r2
 8008748:	4798      	blx	r3
 800874a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800874c:	e029      	b.n	80087a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa2a 	bl	8008baa <USBD_CtlError>
        err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	e021      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7c1b      	ldrb	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10d      	bne.n	8008782 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800876c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876e:	f107 0208 	add.w	r2, r7, #8
 8008772:	4610      	mov	r0, r2
 8008774:	4798      	blx	r3
 8008776:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	2207      	movs	r2, #7
 800877e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008780:	e00f      	b.n	80087a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fa10 	bl	8008baa <USBD_CtlError>
        err++;
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	3301      	adds	r3, #1
 800878e:	72fb      	strb	r3, [r7, #11]
      break;
 8008790:	e007      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa08 	bl	8008baa <USBD_CtlError>
      err++;
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	3301      	adds	r3, #1
 800879e:	72fb      	strb	r3, [r7, #11]
      break;
 80087a0:	bf00      	nop
  }

  if (err != 0U)
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11e      	bne.n	80087e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	88db      	ldrh	r3, [r3, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d016      	beq.n	80087de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087b0:	893b      	ldrh	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88da      	ldrh	r2, [r3, #6]
 80087ba:	893b      	ldrh	r3, [r7, #8]
 80087bc:	4293      	cmp	r3, r2
 80087be:	bf28      	it	cs
 80087c0:	4613      	movcs	r3, r2
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087c6:	893b      	ldrh	r3, [r7, #8]
 80087c8:	461a      	mov	r2, r3
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa5d 	bl	8008c8c <USBD_CtlSendData>
 80087d2:	e009      	b.n	80087e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9e7 	bl	8008baa <USBD_CtlError>
 80087dc:	e004      	b.n	80087e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 faae 	bl	8008d40 <USBD_CtlSendStatus>
 80087e4:	e000      	b.n	80087e8 <USBD_GetDescriptor+0x2cc>
    return;
 80087e6:	bf00      	nop
  }
}
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop

080087f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	889b      	ldrh	r3, [r3, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d131      	bne.n	8008866 <USBD_SetAddress+0x76>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	88db      	ldrh	r3, [r3, #6]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d12d      	bne.n	8008866 <USBD_SetAddress+0x76>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008810:	d829      	bhi.n	8008866 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d104      	bne.n	8008834 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f9bc 	bl	8008baa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	e01d      	b.n	8008870 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7bfa      	ldrb	r2, [r7, #15]
 8008838:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fefb 	bl	800963c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa7a 	bl	8008d40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d004      	beq.n	800885c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	e009      	b.n	8008870 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008864:	e004      	b.n	8008870 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f99e 	bl	8008baa <USBD_CtlError>
  }
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b2da      	uxtb	r2, r3
 800888c:	4b4e      	ldr	r3, [pc, #312]	@ (80089c8 <USBD_SetConfig+0x150>)
 800888e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008890:	4b4d      	ldr	r3, [pc, #308]	@ (80089c8 <USBD_SetConfig+0x150>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d905      	bls.n	80088a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f985 	bl	8008baa <USBD_CtlError>
    return USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e08c      	b.n	80089be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d002      	beq.n	80088b6 <USBD_SetConfig+0x3e>
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d029      	beq.n	8008908 <USBD_SetConfig+0x90>
 80088b4:	e075      	b.n	80089a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088b6:	4b44      	ldr	r3, [pc, #272]	@ (80089c8 <USBD_SetConfig+0x150>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d020      	beq.n	8008900 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088be:	4b42      	ldr	r3, [pc, #264]	@ (80089c8 <USBD_SetConfig+0x150>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088c8:	4b3f      	ldr	r3, [pc, #252]	@ (80089c8 <USBD_SetConfig+0x150>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fe ffe3 	bl	800789a <USBD_SetClassConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d008      	beq.n	80088f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f962 	bl	8008baa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2202      	movs	r2, #2
 80088ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088ee:	e065      	b.n	80089bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fa25 	bl	8008d40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2203      	movs	r2, #3
 80088fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80088fe:	e05d      	b.n	80089bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fa1d 	bl	8008d40 <USBD_CtlSendStatus>
      break;
 8008906:	e059      	b.n	80089bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008908:	4b2f      	ldr	r3, [pc, #188]	@ (80089c8 <USBD_SetConfig+0x150>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d112      	bne.n	8008936 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008918:	4b2b      	ldr	r3, [pc, #172]	@ (80089c8 <USBD_SetConfig+0x150>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008922:	4b29      	ldr	r3, [pc, #164]	@ (80089c8 <USBD_SetConfig+0x150>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fe ffd2 	bl	80078d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa06 	bl	8008d40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008934:	e042      	b.n	80089bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008936:	4b24      	ldr	r3, [pc, #144]	@ (80089c8 <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d02a      	beq.n	800899a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ffc0 	bl	80078d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008952:	4b1d      	ldr	r3, [pc, #116]	@ (80089c8 <USBD_SetConfig+0x150>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800895c:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <USBD_SetConfig+0x150>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe ff99 	bl	800789a <USBD_SetClassConfig>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00f      	beq.n	8008992 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f918 	bl	8008baa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7fe ffa5 	bl	80078d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008990:	e014      	b.n	80089bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f9d4 	bl	8008d40 <USBD_CtlSendStatus>
      break;
 8008998:	e010      	b.n	80089bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9d0 	bl	8008d40 <USBD_CtlSendStatus>
      break;
 80089a0:	e00c      	b.n	80089bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f900 	bl	8008baa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089aa:	4b07      	ldr	r3, [pc, #28]	@ (80089c8 <USBD_SetConfig+0x150>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fe ff8e 	bl	80078d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089b6:	2303      	movs	r3, #3
 80089b8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ba:	bf00      	nop
  }

  return ret;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	2000039c 	.word	0x2000039c

080089cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	88db      	ldrh	r3, [r3, #6]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d004      	beq.n	80089e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f8e2 	bl	8008baa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089e6:	e023      	b.n	8008a30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	dc02      	bgt.n	80089fa <USBD_GetConfig+0x2e>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dc03      	bgt.n	8008a00 <USBD_GetConfig+0x34>
 80089f8:	e015      	b.n	8008a26 <USBD_GetConfig+0x5a>
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d00b      	beq.n	8008a16 <USBD_GetConfig+0x4a>
 80089fe:	e012      	b.n	8008a26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f93c 	bl	8008c8c <USBD_CtlSendData>
        break;
 8008a14:	e00c      	b.n	8008a30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f934 	bl	8008c8c <USBD_CtlSendData>
        break;
 8008a24:	e004      	b.n	8008a30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8be 	bl	8008baa <USBD_CtlError>
        break;
 8008a2e:	bf00      	nop
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d81e      	bhi.n	8008a8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d004      	beq.n	8008a62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8a5 	bl	8008baa <USBD_CtlError>
        break;
 8008a60:	e01a      	b.n	8008a98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 0202 	orr.w	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	330c      	adds	r3, #12
 8008a82:	2202      	movs	r2, #2
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f900 	bl	8008c8c <USBD_CtlSendData>
      break;
 8008a8c:	e004      	b.n	8008a98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f88a 	bl	8008baa <USBD_CtlError>
      break;
 8008a96:	bf00      	nop
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d107      	bne.n	8008ac2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f940 	bl	8008d40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ac0:	e013      	b.n	8008aea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d10b      	bne.n	8008ae2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f930 	bl	8008d40 <USBD_CtlSendStatus>
}
 8008ae0:	e003      	b.n	8008aea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f860 	bl	8008baa <USBD_CtlError>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d80b      	bhi.n	8008b22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10c      	bne.n	8008b2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f910 	bl	8008d40 <USBD_CtlSendStatus>
      }
      break;
 8008b20:	e004      	b.n	8008b2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f840 	bl	8008baa <USBD_CtlError>
      break;
 8008b2a:	e000      	b.n	8008b2e <USBD_ClrFeature+0x3c>
      break;
 8008b2c:	bf00      	nop
  }
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	781a      	ldrb	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fa40 	bl	8007fe6 <SWAPBYTE>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3301      	adds	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fa33 	bl	8007fe6 <SWAPBYTE>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff fa26 	bl	8007fe6 <SWAPBYTE>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	80da      	strh	r2, [r3, #6]
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bb4:	2180      	movs	r1, #128	@ 0x80
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fcd6 	bl	8009568 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fcd2 	bl	8009568 <USBD_LL_StallEP>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d036      	beq.n	8008c50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008be6:	6938      	ldr	r0, [r7, #16]
 8008be8:	f000 f836 	bl	8008c58 <USBD_GetLen>
 8008bec:	4603      	mov	r3, r0
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	4413      	add	r3, r2
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	4413      	add	r3, r2
 8008c12:	2203      	movs	r2, #3
 8008c14:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c1c:	e013      	b.n	8008c46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4413      	add	r3, r2
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	7812      	ldrb	r2, [r2, #0]
 8008c28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
    idx++;
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	3301      	adds	r3, #1
 8008c34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	3301      	adds	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e7      	bne.n	8008c1e <USBD_GetString+0x52>
 8008c4e:	e000      	b.n	8008c52 <USBD_GetString+0x86>
    return;
 8008c50:	bf00      	nop
  }
}
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c68:	e005      	b.n	8008c76 <USBD_GetLen+0x1e>
  {
    len++;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1f5      	bne.n	8008c6a <USBD_GetLen+0x12>
  }

  return len;
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 fce1 	bl	800967a <USBD_LL_Transmit>

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 fcd0 	bl	800967a <USBD_LL_Transmit>

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fcd4 	bl	80096bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	2100      	movs	r1, #0
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fcc3 	bl	80096bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2204      	movs	r2, #4
 8008d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fc8f 	bl	800967a <USBD_LL_Transmit>

  return USBD_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2205      	movs	r2, #5
 8008d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d76:	2300      	movs	r3, #0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc9d 	bl	80096bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d90:	2200      	movs	r2, #0
 8008d92:	4912      	ldr	r1, [pc, #72]	@ (8008ddc <MX_USB_DEVICE_Init+0x50>)
 8008d94:	4812      	ldr	r0, [pc, #72]	@ (8008de0 <MX_USB_DEVICE_Init+0x54>)
 8008d96:	f7fe fd03 	bl	80077a0 <USBD_Init>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008da0:	f7f8 fc90 	bl	80016c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008da4:	490f      	ldr	r1, [pc, #60]	@ (8008de4 <MX_USB_DEVICE_Init+0x58>)
 8008da6:	480e      	ldr	r0, [pc, #56]	@ (8008de0 <MX_USB_DEVICE_Init+0x54>)
 8008da8:	f7fe fd2a 	bl	8007800 <USBD_RegisterClass>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008db2:	f7f8 fc87 	bl	80016c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008db6:	490c      	ldr	r1, [pc, #48]	@ (8008de8 <MX_USB_DEVICE_Init+0x5c>)
 8008db8:	4809      	ldr	r0, [pc, #36]	@ (8008de0 <MX_USB_DEVICE_Init+0x54>)
 8008dba:	f7fe fc21 	bl	8007600 <USBD_CDC_RegisterInterface>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008dc4:	f7f8 fc7e 	bl	80016c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008dc8:	4805      	ldr	r0, [pc, #20]	@ (8008de0 <MX_USB_DEVICE_Init+0x54>)
 8008dca:	f7fe fd4f 	bl	800786c <USBD_Start>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008dd4:	f7f8 fc76 	bl	80016c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dd8:	bf00      	nop
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	200000b8 	.word	0x200000b8
 8008de0:	200003a0 	.word	0x200003a0
 8008de4:	20000024 	.word	0x20000024
 8008de8:	200000a4 	.word	0x200000a4

08008dec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008df0:	2200      	movs	r2, #0
 8008df2:	4905      	ldr	r1, [pc, #20]	@ (8008e08 <CDC_Init_FS+0x1c>)
 8008df4:	4805      	ldr	r0, [pc, #20]	@ (8008e0c <CDC_Init_FS+0x20>)
 8008df6:	f7fe fc1d 	bl	8007634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dfa:	4905      	ldr	r1, [pc, #20]	@ (8008e10 <CDC_Init_FS+0x24>)
 8008dfc:	4803      	ldr	r0, [pc, #12]	@ (8008e0c <CDC_Init_FS+0x20>)
 8008dfe:	f7fe fc3b 	bl	8007678 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000e7c 	.word	0x20000e7c
 8008e0c:	200003a0 	.word	0x200003a0
 8008e10:	2000067c 	.word	0x2000067c

08008e14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	71fb      	strb	r3, [r7, #7]
 8008e30:	4613      	mov	r3, r2
 8008e32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	2b23      	cmp	r3, #35	@ 0x23
 8008e38:	d84a      	bhi.n	8008ed0 <CDC_Control_FS+0xac>
 8008e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e40 <CDC_Control_FS+0x1c>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008ed1 	.word	0x08008ed1
 8008e44:	08008ed1 	.word	0x08008ed1
 8008e48:	08008ed1 	.word	0x08008ed1
 8008e4c:	08008ed1 	.word	0x08008ed1
 8008e50:	08008ed1 	.word	0x08008ed1
 8008e54:	08008ed1 	.word	0x08008ed1
 8008e58:	08008ed1 	.word	0x08008ed1
 8008e5c:	08008ed1 	.word	0x08008ed1
 8008e60:	08008ed1 	.word	0x08008ed1
 8008e64:	08008ed1 	.word	0x08008ed1
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008ed1 	.word	0x08008ed1
 8008e70:	08008ed1 	.word	0x08008ed1
 8008e74:	08008ed1 	.word	0x08008ed1
 8008e78:	08008ed1 	.word	0x08008ed1
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	08008ed1 	.word	0x08008ed1
 8008e88:	08008ed1 	.word	0x08008ed1
 8008e8c:	08008ed1 	.word	0x08008ed1
 8008e90:	08008ed1 	.word	0x08008ed1
 8008e94:	08008ed1 	.word	0x08008ed1
 8008e98:	08008ed1 	.word	0x08008ed1
 8008e9c:	08008ed1 	.word	0x08008ed1
 8008ea0:	08008ed1 	.word	0x08008ed1
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	08008ed1 	.word	0x08008ed1
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ed1 	.word	0x08008ed1
 8008eb8:	08008ed1 	.word	0x08008ed1
 8008ebc:	08008ed1 	.word	0x08008ed1
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008ed1 	.word	0x08008ed1
 8008ec8:	08008ed1 	.word	0x08008ed1
 8008ecc:	08008ed1 	.word	0x08008ed1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ed0:	bf00      	nop
  }

  return (USBD_OK);
 8008ed2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	4805      	ldr	r0, [pc, #20]	@ (8008f04 <CDC_Receive_FS+0x24>)
 8008eee:	f7fe fbc3 	bl	8007678 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ef2:	4804      	ldr	r0, [pc, #16]	@ (8008f04 <CDC_Receive_FS+0x24>)
 8008ef4:	f7fe fc1e 	bl	8007734 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ef8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	200003a0 	.word	0x200003a0

08008f08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f18:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <CDC_Transmit_FS+0x48>)
 8008f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e00b      	b.n	8008f46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f2e:	887b      	ldrh	r3, [r7, #2]
 8008f30:	461a      	mov	r2, r3
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	4806      	ldr	r0, [pc, #24]	@ (8008f50 <CDC_Transmit_FS+0x48>)
 8008f36:	f7fe fb7d 	bl	8007634 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f3a:	4805      	ldr	r0, [pc, #20]	@ (8008f50 <CDC_Transmit_FS+0x48>)
 8008f3c:	f7fe fbba 	bl	80076b4 <USBD_CDC_TransmitPacket>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200003a0 	.word	0x200003a0

08008f54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	6039      	str	r1, [r7, #0]
 8008f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2212      	movs	r2, #18
 8008f88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f8a:	4b03      	ldr	r3, [pc, #12]	@ (8008f98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	200000d4 	.word	0x200000d4

08008f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	6039      	str	r1, [r7, #0]
 8008fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2204      	movs	r2, #4
 8008fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fae:	4b03      	ldr	r3, [pc, #12]	@ (8008fbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	200000e8 	.word	0x200000e8

08008fc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	4907      	ldr	r1, [pc, #28]	@ (8008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fd6:	4808      	ldr	r0, [pc, #32]	@ (8008ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd8:	f7ff fdf8 	bl	8008bcc <USBD_GetString>
 8008fdc:	e004      	b.n	8008fe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	4904      	ldr	r1, [pc, #16]	@ (8008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fe2:	4805      	ldr	r0, [pc, #20]	@ (8008ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fe4:	f7ff fdf2 	bl	8008bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe8:	4b02      	ldr	r3, [pc, #8]	@ (8008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	2000167c 	.word	0x2000167c
 8008ff8:	0800c480 	.word	0x0800c480

08008ffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	4904      	ldr	r1, [pc, #16]	@ (800901c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800900c:	4804      	ldr	r0, [pc, #16]	@ (8009020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800900e:	f7ff fddd 	bl	8008bcc <USBD_GetString>
  return USBD_StrDesc;
 8009012:	4b02      	ldr	r3, [pc, #8]	@ (800901c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	2000167c 	.word	0x2000167c
 8009020:	0800c498 	.word	0x0800c498

08009024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	221a      	movs	r2, #26
 8009034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009036:	f000 f843 	bl	80090c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800903a:	4b02      	ldr	r3, [pc, #8]	@ (8009044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	200000ec 	.word	0x200000ec

08009048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d105      	bne.n	8009066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4907      	ldr	r1, [pc, #28]	@ (800907c <USBD_FS_ConfigStrDescriptor+0x34>)
 800905e:	4808      	ldr	r0, [pc, #32]	@ (8009080 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009060:	f7ff fdb4 	bl	8008bcc <USBD_GetString>
 8009064:	e004      	b.n	8009070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4904      	ldr	r1, [pc, #16]	@ (800907c <USBD_FS_ConfigStrDescriptor+0x34>)
 800906a:	4805      	ldr	r0, [pc, #20]	@ (8009080 <USBD_FS_ConfigStrDescriptor+0x38>)
 800906c:	f7ff fdae 	bl	8008bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009070:	4b02      	ldr	r3, [pc, #8]	@ (800907c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	2000167c 	.word	0x2000167c
 8009080:	0800c4ac 	.word	0x0800c4ac

08009084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4907      	ldr	r1, [pc, #28]	@ (80090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800909a:	4808      	ldr	r0, [pc, #32]	@ (80090bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800909c:	f7ff fd96 	bl	8008bcc <USBD_GetString>
 80090a0:	e004      	b.n	80090ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4904      	ldr	r1, [pc, #16]	@ (80090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090a6:	4805      	ldr	r0, [pc, #20]	@ (80090bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090a8:	f7ff fd90 	bl	8008bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	@ (80090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	2000167c 	.word	0x2000167c
 80090bc:	0800c4b8 	.word	0x0800c4b8

080090c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009104 <Get_SerialNum+0x44>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009108 <Get_SerialNum+0x48>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090d2:	4b0e      	ldr	r3, [pc, #56]	@ (800910c <Get_SerialNum+0x4c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090e6:	2208      	movs	r2, #8
 80090e8:	4909      	ldr	r1, [pc, #36]	@ (8009110 <Get_SerialNum+0x50>)
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 f814 	bl	8009118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090f0:	2204      	movs	r2, #4
 80090f2:	4908      	ldr	r1, [pc, #32]	@ (8009114 <Get_SerialNum+0x54>)
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f000 f80f 	bl	8009118 <IntToUnicode>
  }
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	1fff7a10 	.word	0x1fff7a10
 8009108:	1fff7a14 	.word	0x1fff7a14
 800910c:	1fff7a18 	.word	0x1fff7a18
 8009110:	200000ee 	.word	0x200000ee
 8009114:	200000fe 	.word	0x200000fe

08009118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800912a:	2300      	movs	r3, #0
 800912c:	75fb      	strb	r3, [r7, #23]
 800912e:	e027      	b.n	8009180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	0f1b      	lsrs	r3, r3, #28
 8009134:	2b09      	cmp	r3, #9
 8009136:	d80b      	bhi.n	8009150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	0f1b      	lsrs	r3, r3, #28
 800913c:	b2da      	uxtb	r2, r3
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	4619      	mov	r1, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	440b      	add	r3, r1
 8009148:	3230      	adds	r2, #48	@ 0x30
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e00a      	b.n	8009166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	0f1b      	lsrs	r3, r3, #28
 8009154:	b2da      	uxtb	r2, r3
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4619      	mov	r1, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	440b      	add	r3, r1
 8009160:	3237      	adds	r2, #55	@ 0x37
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	3301      	adds	r3, #1
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	3301      	adds	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
 8009180:	7dfa      	ldrb	r2, [r7, #23]
 8009182:	79fb      	ldrb	r3, [r7, #7]
 8009184:	429a      	cmp	r2, r3
 8009186:	d3d3      	bcc.n	8009130 <IntToUnicode+0x18>
  }
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	@ 0x28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	609a      	str	r2, [r3, #8]
 80091ac:	60da      	str	r2, [r3, #12]
 80091ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091b8:	d13a      	bne.n	8009230 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	4b1e      	ldr	r3, [pc, #120]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 80091c4:	f043 0301 	orr.w	r3, r3, #1
 80091c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80091ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 80091cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	613b      	str	r3, [r7, #16]
 80091d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80091da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091dc:	2302      	movs	r3, #2
 80091de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091e4:	2303      	movs	r3, #3
 80091e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091e8:	230a      	movs	r3, #10
 80091ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ec:	f107 0314 	add.w	r3, r7, #20
 80091f0:	4619      	mov	r1, r3
 80091f2:	4812      	ldr	r0, [pc, #72]	@ (800923c <HAL_PCD_MspInit+0xa4>)
 80091f4:	f7f8 fe1c 	bl	8001e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 80091fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fc:	4a0e      	ldr	r2, [pc, #56]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 80091fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009202:	6353      	str	r3, [r2, #52]	@ 0x34
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 800920a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920c:	4a0a      	ldr	r2, [pc, #40]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 800920e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009212:	6453      	str	r3, [r2, #68]	@ 0x44
 8009214:	4b08      	ldr	r3, [pc, #32]	@ (8009238 <HAL_PCD_MspInit+0xa0>)
 8009216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	2043      	movs	r0, #67	@ 0x43
 8009226:	f7f8 fdcc 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800922a:	2043      	movs	r0, #67	@ 0x43
 800922c:	f7f8 fde5 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009230:	bf00      	nop
 8009232:	3728      	adds	r7, #40	@ 0x28
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	40023800 	.word	0x40023800
 800923c:	40020000 	.word	0x40020000

08009240 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f7fe fb55 	bl	8007906 <USBD_LL_SetupStage>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	4619      	mov	r1, r3
 800928e:	f7fe fb8f 	bl	80079b0 <USBD_LL_DataOutStage>
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	4613      	mov	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	3320      	adds	r3, #32
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f7fe fc28 	bl	8007b16 <USBD_LL_DataInStage>
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fd62 	bl	8007da6 <USBD_LL_SOF>
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092f2:	2301      	movs	r3, #1
 80092f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	79db      	ldrb	r3, [r3, #7]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d001      	beq.n	8009302 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092fe:	f7f8 f9e1 	bl	80016c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009308:	7bfa      	ldrb	r2, [r7, #15]
 800930a:	4611      	mov	r1, r2
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fd06 	bl	8007d1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fcae 	bl	8007c7a <USBD_LL_Reset>
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fd01 	bl	8007d3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800934e:	f043 0301 	orr.w	r3, r3, #1
 8009352:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7adb      	ldrb	r3, [r3, #11]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800935c:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <HAL_PCD_SuspendCallback+0x48>)
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	4a03      	ldr	r2, [pc, #12]	@ (8009370 <HAL_PCD_SuspendCallback+0x48>)
 8009362:	f043 0306 	orr.w	r3, r3, #6
 8009366:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	e000ed00 	.word	0xe000ed00

08009374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fcf7 	bl	8007d76 <USBD_LL_Resume>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fd4f 	bl	8007e4a <USBD_LL_IsoOUTIncomplete>
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	4611      	mov	r1, r2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fd0b 	bl	8007de6 <USBD_LL_IsoINIncomplete>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fd61 	bl	8007eae <USBD_LL_DevConnected>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fd5e 	bl	8007ec4 <USBD_LL_DevDisconnected>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d13c      	bne.n	800949a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009420:	4a20      	ldr	r2, [pc, #128]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a1e      	ldr	r2, [pc, #120]	@ (80094a4 <USBD_LL_Init+0x94>)
 800942c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009430:	4b1c      	ldr	r3, [pc, #112]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009432:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009438:	4b1a      	ldr	r3, [pc, #104]	@ (80094a4 <USBD_LL_Init+0x94>)
 800943a:	2204      	movs	r2, #4
 800943c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800943e:	4b19      	ldr	r3, [pc, #100]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009440:	2202      	movs	r2, #2
 8009442:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009444:	4b17      	ldr	r3, [pc, #92]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009446:	2200      	movs	r2, #0
 8009448:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800944a:	4b16      	ldr	r3, [pc, #88]	@ (80094a4 <USBD_LL_Init+0x94>)
 800944c:	2202      	movs	r2, #2
 800944e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009450:	4b14      	ldr	r3, [pc, #80]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009452:	2200      	movs	r2, #0
 8009454:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009456:	4b13      	ldr	r3, [pc, #76]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009458:	2200      	movs	r2, #0
 800945a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800945c:	4b11      	ldr	r3, [pc, #68]	@ (80094a4 <USBD_LL_Init+0x94>)
 800945e:	2200      	movs	r2, #0
 8009460:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009462:	4b10      	ldr	r3, [pc, #64]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009464:	2200      	movs	r2, #0
 8009466:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009468:	4b0e      	ldr	r3, [pc, #56]	@ (80094a4 <USBD_LL_Init+0x94>)
 800946a:	2200      	movs	r2, #0
 800946c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800946e:	480d      	ldr	r0, [pc, #52]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009470:	f7f9 fcc8 	bl	8002e04 <HAL_PCD_Init>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800947a:	f7f8 f923 	bl	80016c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800947e:	2180      	movs	r1, #128	@ 0x80
 8009480:	4808      	ldr	r0, [pc, #32]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009482:	f7fa fef2 	bl	800426a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009486:	2240      	movs	r2, #64	@ 0x40
 8009488:	2100      	movs	r1, #0
 800948a:	4806      	ldr	r0, [pc, #24]	@ (80094a4 <USBD_LL_Init+0x94>)
 800948c:	f7fa fea6 	bl	80041dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009490:	2280      	movs	r2, #128	@ 0x80
 8009492:	2101      	movs	r1, #1
 8009494:	4803      	ldr	r0, [pc, #12]	@ (80094a4 <USBD_LL_Init+0x94>)
 8009496:	f7fa fea1 	bl	80041dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	2000187c 	.word	0x2000187c

080094a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094be:	4618      	mov	r0, r3
 80094c0:	f7f9 fdaf 	bl	8003022 <HAL_PCD_Start>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f942 	bl	8009754 <USBD_Get_USB_Status>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	4608      	mov	r0, r1
 80094e8:	4611      	mov	r1, r2
 80094ea:	461a      	mov	r2, r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	70fb      	strb	r3, [r7, #3]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70bb      	strb	r3, [r7, #2]
 80094f4:	4613      	mov	r3, r2
 80094f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009506:	78bb      	ldrb	r3, [r7, #2]
 8009508:	883a      	ldrh	r2, [r7, #0]
 800950a:	78f9      	ldrb	r1, [r7, #3]
 800950c:	f7fa fa83 	bl	8003a16 <HAL_PCD_EP_Open>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f91c 	bl	8009754 <USBD_Get_USB_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009520:	7bbb      	ldrb	r3, [r7, #14]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009544:	78fa      	ldrb	r2, [r7, #3]
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f7fa facc 	bl	8003ae6 <HAL_PCD_EP_Close>
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f8fd 	bl	8009754 <USBD_Get_USB_Status>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009582:	78fa      	ldrb	r2, [r7, #3]
 8009584:	4611      	mov	r1, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f7fa fb84 	bl	8003c94 <HAL_PCD_EP_SetStall>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f8de 	bl	8009754 <USBD_Get_USB_Status>
 8009598:	4603      	mov	r3, r0
 800959a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959c:	7bbb      	ldrb	r3, [r7, #14]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fa fbc8 	bl	8003d5a <HAL_PCD_EP_ClrStall>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f8bf 	bl	8009754 <USBD_Get_USB_Status>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095da:	7bbb      	ldrb	r3, [r7, #14]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da0b      	bge.n	8009618 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	4613      	mov	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	3316      	adds	r3, #22
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	e00b      	b.n	8009630 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009618:	78fb      	ldrb	r3, [r7, #3]
 800961a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800961e:	68f9      	ldr	r1, [r7, #12]
 8009620:	4613      	mov	r3, r2
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800962e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f7fa f9b7 	bl	80039ce <HAL_PCD_SetAddress>
 8009660:	4603      	mov	r3, r0
 8009662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f874 	bl	8009754 <USBD_Get_USB_Status>
 800966c:	4603      	mov	r3, r0
 800966e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009670:	7bbb      	ldrb	r3, [r7, #14]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	460b      	mov	r3, r1
 8009688:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009698:	7af9      	ldrb	r1, [r7, #11]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	f7fa fabf 	bl	8003c20 <HAL_PCD_EP_Transmit>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 f853 	bl	8009754 <USBD_Get_USB_Status>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	607a      	str	r2, [r7, #4]
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	460b      	mov	r3, r1
 80096ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096da:	7af9      	ldrb	r1, [r7, #11]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	f7fa fa4b 	bl	8003b7a <HAL_PCD_EP_Receive>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 f832 	bl	8009754 <USBD_Get_USB_Status>
 80096f0:	4603      	mov	r3, r0
 80096f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7fa fa6b 	bl	8003bf0 <HAL_PCD_EP_GetRxCount>
 800971a:	4603      	mov	r3, r0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800972c:	4b03      	ldr	r3, [pc, #12]	@ (800973c <USBD_static_malloc+0x18>)
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	20001d60 	.word	0x20001d60

08009740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]

}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	2b03      	cmp	r3, #3
 8009766:	d817      	bhi.n	8009798 <USBD_Get_USB_Status+0x44>
 8009768:	a201      	add	r2, pc, #4	@ (adr r2, 8009770 <USBD_Get_USB_Status+0x1c>)
 800976a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	08009781 	.word	0x08009781
 8009774:	08009787 	.word	0x08009787
 8009778:	0800978d 	.word	0x0800978d
 800977c:	08009793 	.word	0x08009793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
    break;
 8009784:	e00b      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009786:	2303      	movs	r3, #3
 8009788:	73fb      	strb	r3, [r7, #15]
    break;
 800978a:	e008      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800978c:	2301      	movs	r3, #1
 800978e:	73fb      	strb	r3, [r7, #15]
    break;
 8009790:	e005      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009792:	2303      	movs	r3, #3
 8009794:	73fb      	strb	r3, [r7, #15]
    break;
 8009796:	e002      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009798:	2303      	movs	r3, #3
 800979a:	73fb      	strb	r3, [r7, #15]
    break;
 800979c:	bf00      	nop
  }
  return usb_status;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <malloc>:
 80097ac:	4b02      	ldr	r3, [pc, #8]	@ (80097b8 <malloc+0xc>)
 80097ae:	4601      	mov	r1, r0
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f000 b825 	b.w	8009800 <_malloc_r>
 80097b6:	bf00      	nop
 80097b8:	20000114 	.word	0x20000114

080097bc <sbrk_aligned>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4e0f      	ldr	r6, [pc, #60]	@ (80097fc <sbrk_aligned+0x40>)
 80097c0:	460c      	mov	r4, r1
 80097c2:	6831      	ldr	r1, [r6, #0]
 80097c4:	4605      	mov	r5, r0
 80097c6:	b911      	cbnz	r1, 80097ce <sbrk_aligned+0x12>
 80097c8:	f000 fe72 	bl	800a4b0 <_sbrk_r>
 80097cc:	6030      	str	r0, [r6, #0]
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	f000 fe6d 	bl	800a4b0 <_sbrk_r>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d103      	bne.n	80097e2 <sbrk_aligned+0x26>
 80097da:	f04f 34ff 	mov.w	r4, #4294967295
 80097de:	4620      	mov	r0, r4
 80097e0:	bd70      	pop	{r4, r5, r6, pc}
 80097e2:	1cc4      	adds	r4, r0, #3
 80097e4:	f024 0403 	bic.w	r4, r4, #3
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d0f8      	beq.n	80097de <sbrk_aligned+0x22>
 80097ec:	1a21      	subs	r1, r4, r0
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 fe5e 	bl	800a4b0 <_sbrk_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d1f2      	bne.n	80097de <sbrk_aligned+0x22>
 80097f8:	e7ef      	b.n	80097da <sbrk_aligned+0x1e>
 80097fa:	bf00      	nop
 80097fc:	20001f80 	.word	0x20001f80

08009800 <_malloc_r>:
 8009800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009804:	1ccd      	adds	r5, r1, #3
 8009806:	f025 0503 	bic.w	r5, r5, #3
 800980a:	3508      	adds	r5, #8
 800980c:	2d0c      	cmp	r5, #12
 800980e:	bf38      	it	cc
 8009810:	250c      	movcc	r5, #12
 8009812:	2d00      	cmp	r5, #0
 8009814:	4606      	mov	r6, r0
 8009816:	db01      	blt.n	800981c <_malloc_r+0x1c>
 8009818:	42a9      	cmp	r1, r5
 800981a:	d904      	bls.n	8009826 <_malloc_r+0x26>
 800981c:	230c      	movs	r3, #12
 800981e:	6033      	str	r3, [r6, #0]
 8009820:	2000      	movs	r0, #0
 8009822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098fc <_malloc_r+0xfc>
 800982a:	f000 f869 	bl	8009900 <__malloc_lock>
 800982e:	f8d8 3000 	ldr.w	r3, [r8]
 8009832:	461c      	mov	r4, r3
 8009834:	bb44      	cbnz	r4, 8009888 <_malloc_r+0x88>
 8009836:	4629      	mov	r1, r5
 8009838:	4630      	mov	r0, r6
 800983a:	f7ff ffbf 	bl	80097bc <sbrk_aligned>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	4604      	mov	r4, r0
 8009842:	d158      	bne.n	80098f6 <_malloc_r+0xf6>
 8009844:	f8d8 4000 	ldr.w	r4, [r8]
 8009848:	4627      	mov	r7, r4
 800984a:	2f00      	cmp	r7, #0
 800984c:	d143      	bne.n	80098d6 <_malloc_r+0xd6>
 800984e:	2c00      	cmp	r4, #0
 8009850:	d04b      	beq.n	80098ea <_malloc_r+0xea>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	4639      	mov	r1, r7
 8009856:	4630      	mov	r0, r6
 8009858:	eb04 0903 	add.w	r9, r4, r3
 800985c:	f000 fe28 	bl	800a4b0 <_sbrk_r>
 8009860:	4581      	cmp	r9, r0
 8009862:	d142      	bne.n	80098ea <_malloc_r+0xea>
 8009864:	6821      	ldr	r1, [r4, #0]
 8009866:	1a6d      	subs	r5, r5, r1
 8009868:	4629      	mov	r1, r5
 800986a:	4630      	mov	r0, r6
 800986c:	f7ff ffa6 	bl	80097bc <sbrk_aligned>
 8009870:	3001      	adds	r0, #1
 8009872:	d03a      	beq.n	80098ea <_malloc_r+0xea>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	442b      	add	r3, r5
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	f8d8 3000 	ldr.w	r3, [r8]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	bb62      	cbnz	r2, 80098dc <_malloc_r+0xdc>
 8009882:	f8c8 7000 	str.w	r7, [r8]
 8009886:	e00f      	b.n	80098a8 <_malloc_r+0xa8>
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	1b52      	subs	r2, r2, r5
 800988c:	d420      	bmi.n	80098d0 <_malloc_r+0xd0>
 800988e:	2a0b      	cmp	r2, #11
 8009890:	d917      	bls.n	80098c2 <_malloc_r+0xc2>
 8009892:	1961      	adds	r1, r4, r5
 8009894:	42a3      	cmp	r3, r4
 8009896:	6025      	str	r5, [r4, #0]
 8009898:	bf18      	it	ne
 800989a:	6059      	strne	r1, [r3, #4]
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	bf08      	it	eq
 80098a0:	f8c8 1000 	streq.w	r1, [r8]
 80098a4:	5162      	str	r2, [r4, r5]
 80098a6:	604b      	str	r3, [r1, #4]
 80098a8:	4630      	mov	r0, r6
 80098aa:	f000 f82f 	bl	800990c <__malloc_unlock>
 80098ae:	f104 000b 	add.w	r0, r4, #11
 80098b2:	1d23      	adds	r3, r4, #4
 80098b4:	f020 0007 	bic.w	r0, r0, #7
 80098b8:	1ac2      	subs	r2, r0, r3
 80098ba:	bf1c      	itt	ne
 80098bc:	1a1b      	subne	r3, r3, r0
 80098be:	50a3      	strne	r3, [r4, r2]
 80098c0:	e7af      	b.n	8009822 <_malloc_r+0x22>
 80098c2:	6862      	ldr	r2, [r4, #4]
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	bf0c      	ite	eq
 80098c8:	f8c8 2000 	streq.w	r2, [r8]
 80098cc:	605a      	strne	r2, [r3, #4]
 80098ce:	e7eb      	b.n	80098a8 <_malloc_r+0xa8>
 80098d0:	4623      	mov	r3, r4
 80098d2:	6864      	ldr	r4, [r4, #4]
 80098d4:	e7ae      	b.n	8009834 <_malloc_r+0x34>
 80098d6:	463c      	mov	r4, r7
 80098d8:	687f      	ldr	r7, [r7, #4]
 80098da:	e7b6      	b.n	800984a <_malloc_r+0x4a>
 80098dc:	461a      	mov	r2, r3
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d1fb      	bne.n	80098dc <_malloc_r+0xdc>
 80098e4:	2300      	movs	r3, #0
 80098e6:	6053      	str	r3, [r2, #4]
 80098e8:	e7de      	b.n	80098a8 <_malloc_r+0xa8>
 80098ea:	230c      	movs	r3, #12
 80098ec:	6033      	str	r3, [r6, #0]
 80098ee:	4630      	mov	r0, r6
 80098f0:	f000 f80c 	bl	800990c <__malloc_unlock>
 80098f4:	e794      	b.n	8009820 <_malloc_r+0x20>
 80098f6:	6005      	str	r5, [r0, #0]
 80098f8:	e7d6      	b.n	80098a8 <_malloc_r+0xa8>
 80098fa:	bf00      	nop
 80098fc:	20001f84 	.word	0x20001f84

08009900 <__malloc_lock>:
 8009900:	4801      	ldr	r0, [pc, #4]	@ (8009908 <__malloc_lock+0x8>)
 8009902:	f000 be22 	b.w	800a54a <__retarget_lock_acquire_recursive>
 8009906:	bf00      	nop
 8009908:	200020c8 	.word	0x200020c8

0800990c <__malloc_unlock>:
 800990c:	4801      	ldr	r0, [pc, #4]	@ (8009914 <__malloc_unlock+0x8>)
 800990e:	f000 be1d 	b.w	800a54c <__retarget_lock_release_recursive>
 8009912:	bf00      	nop
 8009914:	200020c8 	.word	0x200020c8

08009918 <__cvt>:
 8009918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	ec57 6b10 	vmov	r6, r7, d0
 8009920:	2f00      	cmp	r7, #0
 8009922:	460c      	mov	r4, r1
 8009924:	4619      	mov	r1, r3
 8009926:	463b      	mov	r3, r7
 8009928:	bfbb      	ittet	lt
 800992a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800992e:	461f      	movlt	r7, r3
 8009930:	2300      	movge	r3, #0
 8009932:	232d      	movlt	r3, #45	@ 0x2d
 8009934:	700b      	strb	r3, [r1, #0]
 8009936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800993c:	4691      	mov	r9, r2
 800993e:	f023 0820 	bic.w	r8, r3, #32
 8009942:	bfbc      	itt	lt
 8009944:	4632      	movlt	r2, r6
 8009946:	4616      	movlt	r6, r2
 8009948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800994c:	d005      	beq.n	800995a <__cvt+0x42>
 800994e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009952:	d100      	bne.n	8009956 <__cvt+0x3e>
 8009954:	3401      	adds	r4, #1
 8009956:	2102      	movs	r1, #2
 8009958:	e000      	b.n	800995c <__cvt+0x44>
 800995a:	2103      	movs	r1, #3
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	ab02      	add	r3, sp, #8
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	ec47 6b10 	vmov	d0, r6, r7
 8009968:	4653      	mov	r3, sl
 800996a:	4622      	mov	r2, r4
 800996c:	f000 fe78 	bl	800a660 <_dtoa_r>
 8009970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009974:	4605      	mov	r5, r0
 8009976:	d119      	bne.n	80099ac <__cvt+0x94>
 8009978:	f019 0f01 	tst.w	r9, #1
 800997c:	d00e      	beq.n	800999c <__cvt+0x84>
 800997e:	eb00 0904 	add.w	r9, r0, r4
 8009982:	2200      	movs	r2, #0
 8009984:	2300      	movs	r3, #0
 8009986:	4630      	mov	r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	f7f7 f8a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800998e:	b108      	cbz	r0, 8009994 <__cvt+0x7c>
 8009990:	f8cd 900c 	str.w	r9, [sp, #12]
 8009994:	2230      	movs	r2, #48	@ 0x30
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	454b      	cmp	r3, r9
 800999a:	d31e      	bcc.n	80099da <__cvt+0xc2>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099a0:	1b5b      	subs	r3, r3, r5
 80099a2:	4628      	mov	r0, r5
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	b004      	add	sp, #16
 80099a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b0:	eb00 0904 	add.w	r9, r0, r4
 80099b4:	d1e5      	bne.n	8009982 <__cvt+0x6a>
 80099b6:	7803      	ldrb	r3, [r0, #0]
 80099b8:	2b30      	cmp	r3, #48	@ 0x30
 80099ba:	d10a      	bne.n	80099d2 <__cvt+0xba>
 80099bc:	2200      	movs	r2, #0
 80099be:	2300      	movs	r3, #0
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f888 	bl	8000ad8 <__aeabi_dcmpeq>
 80099c8:	b918      	cbnz	r0, 80099d2 <__cvt+0xba>
 80099ca:	f1c4 0401 	rsb	r4, r4, #1
 80099ce:	f8ca 4000 	str.w	r4, [sl]
 80099d2:	f8da 3000 	ldr.w	r3, [sl]
 80099d6:	4499      	add	r9, r3
 80099d8:	e7d3      	b.n	8009982 <__cvt+0x6a>
 80099da:	1c59      	adds	r1, r3, #1
 80099dc:	9103      	str	r1, [sp, #12]
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e7d9      	b.n	8009996 <__cvt+0x7e>

080099e2 <__exponent>:
 80099e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e4:	2900      	cmp	r1, #0
 80099e6:	bfba      	itte	lt
 80099e8:	4249      	neglt	r1, r1
 80099ea:	232d      	movlt	r3, #45	@ 0x2d
 80099ec:	232b      	movge	r3, #43	@ 0x2b
 80099ee:	2909      	cmp	r1, #9
 80099f0:	7002      	strb	r2, [r0, #0]
 80099f2:	7043      	strb	r3, [r0, #1]
 80099f4:	dd29      	ble.n	8009a4a <__exponent+0x68>
 80099f6:	f10d 0307 	add.w	r3, sp, #7
 80099fa:	461d      	mov	r5, r3
 80099fc:	270a      	movs	r7, #10
 80099fe:	461a      	mov	r2, r3
 8009a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a04:	fb07 1416 	mls	r4, r7, r6, r1
 8009a08:	3430      	adds	r4, #48	@ 0x30
 8009a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a0e:	460c      	mov	r4, r1
 8009a10:	2c63      	cmp	r4, #99	@ 0x63
 8009a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a16:	4631      	mov	r1, r6
 8009a18:	dcf1      	bgt.n	80099fe <__exponent+0x1c>
 8009a1a:	3130      	adds	r1, #48	@ 0x30
 8009a1c:	1e94      	subs	r4, r2, #2
 8009a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a22:	1c41      	adds	r1, r0, #1
 8009a24:	4623      	mov	r3, r4
 8009a26:	42ab      	cmp	r3, r5
 8009a28:	d30a      	bcc.n	8009a40 <__exponent+0x5e>
 8009a2a:	f10d 0309 	add.w	r3, sp, #9
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ac      	cmp	r4, r5
 8009a32:	bf88      	it	hi
 8009a34:	2300      	movhi	r3, #0
 8009a36:	3302      	adds	r3, #2
 8009a38:	4403      	add	r3, r0
 8009a3a:	1a18      	subs	r0, r3, r0
 8009a3c:	b003      	add	sp, #12
 8009a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a48:	e7ed      	b.n	8009a26 <__exponent+0x44>
 8009a4a:	2330      	movs	r3, #48	@ 0x30
 8009a4c:	3130      	adds	r1, #48	@ 0x30
 8009a4e:	7083      	strb	r3, [r0, #2]
 8009a50:	70c1      	strb	r1, [r0, #3]
 8009a52:	1d03      	adds	r3, r0, #4
 8009a54:	e7f1      	b.n	8009a3a <__exponent+0x58>
	...

08009a58 <_printf_float>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	b08d      	sub	sp, #52	@ 0x34
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a64:	4616      	mov	r6, r2
 8009a66:	461f      	mov	r7, r3
 8009a68:	4605      	mov	r5, r0
 8009a6a:	f000 fce9 	bl	800a440 <_localeconv_r>
 8009a6e:	6803      	ldr	r3, [r0, #0]
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f6 fc04 	bl	8000280 <strlen>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a80:	9005      	str	r0, [sp, #20]
 8009a82:	3307      	adds	r3, #7
 8009a84:	f023 0307 	bic.w	r3, r3, #7
 8009a88:	f103 0208 	add.w	r2, r3, #8
 8009a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a90:	f8d4 b000 	ldr.w	fp, [r4]
 8009a94:	f8c8 2000 	str.w	r2, [r8]
 8009a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aae:	4b9c      	ldr	r3, [pc, #624]	@ (8009d20 <_printf_float+0x2c8>)
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab4:	f7f7 f842 	bl	8000b3c <__aeabi_dcmpun>
 8009ab8:	bb70      	cbnz	r0, 8009b18 <_printf_float+0xc0>
 8009aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009abe:	4b98      	ldr	r3, [pc, #608]	@ (8009d20 <_printf_float+0x2c8>)
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	f7f7 f81c 	bl	8000b00 <__aeabi_dcmple>
 8009ac8:	bb30      	cbnz	r0, 8009b18 <_printf_float+0xc0>
 8009aca:	2200      	movs	r2, #0
 8009acc:	2300      	movs	r3, #0
 8009ace:	4640      	mov	r0, r8
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	f7f7 f80b 	bl	8000aec <__aeabi_dcmplt>
 8009ad6:	b110      	cbz	r0, 8009ade <_printf_float+0x86>
 8009ad8:	232d      	movs	r3, #45	@ 0x2d
 8009ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ade:	4a91      	ldr	r2, [pc, #580]	@ (8009d24 <_printf_float+0x2cc>)
 8009ae0:	4b91      	ldr	r3, [pc, #580]	@ (8009d28 <_printf_float+0x2d0>)
 8009ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ae6:	bf94      	ite	ls
 8009ae8:	4690      	movls	r8, r2
 8009aea:	4698      	movhi	r8, r3
 8009aec:	2303      	movs	r3, #3
 8009aee:	6123      	str	r3, [r4, #16]
 8009af0:	f02b 0304 	bic.w	r3, fp, #4
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	f04f 0900 	mov.w	r9, #0
 8009afa:	9700      	str	r7, [sp, #0]
 8009afc:	4633      	mov	r3, r6
 8009afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b00:	4621      	mov	r1, r4
 8009b02:	4628      	mov	r0, r5
 8009b04:	f000 f9d2 	bl	8009eac <_printf_common>
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f040 808d 	bne.w	8009c28 <_printf_float+0x1d0>
 8009b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b12:	b00d      	add	sp, #52	@ 0x34
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	4649      	mov	r1, r9
 8009b20:	f7f7 f80c 	bl	8000b3c <__aeabi_dcmpun>
 8009b24:	b140      	cbz	r0, 8009b38 <_printf_float+0xe0>
 8009b26:	464b      	mov	r3, r9
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfbc      	itt	lt
 8009b2c:	232d      	movlt	r3, #45	@ 0x2d
 8009b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b32:	4a7e      	ldr	r2, [pc, #504]	@ (8009d2c <_printf_float+0x2d4>)
 8009b34:	4b7e      	ldr	r3, [pc, #504]	@ (8009d30 <_printf_float+0x2d8>)
 8009b36:	e7d4      	b.n	8009ae2 <_printf_float+0x8a>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b3e:	9206      	str	r2, [sp, #24]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	d13b      	bne.n	8009bbc <_printf_float+0x164>
 8009b44:	2306      	movs	r3, #6
 8009b46:	6063      	str	r3, [r4, #4]
 8009b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6022      	str	r2, [r4, #0]
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b58:	ab09      	add	r3, sp, #36	@ 0x24
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	6861      	ldr	r1, [r4, #4]
 8009b5e:	ec49 8b10 	vmov	d0, r8, r9
 8009b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b66:	4628      	mov	r0, r5
 8009b68:	f7ff fed6 	bl	8009918 <__cvt>
 8009b6c:	9b06      	ldr	r3, [sp, #24]
 8009b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b70:	2b47      	cmp	r3, #71	@ 0x47
 8009b72:	4680      	mov	r8, r0
 8009b74:	d129      	bne.n	8009bca <_printf_float+0x172>
 8009b76:	1cc8      	adds	r0, r1, #3
 8009b78:	db02      	blt.n	8009b80 <_printf_float+0x128>
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	dd41      	ble.n	8009c04 <_printf_float+0x1ac>
 8009b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b84:	fa5f fa8a 	uxtb.w	sl, sl
 8009b88:	3901      	subs	r1, #1
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b92:	f7ff ff26 	bl	80099e2 <__exponent>
 8009b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b98:	1813      	adds	r3, r2, r0
 8009b9a:	2a01      	cmp	r2, #1
 8009b9c:	4681      	mov	r9, r0
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	dc02      	bgt.n	8009ba8 <_printf_float+0x150>
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	07d2      	lsls	r2, r2, #31
 8009ba6:	d501      	bpl.n	8009bac <_printf_float+0x154>
 8009ba8:	3301      	adds	r3, #1
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0a2      	beq.n	8009afa <_printf_float+0xa2>
 8009bb4:	232d      	movs	r3, #45	@ 0x2d
 8009bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bba:	e79e      	b.n	8009afa <_printf_float+0xa2>
 8009bbc:	9a06      	ldr	r2, [sp, #24]
 8009bbe:	2a47      	cmp	r2, #71	@ 0x47
 8009bc0:	d1c2      	bne.n	8009b48 <_printf_float+0xf0>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1c0      	bne.n	8009b48 <_printf_float+0xf0>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7bd      	b.n	8009b46 <_printf_float+0xee>
 8009bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bce:	d9db      	bls.n	8009b88 <_printf_float+0x130>
 8009bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bd4:	d118      	bne.n	8009c08 <_printf_float+0x1b0>
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	6863      	ldr	r3, [r4, #4]
 8009bda:	dd0b      	ble.n	8009bf4 <_printf_float+0x19c>
 8009bdc:	6121      	str	r1, [r4, #16]
 8009bde:	b913      	cbnz	r3, 8009be6 <_printf_float+0x18e>
 8009be0:	6822      	ldr	r2, [r4, #0]
 8009be2:	07d0      	lsls	r0, r2, #31
 8009be4:	d502      	bpl.n	8009bec <_printf_float+0x194>
 8009be6:	3301      	adds	r3, #1
 8009be8:	440b      	add	r3, r1
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bee:	f04f 0900 	mov.w	r9, #0
 8009bf2:	e7db      	b.n	8009bac <_printf_float+0x154>
 8009bf4:	b913      	cbnz	r3, 8009bfc <_printf_float+0x1a4>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	07d2      	lsls	r2, r2, #31
 8009bfa:	d501      	bpl.n	8009c00 <_printf_float+0x1a8>
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	e7f4      	b.n	8009bea <_printf_float+0x192>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f2      	b.n	8009bea <_printf_float+0x192>
 8009c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	db05      	blt.n	8009c1a <_printf_float+0x1c2>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	6121      	str	r1, [r4, #16]
 8009c12:	07d8      	lsls	r0, r3, #31
 8009c14:	d5ea      	bpl.n	8009bec <_printf_float+0x194>
 8009c16:	1c4b      	adds	r3, r1, #1
 8009c18:	e7e7      	b.n	8009bea <_printf_float+0x192>
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	bfd4      	ite	le
 8009c1e:	f1c1 0202 	rsble	r2, r1, #2
 8009c22:	2201      	movgt	r2, #1
 8009c24:	4413      	add	r3, r2
 8009c26:	e7e0      	b.n	8009bea <_printf_float+0x192>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	055a      	lsls	r2, r3, #21
 8009c2c:	d407      	bmi.n	8009c3e <_printf_float+0x1e6>
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	4642      	mov	r2, r8
 8009c32:	4631      	mov	r1, r6
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d12b      	bne.n	8009c94 <_printf_float+0x23c>
 8009c3c:	e767      	b.n	8009b0e <_printf_float+0xb6>
 8009c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c42:	f240 80dd 	bls.w	8009e00 <_printf_float+0x3a8>
 8009c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f7f6 ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d033      	beq.n	8009cbe <_printf_float+0x266>
 8009c56:	4a37      	ldr	r2, [pc, #220]	@ (8009d34 <_printf_float+0x2dc>)
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f af54 	beq.w	8009b0e <_printf_float+0xb6>
 8009c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c6a:	4543      	cmp	r3, r8
 8009c6c:	db02      	blt.n	8009c74 <_printf_float+0x21c>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	07d8      	lsls	r0, r3, #31
 8009c72:	d50f      	bpl.n	8009c94 <_printf_float+0x23c>
 8009c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f af45 	beq.w	8009b0e <_printf_float+0xb6>
 8009c84:	f04f 0900 	mov.w	r9, #0
 8009c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c8c:	f104 0a1a 	add.w	sl, r4, #26
 8009c90:	45c8      	cmp	r8, r9
 8009c92:	dc09      	bgt.n	8009ca8 <_printf_float+0x250>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	079b      	lsls	r3, r3, #30
 8009c98:	f100 8103 	bmi.w	8009ea2 <_printf_float+0x44a>
 8009c9c:	68e0      	ldr	r0, [r4, #12]
 8009c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ca0:	4298      	cmp	r0, r3
 8009ca2:	bfb8      	it	lt
 8009ca4:	4618      	movlt	r0, r3
 8009ca6:	e734      	b.n	8009b12 <_printf_float+0xba>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4652      	mov	r2, sl
 8009cac:	4631      	mov	r1, r6
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f43f af2b 	beq.w	8009b0e <_printf_float+0xb6>
 8009cb8:	f109 0901 	add.w	r9, r9, #1
 8009cbc:	e7e8      	b.n	8009c90 <_printf_float+0x238>
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc39      	bgt.n	8009d38 <_printf_float+0x2e0>
 8009cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d34 <_printf_float+0x2dc>)
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f af1d 	beq.w	8009b0e <_printf_float+0xb6>
 8009cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8009cdc:	d102      	bne.n	8009ce4 <_printf_float+0x28c>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	07d9      	lsls	r1, r3, #31
 8009ce2:	d5d7      	bpl.n	8009c94 <_printf_float+0x23c>
 8009ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f43f af0d 	beq.w	8009b0e <_printf_float+0xb6>
 8009cf4:	f04f 0a00 	mov.w	sl, #0
 8009cf8:	f104 0b1a 	add.w	fp, r4, #26
 8009cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfe:	425b      	negs	r3, r3
 8009d00:	4553      	cmp	r3, sl
 8009d02:	dc01      	bgt.n	8009d08 <_printf_float+0x2b0>
 8009d04:	464b      	mov	r3, r9
 8009d06:	e793      	b.n	8009c30 <_printf_float+0x1d8>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	465a      	mov	r2, fp
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f aefb 	beq.w	8009b0e <_printf_float+0xb6>
 8009d18:	f10a 0a01 	add.w	sl, sl, #1
 8009d1c:	e7ee      	b.n	8009cfc <_printf_float+0x2a4>
 8009d1e:	bf00      	nop
 8009d20:	7fefffff 	.word	0x7fefffff
 8009d24:	0800c4e0 	.word	0x0800c4e0
 8009d28:	0800c4e4 	.word	0x0800c4e4
 8009d2c:	0800c4e8 	.word	0x0800c4e8
 8009d30:	0800c4ec 	.word	0x0800c4ec
 8009d34:	0800c4f0 	.word	0x0800c4f0
 8009d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d3e:	4553      	cmp	r3, sl
 8009d40:	bfa8      	it	ge
 8009d42:	4653      	movge	r3, sl
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	4699      	mov	r9, r3
 8009d48:	dc36      	bgt.n	8009db8 <_printf_float+0x360>
 8009d4a:	f04f 0b00 	mov.w	fp, #0
 8009d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d52:	f104 021a 	add.w	r2, r4, #26
 8009d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d58:	9306      	str	r3, [sp, #24]
 8009d5a:	eba3 0309 	sub.w	r3, r3, r9
 8009d5e:	455b      	cmp	r3, fp
 8009d60:	dc31      	bgt.n	8009dc6 <_printf_float+0x36e>
 8009d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d64:	459a      	cmp	sl, r3
 8009d66:	dc3a      	bgt.n	8009dde <_printf_float+0x386>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	07da      	lsls	r2, r3, #31
 8009d6c:	d437      	bmi.n	8009dde <_printf_float+0x386>
 8009d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d70:	ebaa 0903 	sub.w	r9, sl, r3
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	ebaa 0303 	sub.w	r3, sl, r3
 8009d7a:	4599      	cmp	r9, r3
 8009d7c:	bfa8      	it	ge
 8009d7e:	4699      	movge	r9, r3
 8009d80:	f1b9 0f00 	cmp.w	r9, #0
 8009d84:	dc33      	bgt.n	8009dee <_printf_float+0x396>
 8009d86:	f04f 0800 	mov.w	r8, #0
 8009d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d8e:	f104 0b1a 	add.w	fp, r4, #26
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	ebaa 0303 	sub.w	r3, sl, r3
 8009d98:	eba3 0309 	sub.w	r3, r3, r9
 8009d9c:	4543      	cmp	r3, r8
 8009d9e:	f77f af79 	ble.w	8009c94 <_printf_float+0x23c>
 8009da2:	2301      	movs	r3, #1
 8009da4:	465a      	mov	r2, fp
 8009da6:	4631      	mov	r1, r6
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b8      	blx	r7
 8009dac:	3001      	adds	r0, #1
 8009dae:	f43f aeae 	beq.w	8009b0e <_printf_float+0xb6>
 8009db2:	f108 0801 	add.w	r8, r8, #1
 8009db6:	e7ec      	b.n	8009d92 <_printf_float+0x33a>
 8009db8:	4642      	mov	r2, r8
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d1c2      	bne.n	8009d4a <_printf_float+0x2f2>
 8009dc4:	e6a3      	b.n	8009b0e <_printf_float+0xb6>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	9206      	str	r2, [sp, #24]
 8009dce:	47b8      	blx	r7
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f43f ae9c 	beq.w	8009b0e <_printf_float+0xb6>
 8009dd6:	9a06      	ldr	r2, [sp, #24]
 8009dd8:	f10b 0b01 	add.w	fp, fp, #1
 8009ddc:	e7bb      	b.n	8009d56 <_printf_float+0x2fe>
 8009dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	d1c0      	bne.n	8009d6e <_printf_float+0x316>
 8009dec:	e68f      	b.n	8009b0e <_printf_float+0xb6>
 8009dee:	9a06      	ldr	r2, [sp, #24]
 8009df0:	464b      	mov	r3, r9
 8009df2:	4442      	add	r2, r8
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d1c3      	bne.n	8009d86 <_printf_float+0x32e>
 8009dfe:	e686      	b.n	8009b0e <_printf_float+0xb6>
 8009e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e04:	f1ba 0f01 	cmp.w	sl, #1
 8009e08:	dc01      	bgt.n	8009e0e <_printf_float+0x3b6>
 8009e0a:	07db      	lsls	r3, r3, #31
 8009e0c:	d536      	bpl.n	8009e7c <_printf_float+0x424>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4642      	mov	r2, r8
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f ae78 	beq.w	8009b0e <_printf_float+0xb6>
 8009e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f43f ae70 	beq.w	8009b0e <_printf_float+0xb6>
 8009e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e32:	2200      	movs	r2, #0
 8009e34:	2300      	movs	r3, #0
 8009e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e3a:	f7f6 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e3e:	b9c0      	cbnz	r0, 8009e72 <_printf_float+0x41a>
 8009e40:	4653      	mov	r3, sl
 8009e42:	f108 0201 	add.w	r2, r8, #1
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d10c      	bne.n	8009e6a <_printf_float+0x412>
 8009e50:	e65d      	b.n	8009b0e <_printf_float+0xb6>
 8009e52:	2301      	movs	r3, #1
 8009e54:	465a      	mov	r2, fp
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae56 	beq.w	8009b0e <_printf_float+0xb6>
 8009e62:	f108 0801 	add.w	r8, r8, #1
 8009e66:	45d0      	cmp	r8, sl
 8009e68:	dbf3      	blt.n	8009e52 <_printf_float+0x3fa>
 8009e6a:	464b      	mov	r3, r9
 8009e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e70:	e6df      	b.n	8009c32 <_printf_float+0x1da>
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	f104 0b1a 	add.w	fp, r4, #26
 8009e7a:	e7f4      	b.n	8009e66 <_printf_float+0x40e>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4642      	mov	r2, r8
 8009e80:	e7e1      	b.n	8009e46 <_printf_float+0x3ee>
 8009e82:	2301      	movs	r3, #1
 8009e84:	464a      	mov	r2, r9
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f43f ae3e 	beq.w	8009b0e <_printf_float+0xb6>
 8009e92:	f108 0801 	add.w	r8, r8, #1
 8009e96:	68e3      	ldr	r3, [r4, #12]
 8009e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e9a:	1a5b      	subs	r3, r3, r1
 8009e9c:	4543      	cmp	r3, r8
 8009e9e:	dcf0      	bgt.n	8009e82 <_printf_float+0x42a>
 8009ea0:	e6fc      	b.n	8009c9c <_printf_float+0x244>
 8009ea2:	f04f 0800 	mov.w	r8, #0
 8009ea6:	f104 0919 	add.w	r9, r4, #25
 8009eaa:	e7f4      	b.n	8009e96 <_printf_float+0x43e>

08009eac <_printf_common>:
 8009eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	4698      	mov	r8, r3
 8009eb4:	688a      	ldr	r2, [r1, #8]
 8009eb6:	690b      	ldr	r3, [r1, #16]
 8009eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	bfb8      	it	lt
 8009ec0:	4613      	movlt	r3, r2
 8009ec2:	6033      	str	r3, [r6, #0]
 8009ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ec8:	4607      	mov	r7, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b10a      	cbz	r2, 8009ed2 <_printf_common+0x26>
 8009ece:	3301      	adds	r3, #1
 8009ed0:	6033      	str	r3, [r6, #0]
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	0699      	lsls	r1, r3, #26
 8009ed6:	bf42      	ittt	mi
 8009ed8:	6833      	ldrmi	r3, [r6, #0]
 8009eda:	3302      	addmi	r3, #2
 8009edc:	6033      	strmi	r3, [r6, #0]
 8009ede:	6825      	ldr	r5, [r4, #0]
 8009ee0:	f015 0506 	ands.w	r5, r5, #6
 8009ee4:	d106      	bne.n	8009ef4 <_printf_common+0x48>
 8009ee6:	f104 0a19 	add.w	sl, r4, #25
 8009eea:	68e3      	ldr	r3, [r4, #12]
 8009eec:	6832      	ldr	r2, [r6, #0]
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	dc26      	bgt.n	8009f42 <_printf_common+0x96>
 8009ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	3b00      	subs	r3, #0
 8009efc:	bf18      	it	ne
 8009efe:	2301      	movne	r3, #1
 8009f00:	0692      	lsls	r2, r2, #26
 8009f02:	d42b      	bmi.n	8009f5c <_printf_common+0xb0>
 8009f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f08:	4641      	mov	r1, r8
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	47c8      	blx	r9
 8009f0e:	3001      	adds	r0, #1
 8009f10:	d01e      	beq.n	8009f50 <_printf_common+0xa4>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	6922      	ldr	r2, [r4, #16]
 8009f16:	f003 0306 	and.w	r3, r3, #6
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	bf02      	ittt	eq
 8009f1e:	68e5      	ldreq	r5, [r4, #12]
 8009f20:	6833      	ldreq	r3, [r6, #0]
 8009f22:	1aed      	subeq	r5, r5, r3
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	bf0c      	ite	eq
 8009f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f2c:	2500      	movne	r5, #0
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	bfc4      	itt	gt
 8009f32:	1a9b      	subgt	r3, r3, r2
 8009f34:	18ed      	addgt	r5, r5, r3
 8009f36:	2600      	movs	r6, #0
 8009f38:	341a      	adds	r4, #26
 8009f3a:	42b5      	cmp	r5, r6
 8009f3c:	d11a      	bne.n	8009f74 <_printf_common+0xc8>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e008      	b.n	8009f54 <_printf_common+0xa8>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4652      	mov	r2, sl
 8009f46:	4641      	mov	r1, r8
 8009f48:	4638      	mov	r0, r7
 8009f4a:	47c8      	blx	r9
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d103      	bne.n	8009f58 <_printf_common+0xac>
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f58:	3501      	adds	r5, #1
 8009f5a:	e7c6      	b.n	8009eea <_printf_common+0x3e>
 8009f5c:	18e1      	adds	r1, r4, r3
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	2030      	movs	r0, #48	@ 0x30
 8009f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f66:	4422      	add	r2, r4
 8009f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f70:	3302      	adds	r3, #2
 8009f72:	e7c7      	b.n	8009f04 <_printf_common+0x58>
 8009f74:	2301      	movs	r3, #1
 8009f76:	4622      	mov	r2, r4
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	47c8      	blx	r9
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d0e6      	beq.n	8009f50 <_printf_common+0xa4>
 8009f82:	3601      	adds	r6, #1
 8009f84:	e7d9      	b.n	8009f3a <_printf_common+0x8e>
	...

08009f88 <_printf_i>:
 8009f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	7e0f      	ldrb	r7, [r1, #24]
 8009f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f90:	2f78      	cmp	r7, #120	@ 0x78
 8009f92:	4691      	mov	r9, r2
 8009f94:	4680      	mov	r8, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	469a      	mov	sl, r3
 8009f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f9e:	d807      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fa0:	2f62      	cmp	r7, #98	@ 0x62
 8009fa2:	d80a      	bhi.n	8009fba <_printf_i+0x32>
 8009fa4:	2f00      	cmp	r7, #0
 8009fa6:	f000 80d2 	beq.w	800a14e <_printf_i+0x1c6>
 8009faa:	2f58      	cmp	r7, #88	@ 0x58
 8009fac:	f000 80b9 	beq.w	800a122 <_printf_i+0x19a>
 8009fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fb8:	e03a      	b.n	800a030 <_printf_i+0xa8>
 8009fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fbe:	2b15      	cmp	r3, #21
 8009fc0:	d8f6      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fc8 <_printf_i+0x40>)
 8009fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc8:	0800a021 	.word	0x0800a021
 8009fcc:	0800a035 	.word	0x0800a035
 8009fd0:	08009fb1 	.word	0x08009fb1
 8009fd4:	08009fb1 	.word	0x08009fb1
 8009fd8:	08009fb1 	.word	0x08009fb1
 8009fdc:	08009fb1 	.word	0x08009fb1
 8009fe0:	0800a035 	.word	0x0800a035
 8009fe4:	08009fb1 	.word	0x08009fb1
 8009fe8:	08009fb1 	.word	0x08009fb1
 8009fec:	08009fb1 	.word	0x08009fb1
 8009ff0:	08009fb1 	.word	0x08009fb1
 8009ff4:	0800a135 	.word	0x0800a135
 8009ff8:	0800a05f 	.word	0x0800a05f
 8009ffc:	0800a0ef 	.word	0x0800a0ef
 800a000:	08009fb1 	.word	0x08009fb1
 800a004:	08009fb1 	.word	0x08009fb1
 800a008:	0800a157 	.word	0x0800a157
 800a00c:	08009fb1 	.word	0x08009fb1
 800a010:	0800a05f 	.word	0x0800a05f
 800a014:	08009fb1 	.word	0x08009fb1
 800a018:	08009fb1 	.word	0x08009fb1
 800a01c:	0800a0f7 	.word	0x0800a0f7
 800a020:	6833      	ldr	r3, [r6, #0]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6032      	str	r2, [r6, #0]
 800a028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a030:	2301      	movs	r3, #1
 800a032:	e09d      	b.n	800a170 <_printf_i+0x1e8>
 800a034:	6833      	ldr	r3, [r6, #0]
 800a036:	6820      	ldr	r0, [r4, #0]
 800a038:	1d19      	adds	r1, r3, #4
 800a03a:	6031      	str	r1, [r6, #0]
 800a03c:	0606      	lsls	r6, r0, #24
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0xbc>
 800a040:	681d      	ldr	r5, [r3, #0]
 800a042:	e003      	b.n	800a04c <_printf_i+0xc4>
 800a044:	0645      	lsls	r5, r0, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0xb8>
 800a048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	da03      	bge.n	800a058 <_printf_i+0xd0>
 800a050:	232d      	movs	r3, #45	@ 0x2d
 800a052:	426d      	negs	r5, r5
 800a054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a058:	4859      	ldr	r0, [pc, #356]	@ (800a1c0 <_printf_i+0x238>)
 800a05a:	230a      	movs	r3, #10
 800a05c:	e011      	b.n	800a082 <_printf_i+0xfa>
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	6833      	ldr	r3, [r6, #0]
 800a062:	0608      	lsls	r0, r1, #24
 800a064:	f853 5b04 	ldr.w	r5, [r3], #4
 800a068:	d402      	bmi.n	800a070 <_printf_i+0xe8>
 800a06a:	0649      	lsls	r1, r1, #25
 800a06c:	bf48      	it	mi
 800a06e:	b2ad      	uxthmi	r5, r5
 800a070:	2f6f      	cmp	r7, #111	@ 0x6f
 800a072:	4853      	ldr	r0, [pc, #332]	@ (800a1c0 <_printf_i+0x238>)
 800a074:	6033      	str	r3, [r6, #0]
 800a076:	bf14      	ite	ne
 800a078:	230a      	movne	r3, #10
 800a07a:	2308      	moveq	r3, #8
 800a07c:	2100      	movs	r1, #0
 800a07e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a082:	6866      	ldr	r6, [r4, #4]
 800a084:	60a6      	str	r6, [r4, #8]
 800a086:	2e00      	cmp	r6, #0
 800a088:	bfa2      	ittt	ge
 800a08a:	6821      	ldrge	r1, [r4, #0]
 800a08c:	f021 0104 	bicge.w	r1, r1, #4
 800a090:	6021      	strge	r1, [r4, #0]
 800a092:	b90d      	cbnz	r5, 800a098 <_printf_i+0x110>
 800a094:	2e00      	cmp	r6, #0
 800a096:	d04b      	beq.n	800a130 <_printf_i+0x1a8>
 800a098:	4616      	mov	r6, r2
 800a09a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a09e:	fb03 5711 	mls	r7, r3, r1, r5
 800a0a2:	5dc7      	ldrb	r7, [r0, r7]
 800a0a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0a8:	462f      	mov	r7, r5
 800a0aa:	42bb      	cmp	r3, r7
 800a0ac:	460d      	mov	r5, r1
 800a0ae:	d9f4      	bls.n	800a09a <_printf_i+0x112>
 800a0b0:	2b08      	cmp	r3, #8
 800a0b2:	d10b      	bne.n	800a0cc <_printf_i+0x144>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	07df      	lsls	r7, r3, #31
 800a0b8:	d508      	bpl.n	800a0cc <_printf_i+0x144>
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	6861      	ldr	r1, [r4, #4]
 800a0be:	4299      	cmp	r1, r3
 800a0c0:	bfde      	ittt	le
 800a0c2:	2330      	movle	r3, #48	@ 0x30
 800a0c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0cc:	1b92      	subs	r2, r2, r6
 800a0ce:	6122      	str	r2, [r4, #16]
 800a0d0:	f8cd a000 	str.w	sl, [sp]
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	aa03      	add	r2, sp, #12
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f7ff fee6 	bl	8009eac <_printf_common>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d14a      	bne.n	800a17a <_printf_i+0x1f2>
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	b004      	add	sp, #16
 800a0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	f043 0320 	orr.w	r3, r3, #32
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	4833      	ldr	r0, [pc, #204]	@ (800a1c4 <_printf_i+0x23c>)
 800a0f8:	2778      	movs	r7, #120	@ 0x78
 800a0fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	6831      	ldr	r1, [r6, #0]
 800a102:	061f      	lsls	r7, r3, #24
 800a104:	f851 5b04 	ldr.w	r5, [r1], #4
 800a108:	d402      	bmi.n	800a110 <_printf_i+0x188>
 800a10a:	065f      	lsls	r7, r3, #25
 800a10c:	bf48      	it	mi
 800a10e:	b2ad      	uxthmi	r5, r5
 800a110:	6031      	str	r1, [r6, #0]
 800a112:	07d9      	lsls	r1, r3, #31
 800a114:	bf44      	itt	mi
 800a116:	f043 0320 	orrmi.w	r3, r3, #32
 800a11a:	6023      	strmi	r3, [r4, #0]
 800a11c:	b11d      	cbz	r5, 800a126 <_printf_i+0x19e>
 800a11e:	2310      	movs	r3, #16
 800a120:	e7ac      	b.n	800a07c <_printf_i+0xf4>
 800a122:	4827      	ldr	r0, [pc, #156]	@ (800a1c0 <_printf_i+0x238>)
 800a124:	e7e9      	b.n	800a0fa <_printf_i+0x172>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	f023 0320 	bic.w	r3, r3, #32
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	e7f6      	b.n	800a11e <_printf_i+0x196>
 800a130:	4616      	mov	r6, r2
 800a132:	e7bd      	b.n	800a0b0 <_printf_i+0x128>
 800a134:	6833      	ldr	r3, [r6, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	6961      	ldr	r1, [r4, #20]
 800a13a:	1d18      	adds	r0, r3, #4
 800a13c:	6030      	str	r0, [r6, #0]
 800a13e:	062e      	lsls	r6, r5, #24
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	d501      	bpl.n	800a148 <_printf_i+0x1c0>
 800a144:	6019      	str	r1, [r3, #0]
 800a146:	e002      	b.n	800a14e <_printf_i+0x1c6>
 800a148:	0668      	lsls	r0, r5, #25
 800a14a:	d5fb      	bpl.n	800a144 <_printf_i+0x1bc>
 800a14c:	8019      	strh	r1, [r3, #0]
 800a14e:	2300      	movs	r3, #0
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	4616      	mov	r6, r2
 800a154:	e7bc      	b.n	800a0d0 <_printf_i+0x148>
 800a156:	6833      	ldr	r3, [r6, #0]
 800a158:	1d1a      	adds	r2, r3, #4
 800a15a:	6032      	str	r2, [r6, #0]
 800a15c:	681e      	ldr	r6, [r3, #0]
 800a15e:	6862      	ldr	r2, [r4, #4]
 800a160:	2100      	movs	r1, #0
 800a162:	4630      	mov	r0, r6
 800a164:	f7f6 f83c 	bl	80001e0 <memchr>
 800a168:	b108      	cbz	r0, 800a16e <_printf_i+0x1e6>
 800a16a:	1b80      	subs	r0, r0, r6
 800a16c:	6060      	str	r0, [r4, #4]
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	6123      	str	r3, [r4, #16]
 800a172:	2300      	movs	r3, #0
 800a174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a178:	e7aa      	b.n	800a0d0 <_printf_i+0x148>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	4632      	mov	r2, r6
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	47d0      	blx	sl
 800a184:	3001      	adds	r0, #1
 800a186:	d0ad      	beq.n	800a0e4 <_printf_i+0x15c>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	079b      	lsls	r3, r3, #30
 800a18c:	d413      	bmi.n	800a1b6 <_printf_i+0x22e>
 800a18e:	68e0      	ldr	r0, [r4, #12]
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	4298      	cmp	r0, r3
 800a194:	bfb8      	it	lt
 800a196:	4618      	movlt	r0, r3
 800a198:	e7a6      	b.n	800a0e8 <_printf_i+0x160>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4632      	mov	r2, r6
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	47d0      	blx	sl
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d09d      	beq.n	800a0e4 <_printf_i+0x15c>
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	68e3      	ldr	r3, [r4, #12]
 800a1ac:	9903      	ldr	r1, [sp, #12]
 800a1ae:	1a5b      	subs	r3, r3, r1
 800a1b0:	42ab      	cmp	r3, r5
 800a1b2:	dcf2      	bgt.n	800a19a <_printf_i+0x212>
 800a1b4:	e7eb      	b.n	800a18e <_printf_i+0x206>
 800a1b6:	2500      	movs	r5, #0
 800a1b8:	f104 0619 	add.w	r6, r4, #25
 800a1bc:	e7f5      	b.n	800a1aa <_printf_i+0x222>
 800a1be:	bf00      	nop
 800a1c0:	0800c4f2 	.word	0x0800c4f2
 800a1c4:	0800c503 	.word	0x0800c503

0800a1c8 <std>:
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d6:	6083      	str	r3, [r0, #8]
 800a1d8:	8181      	strh	r1, [r0, #12]
 800a1da:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1dc:	81c2      	strh	r2, [r0, #14]
 800a1de:	6183      	str	r3, [r0, #24]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	2208      	movs	r2, #8
 800a1e4:	305c      	adds	r0, #92	@ 0x5c
 800a1e6:	f000 f914 	bl	800a412 <memset>
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <std+0x58>)
 800a1ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <std+0x5c>)
 800a1f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <std+0x60>)
 800a1f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a22c <std+0x64>)
 800a1f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a230 <std+0x68>)
 800a1fc:	6224      	str	r4, [r4, #32]
 800a1fe:	429c      	cmp	r4, r3
 800a200:	d006      	beq.n	800a210 <std+0x48>
 800a202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a206:	4294      	cmp	r4, r2
 800a208:	d002      	beq.n	800a210 <std+0x48>
 800a20a:	33d0      	adds	r3, #208	@ 0xd0
 800a20c:	429c      	cmp	r4, r3
 800a20e:	d105      	bne.n	800a21c <std+0x54>
 800a210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a218:	f000 b996 	b.w	800a548 <__retarget_lock_init_recursive>
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	bf00      	nop
 800a220:	0800a38d 	.word	0x0800a38d
 800a224:	0800a3af 	.word	0x0800a3af
 800a228:	0800a3e7 	.word	0x0800a3e7
 800a22c:	0800a40b 	.word	0x0800a40b
 800a230:	20001f88 	.word	0x20001f88

0800a234 <stdio_exit_handler>:
 800a234:	4a02      	ldr	r2, [pc, #8]	@ (800a240 <stdio_exit_handler+0xc>)
 800a236:	4903      	ldr	r1, [pc, #12]	@ (800a244 <stdio_exit_handler+0x10>)
 800a238:	4803      	ldr	r0, [pc, #12]	@ (800a248 <stdio_exit_handler+0x14>)
 800a23a:	f000 b869 	b.w	800a310 <_fwalk_sglue>
 800a23e:	bf00      	nop
 800a240:	20000108 	.word	0x20000108
 800a244:	0800bd39 	.word	0x0800bd39
 800a248:	20000118 	.word	0x20000118

0800a24c <cleanup_stdio>:
 800a24c:	6841      	ldr	r1, [r0, #4]
 800a24e:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <cleanup_stdio+0x34>)
 800a250:	4299      	cmp	r1, r3
 800a252:	b510      	push	{r4, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	d001      	beq.n	800a25c <cleanup_stdio+0x10>
 800a258:	f001 fd6e 	bl	800bd38 <_fflush_r>
 800a25c:	68a1      	ldr	r1, [r4, #8]
 800a25e:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <cleanup_stdio+0x38>)
 800a260:	4299      	cmp	r1, r3
 800a262:	d002      	beq.n	800a26a <cleanup_stdio+0x1e>
 800a264:	4620      	mov	r0, r4
 800a266:	f001 fd67 	bl	800bd38 <_fflush_r>
 800a26a:	68e1      	ldr	r1, [r4, #12]
 800a26c:	4b06      	ldr	r3, [pc, #24]	@ (800a288 <cleanup_stdio+0x3c>)
 800a26e:	4299      	cmp	r1, r3
 800a270:	d004      	beq.n	800a27c <cleanup_stdio+0x30>
 800a272:	4620      	mov	r0, r4
 800a274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a278:	f001 bd5e 	b.w	800bd38 <_fflush_r>
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	bf00      	nop
 800a280:	20001f88 	.word	0x20001f88
 800a284:	20001ff0 	.word	0x20001ff0
 800a288:	20002058 	.word	0x20002058

0800a28c <global_stdio_init.part.0>:
 800a28c:	b510      	push	{r4, lr}
 800a28e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2bc <global_stdio_init.part.0+0x30>)
 800a290:	4c0b      	ldr	r4, [pc, #44]	@ (800a2c0 <global_stdio_init.part.0+0x34>)
 800a292:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c4 <global_stdio_init.part.0+0x38>)
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	4620      	mov	r0, r4
 800a298:	2200      	movs	r2, #0
 800a29a:	2104      	movs	r1, #4
 800a29c:	f7ff ff94 	bl	800a1c8 <std>
 800a2a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	2109      	movs	r1, #9
 800a2a8:	f7ff ff8e 	bl	800a1c8 <std>
 800a2ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b6:	2112      	movs	r1, #18
 800a2b8:	f7ff bf86 	b.w	800a1c8 <std>
 800a2bc:	200020c0 	.word	0x200020c0
 800a2c0:	20001f88 	.word	0x20001f88
 800a2c4:	0800a235 	.word	0x0800a235

0800a2c8 <__sfp_lock_acquire>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	@ (800a2d0 <__sfp_lock_acquire+0x8>)
 800a2ca:	f000 b93e 	b.w	800a54a <__retarget_lock_acquire_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	200020c9 	.word	0x200020c9

0800a2d4 <__sfp_lock_release>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	@ (800a2dc <__sfp_lock_release+0x8>)
 800a2d6:	f000 b939 	b.w	800a54c <__retarget_lock_release_recursive>
 800a2da:	bf00      	nop
 800a2dc:	200020c9 	.word	0x200020c9

0800a2e0 <__sinit>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	f7ff fff0 	bl	800a2c8 <__sfp_lock_acquire>
 800a2e8:	6a23      	ldr	r3, [r4, #32]
 800a2ea:	b11b      	cbz	r3, 800a2f4 <__sinit+0x14>
 800a2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f0:	f7ff bff0 	b.w	800a2d4 <__sfp_lock_release>
 800a2f4:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <__sinit+0x28>)
 800a2f6:	6223      	str	r3, [r4, #32]
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <__sinit+0x2c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1f5      	bne.n	800a2ec <__sinit+0xc>
 800a300:	f7ff ffc4 	bl	800a28c <global_stdio_init.part.0>
 800a304:	e7f2      	b.n	800a2ec <__sinit+0xc>
 800a306:	bf00      	nop
 800a308:	0800a24d 	.word	0x0800a24d
 800a30c:	200020c0 	.word	0x200020c0

0800a310 <_fwalk_sglue>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	4607      	mov	r7, r0
 800a316:	4688      	mov	r8, r1
 800a318:	4614      	mov	r4, r2
 800a31a:	2600      	movs	r6, #0
 800a31c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a320:	f1b9 0901 	subs.w	r9, r9, #1
 800a324:	d505      	bpl.n	800a332 <_fwalk_sglue+0x22>
 800a326:	6824      	ldr	r4, [r4, #0]
 800a328:	2c00      	cmp	r4, #0
 800a32a:	d1f7      	bne.n	800a31c <_fwalk_sglue+0xc>
 800a32c:	4630      	mov	r0, r6
 800a32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d907      	bls.n	800a348 <_fwalk_sglue+0x38>
 800a338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a33c:	3301      	adds	r3, #1
 800a33e:	d003      	beq.n	800a348 <_fwalk_sglue+0x38>
 800a340:	4629      	mov	r1, r5
 800a342:	4638      	mov	r0, r7
 800a344:	47c0      	blx	r8
 800a346:	4306      	orrs	r6, r0
 800a348:	3568      	adds	r5, #104	@ 0x68
 800a34a:	e7e9      	b.n	800a320 <_fwalk_sglue+0x10>

0800a34c <siprintf>:
 800a34c:	b40e      	push	{r1, r2, r3}
 800a34e:	b500      	push	{lr}
 800a350:	b09c      	sub	sp, #112	@ 0x70
 800a352:	ab1d      	add	r3, sp, #116	@ 0x74
 800a354:	9002      	str	r0, [sp, #8]
 800a356:	9006      	str	r0, [sp, #24]
 800a358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a35c:	4809      	ldr	r0, [pc, #36]	@ (800a384 <siprintf+0x38>)
 800a35e:	9107      	str	r1, [sp, #28]
 800a360:	9104      	str	r1, [sp, #16]
 800a362:	4909      	ldr	r1, [pc, #36]	@ (800a388 <siprintf+0x3c>)
 800a364:	f853 2b04 	ldr.w	r2, [r3], #4
 800a368:	9105      	str	r1, [sp, #20]
 800a36a:	6800      	ldr	r0, [r0, #0]
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	a902      	add	r1, sp, #8
 800a370:	f001 fb62 	bl	800ba38 <_svfiprintf_r>
 800a374:	9b02      	ldr	r3, [sp, #8]
 800a376:	2200      	movs	r2, #0
 800a378:	701a      	strb	r2, [r3, #0]
 800a37a:	b01c      	add	sp, #112	@ 0x70
 800a37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a380:	b003      	add	sp, #12
 800a382:	4770      	bx	lr
 800a384:	20000114 	.word	0x20000114
 800a388:	ffff0208 	.word	0xffff0208

0800a38c <__sread>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	460c      	mov	r4, r1
 800a390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a394:	f000 f87a 	bl	800a48c <_read_r>
 800a398:	2800      	cmp	r0, #0
 800a39a:	bfab      	itete	ge
 800a39c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a39e:	89a3      	ldrhlt	r3, [r4, #12]
 800a3a0:	181b      	addge	r3, r3, r0
 800a3a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3a6:	bfac      	ite	ge
 800a3a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3aa:	81a3      	strhlt	r3, [r4, #12]
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <__swrite>:
 800a3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b2:	461f      	mov	r7, r3
 800a3b4:	898b      	ldrh	r3, [r1, #12]
 800a3b6:	05db      	lsls	r3, r3, #23
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4616      	mov	r6, r2
 800a3be:	d505      	bpl.n	800a3cc <__swrite+0x1e>
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f000 f84e 	bl	800a468 <_lseek_r>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	4632      	mov	r2, r6
 800a3da:	463b      	mov	r3, r7
 800a3dc:	4628      	mov	r0, r5
 800a3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	f000 b875 	b.w	800a4d0 <_write_r>

0800a3e6 <__sseek>:
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	f000 f83b 	bl	800a468 <_lseek_r>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	bf15      	itete	ne
 800a3f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a402:	81a3      	strheq	r3, [r4, #12]
 800a404:	bf18      	it	ne
 800a406:	81a3      	strhne	r3, [r4, #12]
 800a408:	bd10      	pop	{r4, pc}

0800a40a <__sclose>:
 800a40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40e:	f000 b81b 	b.w	800a448 <_close_r>

0800a412 <memset>:
 800a412:	4402      	add	r2, r0
 800a414:	4603      	mov	r3, r0
 800a416:	4293      	cmp	r3, r2
 800a418:	d100      	bne.n	800a41c <memset+0xa>
 800a41a:	4770      	bx	lr
 800a41c:	f803 1b01 	strb.w	r1, [r3], #1
 800a420:	e7f9      	b.n	800a416 <memset+0x4>

0800a422 <strcat>:
 800a422:	b510      	push	{r4, lr}
 800a424:	4602      	mov	r2, r0
 800a426:	7814      	ldrb	r4, [r2, #0]
 800a428:	4613      	mov	r3, r2
 800a42a:	3201      	adds	r2, #1
 800a42c:	2c00      	cmp	r4, #0
 800a42e:	d1fa      	bne.n	800a426 <strcat+0x4>
 800a430:	3b01      	subs	r3, #1
 800a432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	d1f9      	bne.n	800a432 <strcat+0x10>
 800a43e:	bd10      	pop	{r4, pc}

0800a440 <_localeconv_r>:
 800a440:	4800      	ldr	r0, [pc, #0]	@ (800a444 <_localeconv_r+0x4>)
 800a442:	4770      	bx	lr
 800a444:	20000254 	.word	0x20000254

0800a448 <_close_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d06      	ldr	r5, [pc, #24]	@ (800a464 <_close_r+0x1c>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f7 fa9e 	bl	8001994 <_close>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_close_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_close_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	200020c4 	.word	0x200020c4

0800a468 <_lseek_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	@ (800a488 <_lseek_r+0x20>)
 800a46c:	4604      	mov	r4, r0
 800a46e:	4608      	mov	r0, r1
 800a470:	4611      	mov	r1, r2
 800a472:	2200      	movs	r2, #0
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	f7f7 fab3 	bl	80019e2 <_lseek>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_lseek_r+0x1e>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_lseek_r+0x1e>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	200020c4 	.word	0x200020c4

0800a48c <_read_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d07      	ldr	r5, [pc, #28]	@ (800a4ac <_read_r+0x20>)
 800a490:	4604      	mov	r4, r0
 800a492:	4608      	mov	r0, r1
 800a494:	4611      	mov	r1, r2
 800a496:	2200      	movs	r2, #0
 800a498:	602a      	str	r2, [r5, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	f7f7 fa41 	bl	8001922 <_read>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_read_r+0x1e>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_read_r+0x1e>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	200020c4 	.word	0x200020c4

0800a4b0 <_sbrk_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d06      	ldr	r5, [pc, #24]	@ (800a4cc <_sbrk_r+0x1c>)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	f7f7 fa9e 	bl	80019fc <_sbrk>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_sbrk_r+0x1a>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_sbrk_r+0x1a>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200020c4 	.word	0x200020c4

0800a4d0 <_write_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d07      	ldr	r5, [pc, #28]	@ (800a4f0 <_write_r+0x20>)
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	602a      	str	r2, [r5, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f7 fa3c 	bl	800195c <_write>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_write_r+0x1e>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_write_r+0x1e>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	200020c4 	.word	0x200020c4

0800a4f4 <__errno>:
 800a4f4:	4b01      	ldr	r3, [pc, #4]	@ (800a4fc <__errno+0x8>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000114 	.word	0x20000114

0800a500 <__libc_init_array>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4d0d      	ldr	r5, [pc, #52]	@ (800a538 <__libc_init_array+0x38>)
 800a504:	4c0d      	ldr	r4, [pc, #52]	@ (800a53c <__libc_init_array+0x3c>)
 800a506:	1b64      	subs	r4, r4, r5
 800a508:	10a4      	asrs	r4, r4, #2
 800a50a:	2600      	movs	r6, #0
 800a50c:	42a6      	cmp	r6, r4
 800a50e:	d109      	bne.n	800a524 <__libc_init_array+0x24>
 800a510:	4d0b      	ldr	r5, [pc, #44]	@ (800a540 <__libc_init_array+0x40>)
 800a512:	4c0c      	ldr	r4, [pc, #48]	@ (800a544 <__libc_init_array+0x44>)
 800a514:	f001 ff9e 	bl	800c454 <_init>
 800a518:	1b64      	subs	r4, r4, r5
 800a51a:	10a4      	asrs	r4, r4, #2
 800a51c:	2600      	movs	r6, #0
 800a51e:	42a6      	cmp	r6, r4
 800a520:	d105      	bne.n	800a52e <__libc_init_array+0x2e>
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	f855 3b04 	ldr.w	r3, [r5], #4
 800a528:	4798      	blx	r3
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7ee      	b.n	800a50c <__libc_init_array+0xc>
 800a52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a532:	4798      	blx	r3
 800a534:	3601      	adds	r6, #1
 800a536:	e7f2      	b.n	800a51e <__libc_init_array+0x1e>
 800a538:	0800c858 	.word	0x0800c858
 800a53c:	0800c858 	.word	0x0800c858
 800a540:	0800c858 	.word	0x0800c858
 800a544:	0800c85c 	.word	0x0800c85c

0800a548 <__retarget_lock_init_recursive>:
 800a548:	4770      	bx	lr

0800a54a <__retarget_lock_acquire_recursive>:
 800a54a:	4770      	bx	lr

0800a54c <__retarget_lock_release_recursive>:
 800a54c:	4770      	bx	lr

0800a54e <quorem>:
 800a54e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a552:	6903      	ldr	r3, [r0, #16]
 800a554:	690c      	ldr	r4, [r1, #16]
 800a556:	42a3      	cmp	r3, r4
 800a558:	4607      	mov	r7, r0
 800a55a:	db7e      	blt.n	800a65a <quorem+0x10c>
 800a55c:	3c01      	subs	r4, #1
 800a55e:	f101 0814 	add.w	r8, r1, #20
 800a562:	00a3      	lsls	r3, r4, #2
 800a564:	f100 0514 	add.w	r5, r0, #20
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a578:	3301      	adds	r3, #1
 800a57a:	429a      	cmp	r2, r3
 800a57c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a580:	fbb2 f6f3 	udiv	r6, r2, r3
 800a584:	d32e      	bcc.n	800a5e4 <quorem+0x96>
 800a586:	f04f 0a00 	mov.w	sl, #0
 800a58a:	46c4      	mov	ip, r8
 800a58c:	46ae      	mov	lr, r5
 800a58e:	46d3      	mov	fp, sl
 800a590:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a594:	b298      	uxth	r0, r3
 800a596:	fb06 a000 	mla	r0, r6, r0, sl
 800a59a:	0c02      	lsrs	r2, r0, #16
 800a59c:	0c1b      	lsrs	r3, r3, #16
 800a59e:	fb06 2303 	mla	r3, r6, r3, r2
 800a5a2:	f8de 2000 	ldr.w	r2, [lr]
 800a5a6:	b280      	uxth	r0, r0
 800a5a8:	b292      	uxth	r2, r2
 800a5aa:	1a12      	subs	r2, r2, r0
 800a5ac:	445a      	add	r2, fp
 800a5ae:	f8de 0000 	ldr.w	r0, [lr]
 800a5b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5c0:	b292      	uxth	r2, r2
 800a5c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5c6:	45e1      	cmp	r9, ip
 800a5c8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5d0:	d2de      	bcs.n	800a590 <quorem+0x42>
 800a5d2:	9b00      	ldr	r3, [sp, #0]
 800a5d4:	58eb      	ldr	r3, [r5, r3]
 800a5d6:	b92b      	cbnz	r3, 800a5e4 <quorem+0x96>
 800a5d8:	9b01      	ldr	r3, [sp, #4]
 800a5da:	3b04      	subs	r3, #4
 800a5dc:	429d      	cmp	r5, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	d32f      	bcc.n	800a642 <quorem+0xf4>
 800a5e2:	613c      	str	r4, [r7, #16]
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f001 f8c3 	bl	800b770 <__mcmp>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	db25      	blt.n	800a63a <quorem+0xec>
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5f6:	f8d1 c000 	ldr.w	ip, [r1]
 800a5fa:	fa1f fe82 	uxth.w	lr, r2
 800a5fe:	fa1f f38c 	uxth.w	r3, ip
 800a602:	eba3 030e 	sub.w	r3, r3, lr
 800a606:	4403      	add	r3, r0
 800a608:	0c12      	lsrs	r2, r2, #16
 800a60a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a60e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a612:	b29b      	uxth	r3, r3
 800a614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a618:	45c1      	cmp	r9, r8
 800a61a:	f841 3b04 	str.w	r3, [r1], #4
 800a61e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a622:	d2e6      	bcs.n	800a5f2 <quorem+0xa4>
 800a624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a62c:	b922      	cbnz	r2, 800a638 <quorem+0xea>
 800a62e:	3b04      	subs	r3, #4
 800a630:	429d      	cmp	r5, r3
 800a632:	461a      	mov	r2, r3
 800a634:	d30b      	bcc.n	800a64e <quorem+0x100>
 800a636:	613c      	str	r4, [r7, #16]
 800a638:	3601      	adds	r6, #1
 800a63a:	4630      	mov	r0, r6
 800a63c:	b003      	add	sp, #12
 800a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a642:	6812      	ldr	r2, [r2, #0]
 800a644:	3b04      	subs	r3, #4
 800a646:	2a00      	cmp	r2, #0
 800a648:	d1cb      	bne.n	800a5e2 <quorem+0x94>
 800a64a:	3c01      	subs	r4, #1
 800a64c:	e7c6      	b.n	800a5dc <quorem+0x8e>
 800a64e:	6812      	ldr	r2, [r2, #0]
 800a650:	3b04      	subs	r3, #4
 800a652:	2a00      	cmp	r2, #0
 800a654:	d1ef      	bne.n	800a636 <quorem+0xe8>
 800a656:	3c01      	subs	r4, #1
 800a658:	e7ea      	b.n	800a630 <quorem+0xe2>
 800a65a:	2000      	movs	r0, #0
 800a65c:	e7ee      	b.n	800a63c <quorem+0xee>
	...

0800a660 <_dtoa_r>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	69c7      	ldr	r7, [r0, #28]
 800a666:	b099      	sub	sp, #100	@ 0x64
 800a668:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a66c:	ec55 4b10 	vmov	r4, r5, d0
 800a670:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a672:	9109      	str	r1, [sp, #36]	@ 0x24
 800a674:	4683      	mov	fp, r0
 800a676:	920e      	str	r2, [sp, #56]	@ 0x38
 800a678:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a67a:	b97f      	cbnz	r7, 800a69c <_dtoa_r+0x3c>
 800a67c:	2010      	movs	r0, #16
 800a67e:	f7ff f895 	bl	80097ac <malloc>
 800a682:	4602      	mov	r2, r0
 800a684:	f8cb 001c 	str.w	r0, [fp, #28]
 800a688:	b920      	cbnz	r0, 800a694 <_dtoa_r+0x34>
 800a68a:	4ba7      	ldr	r3, [pc, #668]	@ (800a928 <_dtoa_r+0x2c8>)
 800a68c:	21ef      	movs	r1, #239	@ 0xef
 800a68e:	48a7      	ldr	r0, [pc, #668]	@ (800a92c <_dtoa_r+0x2cc>)
 800a690:	f001 fba2 	bl	800bdd8 <__assert_func>
 800a694:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a698:	6007      	str	r7, [r0, #0]
 800a69a:	60c7      	str	r7, [r0, #12]
 800a69c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6a0:	6819      	ldr	r1, [r3, #0]
 800a6a2:	b159      	cbz	r1, 800a6bc <_dtoa_r+0x5c>
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	604a      	str	r2, [r1, #4]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4093      	lsls	r3, r2
 800a6ac:	608b      	str	r3, [r1, #8]
 800a6ae:	4658      	mov	r0, fp
 800a6b0:	f000 fe24 	bl	800b2fc <_Bfree>
 800a6b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	1e2b      	subs	r3, r5, #0
 800a6be:	bfb9      	ittee	lt
 800a6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6c4:	9303      	strlt	r3, [sp, #12]
 800a6c6:	2300      	movge	r3, #0
 800a6c8:	6033      	strge	r3, [r6, #0]
 800a6ca:	9f03      	ldr	r7, [sp, #12]
 800a6cc:	4b98      	ldr	r3, [pc, #608]	@ (800a930 <_dtoa_r+0x2d0>)
 800a6ce:	bfbc      	itt	lt
 800a6d0:	2201      	movlt	r2, #1
 800a6d2:	6032      	strlt	r2, [r6, #0]
 800a6d4:	43bb      	bics	r3, r7
 800a6d6:	d112      	bne.n	800a6fe <_dtoa_r+0x9e>
 800a6d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6e4:	4323      	orrs	r3, r4
 800a6e6:	f000 854d 	beq.w	800b184 <_dtoa_r+0xb24>
 800a6ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a944 <_dtoa_r+0x2e4>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 854f 	beq.w	800b194 <_dtoa_r+0xb34>
 800a6f6:	f10a 0303 	add.w	r3, sl, #3
 800a6fa:	f000 bd49 	b.w	800b190 <_dtoa_r+0xb30>
 800a6fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a702:	2200      	movs	r2, #0
 800a704:	ec51 0b17 	vmov	r0, r1, d7
 800a708:	2300      	movs	r3, #0
 800a70a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a70e:	f7f6 f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a712:	4680      	mov	r8, r0
 800a714:	b158      	cbz	r0, 800a72e <_dtoa_r+0xce>
 800a716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a718:	2301      	movs	r3, #1
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a71e:	b113      	cbz	r3, 800a726 <_dtoa_r+0xc6>
 800a720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a722:	4b84      	ldr	r3, [pc, #528]	@ (800a934 <_dtoa_r+0x2d4>)
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a948 <_dtoa_r+0x2e8>
 800a72a:	f000 bd33 	b.w	800b194 <_dtoa_r+0xb34>
 800a72e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a732:	aa16      	add	r2, sp, #88	@ 0x58
 800a734:	a917      	add	r1, sp, #92	@ 0x5c
 800a736:	4658      	mov	r0, fp
 800a738:	f001 f8ca 	bl	800b8d0 <__d2b>
 800a73c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a740:	4681      	mov	r9, r0
 800a742:	2e00      	cmp	r6, #0
 800a744:	d077      	beq.n	800a836 <_dtoa_r+0x1d6>
 800a746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a748:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a754:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a758:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a75c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a760:	4619      	mov	r1, r3
 800a762:	2200      	movs	r2, #0
 800a764:	4b74      	ldr	r3, [pc, #464]	@ (800a938 <_dtoa_r+0x2d8>)
 800a766:	f7f5 fd97 	bl	8000298 <__aeabi_dsub>
 800a76a:	a369      	add	r3, pc, #420	@ (adr r3, 800a910 <_dtoa_r+0x2b0>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 ff4a 	bl	8000608 <__aeabi_dmul>
 800a774:	a368      	add	r3, pc, #416	@ (adr r3, 800a918 <_dtoa_r+0x2b8>)
 800a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77a:	f7f5 fd8f 	bl	800029c <__adddf3>
 800a77e:	4604      	mov	r4, r0
 800a780:	4630      	mov	r0, r6
 800a782:	460d      	mov	r5, r1
 800a784:	f7f5 fed6 	bl	8000534 <__aeabi_i2d>
 800a788:	a365      	add	r3, pc, #404	@ (adr r3, 800a920 <_dtoa_r+0x2c0>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 ff3b 	bl	8000608 <__aeabi_dmul>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 fd7f 	bl	800029c <__adddf3>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	f7f6 f9e1 	bl	8000b68 <__aeabi_d2iz>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	f7f6 f99c 	bl	8000aec <__aeabi_dcmplt>
 800a7b4:	b140      	cbz	r0, 800a7c8 <_dtoa_r+0x168>
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	f7f5 febc 	bl	8000534 <__aeabi_i2d>
 800a7bc:	4622      	mov	r2, r4
 800a7be:	462b      	mov	r3, r5
 800a7c0:	f7f6 f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7c4:	b900      	cbnz	r0, 800a7c8 <_dtoa_r+0x168>
 800a7c6:	3f01      	subs	r7, #1
 800a7c8:	2f16      	cmp	r7, #22
 800a7ca:	d851      	bhi.n	800a870 <_dtoa_r+0x210>
 800a7cc:	4b5b      	ldr	r3, [pc, #364]	@ (800a93c <_dtoa_r+0x2dc>)
 800a7ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7da:	f7f6 f987 	bl	8000aec <__aeabi_dcmplt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d048      	beq.n	800a874 <_dtoa_r+0x214>
 800a7e2:	3f01      	subs	r7, #1
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a7ea:	1b9b      	subs	r3, r3, r6
 800a7ec:	1e5a      	subs	r2, r3, #1
 800a7ee:	bf44      	itt	mi
 800a7f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a7f4:	2300      	movmi	r3, #0
 800a7f6:	9208      	str	r2, [sp, #32]
 800a7f8:	bf54      	ite	pl
 800a7fa:	f04f 0800 	movpl.w	r8, #0
 800a7fe:	9308      	strmi	r3, [sp, #32]
 800a800:	2f00      	cmp	r7, #0
 800a802:	db39      	blt.n	800a878 <_dtoa_r+0x218>
 800a804:	9b08      	ldr	r3, [sp, #32]
 800a806:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a808:	443b      	add	r3, r7
 800a80a:	9308      	str	r3, [sp, #32]
 800a80c:	2300      	movs	r3, #0
 800a80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a812:	2b09      	cmp	r3, #9
 800a814:	d864      	bhi.n	800a8e0 <_dtoa_r+0x280>
 800a816:	2b05      	cmp	r3, #5
 800a818:	bfc4      	itt	gt
 800a81a:	3b04      	subgt	r3, #4
 800a81c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a820:	f1a3 0302 	sub.w	r3, r3, #2
 800a824:	bfcc      	ite	gt
 800a826:	2400      	movgt	r4, #0
 800a828:	2401      	movle	r4, #1
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d863      	bhi.n	800a8f6 <_dtoa_r+0x296>
 800a82e:	e8df f003 	tbb	[pc, r3]
 800a832:	372a      	.short	0x372a
 800a834:	5535      	.short	0x5535
 800a836:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a83a:	441e      	add	r6, r3
 800a83c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a840:	2b20      	cmp	r3, #32
 800a842:	bfc1      	itttt	gt
 800a844:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a848:	409f      	lslgt	r7, r3
 800a84a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a84e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a852:	bfd6      	itet	le
 800a854:	f1c3 0320 	rsble	r3, r3, #32
 800a858:	ea47 0003 	orrgt.w	r0, r7, r3
 800a85c:	fa04 f003 	lslle.w	r0, r4, r3
 800a860:	f7f5 fe58 	bl	8000514 <__aeabi_ui2d>
 800a864:	2201      	movs	r2, #1
 800a866:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a86a:	3e01      	subs	r6, #1
 800a86c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a86e:	e777      	b.n	800a760 <_dtoa_r+0x100>
 800a870:	2301      	movs	r3, #1
 800a872:	e7b8      	b.n	800a7e6 <_dtoa_r+0x186>
 800a874:	9012      	str	r0, [sp, #72]	@ 0x48
 800a876:	e7b7      	b.n	800a7e8 <_dtoa_r+0x188>
 800a878:	427b      	negs	r3, r7
 800a87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a87c:	2300      	movs	r3, #0
 800a87e:	eba8 0807 	sub.w	r8, r8, r7
 800a882:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a884:	e7c4      	b.n	800a810 <_dtoa_r+0x1b0>
 800a886:	2300      	movs	r3, #0
 800a888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc35      	bgt.n	800a8fc <_dtoa_r+0x29c>
 800a890:	2301      	movs	r3, #1
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	9307      	str	r3, [sp, #28]
 800a896:	461a      	mov	r2, r3
 800a898:	920e      	str	r2, [sp, #56]	@ 0x38
 800a89a:	e00b      	b.n	800a8b4 <_dtoa_r+0x254>
 800a89c:	2301      	movs	r3, #1
 800a89e:	e7f3      	b.n	800a888 <_dtoa_r+0x228>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8a6:	18fb      	adds	r3, r7, r3
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	9307      	str	r3, [sp, #28]
 800a8b0:	bfb8      	it	lt
 800a8b2:	2301      	movlt	r3, #1
 800a8b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	2204      	movs	r2, #4
 800a8bc:	f102 0514 	add.w	r5, r2, #20
 800a8c0:	429d      	cmp	r5, r3
 800a8c2:	d91f      	bls.n	800a904 <_dtoa_r+0x2a4>
 800a8c4:	6041      	str	r1, [r0, #4]
 800a8c6:	4658      	mov	r0, fp
 800a8c8:	f000 fcd8 	bl	800b27c <_Balloc>
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d13c      	bne.n	800a94c <_dtoa_r+0x2ec>
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a940 <_dtoa_r+0x2e0>)
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8da:	e6d8      	b.n	800a68e <_dtoa_r+0x2e>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e7e0      	b.n	800a8a2 <_dtoa_r+0x242>
 800a8e0:	2401      	movs	r4, #1
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2312      	movs	r3, #18
 800a8f4:	e7d0      	b.n	800a898 <_dtoa_r+0x238>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8fa:	e7f5      	b.n	800a8e8 <_dtoa_r+0x288>
 800a8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	9307      	str	r3, [sp, #28]
 800a902:	e7d7      	b.n	800a8b4 <_dtoa_r+0x254>
 800a904:	3101      	adds	r1, #1
 800a906:	0052      	lsls	r2, r2, #1
 800a908:	e7d8      	b.n	800a8bc <_dtoa_r+0x25c>
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w
 800a910:	636f4361 	.word	0x636f4361
 800a914:	3fd287a7 	.word	0x3fd287a7
 800a918:	8b60c8b3 	.word	0x8b60c8b3
 800a91c:	3fc68a28 	.word	0x3fc68a28
 800a920:	509f79fb 	.word	0x509f79fb
 800a924:	3fd34413 	.word	0x3fd34413
 800a928:	0800c521 	.word	0x0800c521
 800a92c:	0800c538 	.word	0x0800c538
 800a930:	7ff00000 	.word	0x7ff00000
 800a934:	0800c4f1 	.word	0x0800c4f1
 800a938:	3ff80000 	.word	0x3ff80000
 800a93c:	0800c630 	.word	0x0800c630
 800a940:	0800c590 	.word	0x0800c590
 800a944:	0800c51d 	.word	0x0800c51d
 800a948:	0800c4f0 	.word	0x0800c4f0
 800a94c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a950:	6018      	str	r0, [r3, #0]
 800a952:	9b07      	ldr	r3, [sp, #28]
 800a954:	2b0e      	cmp	r3, #14
 800a956:	f200 80a4 	bhi.w	800aaa2 <_dtoa_r+0x442>
 800a95a:	2c00      	cmp	r4, #0
 800a95c:	f000 80a1 	beq.w	800aaa2 <_dtoa_r+0x442>
 800a960:	2f00      	cmp	r7, #0
 800a962:	dd33      	ble.n	800a9cc <_dtoa_r+0x36c>
 800a964:	4bad      	ldr	r3, [pc, #692]	@ (800ac1c <_dtoa_r+0x5bc>)
 800a966:	f007 020f 	and.w	r2, r7, #15
 800a96a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a96e:	ed93 7b00 	vldr	d7, [r3]
 800a972:	05f8      	lsls	r0, r7, #23
 800a974:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a97c:	d516      	bpl.n	800a9ac <_dtoa_r+0x34c>
 800a97e:	4ba8      	ldr	r3, [pc, #672]	@ (800ac20 <_dtoa_r+0x5c0>)
 800a980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a988:	f7f5 ff68 	bl	800085c <__aeabi_ddiv>
 800a98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a990:	f004 040f 	and.w	r4, r4, #15
 800a994:	2603      	movs	r6, #3
 800a996:	4da2      	ldr	r5, [pc, #648]	@ (800ac20 <_dtoa_r+0x5c0>)
 800a998:	b954      	cbnz	r4, 800a9b0 <_dtoa_r+0x350>
 800a99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9a2:	f7f5 ff5b 	bl	800085c <__aeabi_ddiv>
 800a9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9aa:	e028      	b.n	800a9fe <_dtoa_r+0x39e>
 800a9ac:	2602      	movs	r6, #2
 800a9ae:	e7f2      	b.n	800a996 <_dtoa_r+0x336>
 800a9b0:	07e1      	lsls	r1, r4, #31
 800a9b2:	d508      	bpl.n	800a9c6 <_dtoa_r+0x366>
 800a9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9bc:	f7f5 fe24 	bl	8000608 <__aeabi_dmul>
 800a9c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	1064      	asrs	r4, r4, #1
 800a9c8:	3508      	adds	r5, #8
 800a9ca:	e7e5      	b.n	800a998 <_dtoa_r+0x338>
 800a9cc:	f000 80d2 	beq.w	800ab74 <_dtoa_r+0x514>
 800a9d0:	427c      	negs	r4, r7
 800a9d2:	4b92      	ldr	r3, [pc, #584]	@ (800ac1c <_dtoa_r+0x5bc>)
 800a9d4:	4d92      	ldr	r5, [pc, #584]	@ (800ac20 <_dtoa_r+0x5c0>)
 800a9d6:	f004 020f 	and.w	r2, r4, #15
 800a9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9e6:	f7f5 fe0f 	bl	8000608 <__aeabi_dmul>
 800a9ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ee:	1124      	asrs	r4, r4, #4
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	2602      	movs	r6, #2
 800a9f4:	2c00      	cmp	r4, #0
 800a9f6:	f040 80b2 	bne.w	800ab5e <_dtoa_r+0x4fe>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1d3      	bne.n	800a9a6 <_dtoa_r+0x346>
 800a9fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80b7 	beq.w	800ab78 <_dtoa_r+0x518>
 800aa0a:	4b86      	ldr	r3, [pc, #536]	@ (800ac24 <_dtoa_r+0x5c4>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7f6 f86b 	bl	8000aec <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	f000 80ae 	beq.w	800ab78 <_dtoa_r+0x518>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 80aa 	beq.w	800ab78 <_dtoa_r+0x518>
 800aa24:	9b00      	ldr	r3, [sp, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dd37      	ble.n	800aa9a <_dtoa_r+0x43a>
 800aa2a:	1e7b      	subs	r3, r7, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4b7d      	ldr	r3, [pc, #500]	@ (800ac28 <_dtoa_r+0x5c8>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	4629      	mov	r1, r5
 800aa36:	f7f5 fde7 	bl	8000608 <__aeabi_dmul>
 800aa3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa3e:	9c00      	ldr	r4, [sp, #0]
 800aa40:	3601      	adds	r6, #1
 800aa42:	4630      	mov	r0, r6
 800aa44:	f7f5 fd76 	bl	8000534 <__aeabi_i2d>
 800aa48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa4c:	f7f5 fddc 	bl	8000608 <__aeabi_dmul>
 800aa50:	4b76      	ldr	r3, [pc, #472]	@ (800ac2c <_dtoa_r+0x5cc>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	f7f5 fc22 	bl	800029c <__adddf3>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	f040 808d 	bne.w	800ab7e <_dtoa_r+0x51e>
 800aa64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa68:	4b71      	ldr	r3, [pc, #452]	@ (800ac30 <_dtoa_r+0x5d0>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f7f5 fc14 	bl	8000298 <__aeabi_dsub>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa78:	462a      	mov	r2, r5
 800aa7a:	4633      	mov	r3, r6
 800aa7c:	f7f6 f854 	bl	8000b28 <__aeabi_dcmpgt>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f040 828b 	bne.w	800af9c <_dtoa_r+0x93c>
 800aa86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa90:	f7f6 f82c 	bl	8000aec <__aeabi_dcmplt>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f040 8128 	bne.w	800acea <_dtoa_r+0x68a>
 800aa9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aaa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f2c0 815a 	blt.w	800ad5e <_dtoa_r+0x6fe>
 800aaaa:	2f0e      	cmp	r7, #14
 800aaac:	f300 8157 	bgt.w	800ad5e <_dtoa_r+0x6fe>
 800aab0:	4b5a      	ldr	r3, [pc, #360]	@ (800ac1c <_dtoa_r+0x5bc>)
 800aab2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aab6:	ed93 7b00 	vldr	d7, [r3]
 800aaba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	ed8d 7b00 	vstr	d7, [sp]
 800aac2:	da03      	bge.n	800aacc <_dtoa_r+0x46c>
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f340 8101 	ble.w	800acce <_dtoa_r+0x66e>
 800aacc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aad0:	4656      	mov	r6, sl
 800aad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f5 febf 	bl	800085c <__aeabi_ddiv>
 800aade:	f7f6 f843 	bl	8000b68 <__aeabi_d2iz>
 800aae2:	4680      	mov	r8, r0
 800aae4:	f7f5 fd26 	bl	8000534 <__aeabi_i2d>
 800aae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaec:	f7f5 fd8c 	bl	8000608 <__aeabi_dmul>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aafc:	f7f5 fbcc 	bl	8000298 <__aeabi_dsub>
 800ab00:	f806 4b01 	strb.w	r4, [r6], #1
 800ab04:	9d07      	ldr	r5, [sp, #28]
 800ab06:	eba6 040a 	sub.w	r4, r6, sl
 800ab0a:	42a5      	cmp	r5, r4
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	f040 8117 	bne.w	800ad42 <_dtoa_r+0x6e2>
 800ab14:	f7f5 fbc2 	bl	800029c <__adddf3>
 800ab18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	f7f6 f802 	bl	8000b28 <__aeabi_dcmpgt>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f040 80f9 	bne.w	800ad1c <_dtoa_r+0x6bc>
 800ab2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	4629      	mov	r1, r5
 800ab32:	f7f5 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab36:	b118      	cbz	r0, 800ab40 <_dtoa_r+0x4e0>
 800ab38:	f018 0f01 	tst.w	r8, #1
 800ab3c:	f040 80ee 	bne.w	800ad1c <_dtoa_r+0x6bc>
 800ab40:	4649      	mov	r1, r9
 800ab42:	4658      	mov	r0, fp
 800ab44:	f000 fbda 	bl	800b2fc <_Bfree>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	7033      	strb	r3, [r6, #0]
 800ab4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab4e:	3701      	adds	r7, #1
 800ab50:	601f      	str	r7, [r3, #0]
 800ab52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 831d 	beq.w	800b194 <_dtoa_r+0xb34>
 800ab5a:	601e      	str	r6, [r3, #0]
 800ab5c:	e31a      	b.n	800b194 <_dtoa_r+0xb34>
 800ab5e:	07e2      	lsls	r2, r4, #31
 800ab60:	d505      	bpl.n	800ab6e <_dtoa_r+0x50e>
 800ab62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab66:	f7f5 fd4f 	bl	8000608 <__aeabi_dmul>
 800ab6a:	3601      	adds	r6, #1
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	1064      	asrs	r4, r4, #1
 800ab70:	3508      	adds	r5, #8
 800ab72:	e73f      	b.n	800a9f4 <_dtoa_r+0x394>
 800ab74:	2602      	movs	r6, #2
 800ab76:	e742      	b.n	800a9fe <_dtoa_r+0x39e>
 800ab78:	9c07      	ldr	r4, [sp, #28]
 800ab7a:	9704      	str	r7, [sp, #16]
 800ab7c:	e761      	b.n	800aa42 <_dtoa_r+0x3e2>
 800ab7e:	4b27      	ldr	r3, [pc, #156]	@ (800ac1c <_dtoa_r+0x5bc>)
 800ab80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab8a:	4454      	add	r4, sl
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	d053      	beq.n	800ac38 <_dtoa_r+0x5d8>
 800ab90:	4928      	ldr	r1, [pc, #160]	@ (800ac34 <_dtoa_r+0x5d4>)
 800ab92:	2000      	movs	r0, #0
 800ab94:	f7f5 fe62 	bl	800085c <__aeabi_ddiv>
 800ab98:	4633      	mov	r3, r6
 800ab9a:	462a      	mov	r2, r5
 800ab9c:	f7f5 fb7c 	bl	8000298 <__aeabi_dsub>
 800aba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aba4:	4656      	mov	r6, sl
 800aba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abaa:	f7f5 ffdd 	bl	8000b68 <__aeabi_d2iz>
 800abae:	4605      	mov	r5, r0
 800abb0:	f7f5 fcc0 	bl	8000534 <__aeabi_i2d>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abbc:	f7f5 fb6c 	bl	8000298 <__aeabi_dsub>
 800abc0:	3530      	adds	r5, #48	@ 0x30
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abca:	f806 5b01 	strb.w	r5, [r6], #1
 800abce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abd2:	f7f5 ff8b 	bl	8000aec <__aeabi_dcmplt>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d171      	bne.n	800acbe <_dtoa_r+0x65e>
 800abda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abde:	4911      	ldr	r1, [pc, #68]	@ (800ac24 <_dtoa_r+0x5c4>)
 800abe0:	2000      	movs	r0, #0
 800abe2:	f7f5 fb59 	bl	8000298 <__aeabi_dsub>
 800abe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abea:	f7f5 ff7f 	bl	8000aec <__aeabi_dcmplt>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f040 8095 	bne.w	800ad1e <_dtoa_r+0x6be>
 800abf4:	42a6      	cmp	r6, r4
 800abf6:	f43f af50 	beq.w	800aa9a <_dtoa_r+0x43a>
 800abfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800abfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <_dtoa_r+0x5c8>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fd01 	bl	8000608 <__aeabi_dmul>
 800ac06:	4b08      	ldr	r3, [pc, #32]	@ (800ac28 <_dtoa_r+0x5c8>)
 800ac08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac12:	f7f5 fcf9 	bl	8000608 <__aeabi_dmul>
 800ac16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac1a:	e7c4      	b.n	800aba6 <_dtoa_r+0x546>
 800ac1c:	0800c630 	.word	0x0800c630
 800ac20:	0800c608 	.word	0x0800c608
 800ac24:	3ff00000 	.word	0x3ff00000
 800ac28:	40240000 	.word	0x40240000
 800ac2c:	401c0000 	.word	0x401c0000
 800ac30:	40140000 	.word	0x40140000
 800ac34:	3fe00000 	.word	0x3fe00000
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f7f5 fce4 	bl	8000608 <__aeabi_dmul>
 800ac40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac44:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac46:	4656      	mov	r6, sl
 800ac48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac4c:	f7f5 ff8c 	bl	8000b68 <__aeabi_d2iz>
 800ac50:	4605      	mov	r5, r0
 800ac52:	f7f5 fc6f 	bl	8000534 <__aeabi_i2d>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac5e:	f7f5 fb1b 	bl	8000298 <__aeabi_dsub>
 800ac62:	3530      	adds	r5, #48	@ 0x30
 800ac64:	f806 5b01 	strb.w	r5, [r6], #1
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	42a6      	cmp	r6, r4
 800ac6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac72:	f04f 0200 	mov.w	r2, #0
 800ac76:	d124      	bne.n	800acc2 <_dtoa_r+0x662>
 800ac78:	4bac      	ldr	r3, [pc, #688]	@ (800af2c <_dtoa_r+0x8cc>)
 800ac7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac7e:	f7f5 fb0d 	bl	800029c <__adddf3>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8a:	f7f5 ff4d 	bl	8000b28 <__aeabi_dcmpgt>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d145      	bne.n	800ad1e <_dtoa_r+0x6be>
 800ac92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac96:	49a5      	ldr	r1, [pc, #660]	@ (800af2c <_dtoa_r+0x8cc>)
 800ac98:	2000      	movs	r0, #0
 800ac9a:	f7f5 fafd 	bl	8000298 <__aeabi_dsub>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca6:	f7f5 ff21 	bl	8000aec <__aeabi_dcmplt>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f aef5 	beq.w	800aa9a <_dtoa_r+0x43a>
 800acb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800acb2:	1e73      	subs	r3, r6, #1
 800acb4:	9315      	str	r3, [sp, #84]	@ 0x54
 800acb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acba:	2b30      	cmp	r3, #48	@ 0x30
 800acbc:	d0f8      	beq.n	800acb0 <_dtoa_r+0x650>
 800acbe:	9f04      	ldr	r7, [sp, #16]
 800acc0:	e73e      	b.n	800ab40 <_dtoa_r+0x4e0>
 800acc2:	4b9b      	ldr	r3, [pc, #620]	@ (800af30 <_dtoa_r+0x8d0>)
 800acc4:	f7f5 fca0 	bl	8000608 <__aeabi_dmul>
 800acc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800accc:	e7bc      	b.n	800ac48 <_dtoa_r+0x5e8>
 800acce:	d10c      	bne.n	800acea <_dtoa_r+0x68a>
 800acd0:	4b98      	ldr	r3, [pc, #608]	@ (800af34 <_dtoa_r+0x8d4>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acd8:	f7f5 fc96 	bl	8000608 <__aeabi_dmul>
 800acdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ace0:	f7f5 ff18 	bl	8000b14 <__aeabi_dcmpge>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f000 8157 	beq.w	800af98 <_dtoa_r+0x938>
 800acea:	2400      	movs	r4, #0
 800acec:	4625      	mov	r5, r4
 800acee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf0:	43db      	mvns	r3, r3
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	4656      	mov	r6, sl
 800acf6:	2700      	movs	r7, #0
 800acf8:	4621      	mov	r1, r4
 800acfa:	4658      	mov	r0, fp
 800acfc:	f000 fafe 	bl	800b2fc <_Bfree>
 800ad00:	2d00      	cmp	r5, #0
 800ad02:	d0dc      	beq.n	800acbe <_dtoa_r+0x65e>
 800ad04:	b12f      	cbz	r7, 800ad12 <_dtoa_r+0x6b2>
 800ad06:	42af      	cmp	r7, r5
 800ad08:	d003      	beq.n	800ad12 <_dtoa_r+0x6b2>
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	4658      	mov	r0, fp
 800ad0e:	f000 faf5 	bl	800b2fc <_Bfree>
 800ad12:	4629      	mov	r1, r5
 800ad14:	4658      	mov	r0, fp
 800ad16:	f000 faf1 	bl	800b2fc <_Bfree>
 800ad1a:	e7d0      	b.n	800acbe <_dtoa_r+0x65e>
 800ad1c:	9704      	str	r7, [sp, #16]
 800ad1e:	4633      	mov	r3, r6
 800ad20:	461e      	mov	r6, r3
 800ad22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad26:	2a39      	cmp	r2, #57	@ 0x39
 800ad28:	d107      	bne.n	800ad3a <_dtoa_r+0x6da>
 800ad2a:	459a      	cmp	sl, r3
 800ad2c:	d1f8      	bne.n	800ad20 <_dtoa_r+0x6c0>
 800ad2e:	9a04      	ldr	r2, [sp, #16]
 800ad30:	3201      	adds	r2, #1
 800ad32:	9204      	str	r2, [sp, #16]
 800ad34:	2230      	movs	r2, #48	@ 0x30
 800ad36:	f88a 2000 	strb.w	r2, [sl]
 800ad3a:	781a      	ldrb	r2, [r3, #0]
 800ad3c:	3201      	adds	r2, #1
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e7bd      	b.n	800acbe <_dtoa_r+0x65e>
 800ad42:	4b7b      	ldr	r3, [pc, #492]	@ (800af30 <_dtoa_r+0x8d0>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	f7f5 fc5f 	bl	8000608 <__aeabi_dmul>
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	f7f5 fec1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f43f aebb 	beq.w	800aad2 <_dtoa_r+0x472>
 800ad5c:	e6f0      	b.n	800ab40 <_dtoa_r+0x4e0>
 800ad5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	f000 80db 	beq.w	800af1c <_dtoa_r+0x8bc>
 800ad66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad68:	2a01      	cmp	r2, #1
 800ad6a:	f300 80bf 	bgt.w	800aeec <_dtoa_r+0x88c>
 800ad6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	f000 80b7 	beq.w	800aee4 <_dtoa_r+0x884>
 800ad76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad7c:	4646      	mov	r6, r8
 800ad7e:	9a08      	ldr	r2, [sp, #32]
 800ad80:	2101      	movs	r1, #1
 800ad82:	441a      	add	r2, r3
 800ad84:	4658      	mov	r0, fp
 800ad86:	4498      	add	r8, r3
 800ad88:	9208      	str	r2, [sp, #32]
 800ad8a:	f000 fb6b 	bl	800b464 <__i2b>
 800ad8e:	4605      	mov	r5, r0
 800ad90:	b15e      	cbz	r6, 800adaa <_dtoa_r+0x74a>
 800ad92:	9b08      	ldr	r3, [sp, #32]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dd08      	ble.n	800adaa <_dtoa_r+0x74a>
 800ad98:	42b3      	cmp	r3, r6
 800ad9a:	9a08      	ldr	r2, [sp, #32]
 800ad9c:	bfa8      	it	ge
 800ad9e:	4633      	movge	r3, r6
 800ada0:	eba8 0803 	sub.w	r8, r8, r3
 800ada4:	1af6      	subs	r6, r6, r3
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	9308      	str	r3, [sp, #32]
 800adaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adac:	b1f3      	cbz	r3, 800adec <_dtoa_r+0x78c>
 800adae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 80b7 	beq.w	800af24 <_dtoa_r+0x8c4>
 800adb6:	b18c      	cbz	r4, 800addc <_dtoa_r+0x77c>
 800adb8:	4629      	mov	r1, r5
 800adba:	4622      	mov	r2, r4
 800adbc:	4658      	mov	r0, fp
 800adbe:	f000 fc11 	bl	800b5e4 <__pow5mult>
 800adc2:	464a      	mov	r2, r9
 800adc4:	4601      	mov	r1, r0
 800adc6:	4605      	mov	r5, r0
 800adc8:	4658      	mov	r0, fp
 800adca:	f000 fb61 	bl	800b490 <__multiply>
 800adce:	4649      	mov	r1, r9
 800add0:	9004      	str	r0, [sp, #16]
 800add2:	4658      	mov	r0, fp
 800add4:	f000 fa92 	bl	800b2fc <_Bfree>
 800add8:	9b04      	ldr	r3, [sp, #16]
 800adda:	4699      	mov	r9, r3
 800addc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adde:	1b1a      	subs	r2, r3, r4
 800ade0:	d004      	beq.n	800adec <_dtoa_r+0x78c>
 800ade2:	4649      	mov	r1, r9
 800ade4:	4658      	mov	r0, fp
 800ade6:	f000 fbfd 	bl	800b5e4 <__pow5mult>
 800adea:	4681      	mov	r9, r0
 800adec:	2101      	movs	r1, #1
 800adee:	4658      	mov	r0, fp
 800adf0:	f000 fb38 	bl	800b464 <__i2b>
 800adf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adf6:	4604      	mov	r4, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 81cf 	beq.w	800b19c <_dtoa_r+0xb3c>
 800adfe:	461a      	mov	r2, r3
 800ae00:	4601      	mov	r1, r0
 800ae02:	4658      	mov	r0, fp
 800ae04:	f000 fbee 	bl	800b5e4 <__pow5mult>
 800ae08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	f300 8095 	bgt.w	800af3c <_dtoa_r+0x8dc>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f040 8087 	bne.w	800af28 <_dtoa_r+0x8c8>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 8089 	bne.w	800af38 <_dtoa_r+0x8d8>
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae2c:	0d1b      	lsrs	r3, r3, #20
 800ae2e:	051b      	lsls	r3, r3, #20
 800ae30:	b12b      	cbz	r3, 800ae3e <_dtoa_r+0x7de>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	3301      	adds	r3, #1
 800ae36:	9308      	str	r3, [sp, #32]
 800ae38:	f108 0801 	add.w	r8, r8, #1
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 81b0 	beq.w	800b1a8 <_dtoa_r+0xb48>
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae4e:	6918      	ldr	r0, [r3, #16]
 800ae50:	f000 fabc 	bl	800b3cc <__hi0bits>
 800ae54:	f1c0 0020 	rsb	r0, r0, #32
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	4418      	add	r0, r3
 800ae5c:	f010 001f 	ands.w	r0, r0, #31
 800ae60:	d077      	beq.n	800af52 <_dtoa_r+0x8f2>
 800ae62:	f1c0 0320 	rsb	r3, r0, #32
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	dd6b      	ble.n	800af42 <_dtoa_r+0x8e2>
 800ae6a:	9b08      	ldr	r3, [sp, #32]
 800ae6c:	f1c0 001c 	rsb	r0, r0, #28
 800ae70:	4403      	add	r3, r0
 800ae72:	4480      	add	r8, r0
 800ae74:	4406      	add	r6, r0
 800ae76:	9308      	str	r3, [sp, #32]
 800ae78:	f1b8 0f00 	cmp.w	r8, #0
 800ae7c:	dd05      	ble.n	800ae8a <_dtoa_r+0x82a>
 800ae7e:	4649      	mov	r1, r9
 800ae80:	4642      	mov	r2, r8
 800ae82:	4658      	mov	r0, fp
 800ae84:	f000 fc08 	bl	800b698 <__lshift>
 800ae88:	4681      	mov	r9, r0
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dd05      	ble.n	800ae9c <_dtoa_r+0x83c>
 800ae90:	4621      	mov	r1, r4
 800ae92:	461a      	mov	r2, r3
 800ae94:	4658      	mov	r0, fp
 800ae96:	f000 fbff 	bl	800b698 <__lshift>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d059      	beq.n	800af56 <_dtoa_r+0x8f6>
 800aea2:	4621      	mov	r1, r4
 800aea4:	4648      	mov	r0, r9
 800aea6:	f000 fc63 	bl	800b770 <__mcmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	da53      	bge.n	800af56 <_dtoa_r+0x8f6>
 800aeae:	1e7b      	subs	r3, r7, #1
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	220a      	movs	r2, #10
 800aeb8:	4658      	mov	r0, fp
 800aeba:	f000 fa41 	bl	800b340 <__multadd>
 800aebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aec0:	4681      	mov	r9, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8172 	beq.w	800b1ac <_dtoa_r+0xb4c>
 800aec8:	2300      	movs	r3, #0
 800aeca:	4629      	mov	r1, r5
 800aecc:	220a      	movs	r2, #10
 800aece:	4658      	mov	r0, fp
 800aed0:	f000 fa36 	bl	800b340 <__multadd>
 800aed4:	9b00      	ldr	r3, [sp, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	4605      	mov	r5, r0
 800aeda:	dc67      	bgt.n	800afac <_dtoa_r+0x94c>
 800aedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aede:	2b02      	cmp	r3, #2
 800aee0:	dc41      	bgt.n	800af66 <_dtoa_r+0x906>
 800aee2:	e063      	b.n	800afac <_dtoa_r+0x94c>
 800aee4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aee6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aeea:	e746      	b.n	800ad7a <_dtoa_r+0x71a>
 800aeec:	9b07      	ldr	r3, [sp, #28]
 800aeee:	1e5c      	subs	r4, r3, #1
 800aef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aef2:	42a3      	cmp	r3, r4
 800aef4:	bfbf      	itttt	lt
 800aef6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aef8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aefa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aefc:	1ae3      	sublt	r3, r4, r3
 800aefe:	bfb4      	ite	lt
 800af00:	18d2      	addlt	r2, r2, r3
 800af02:	1b1c      	subge	r4, r3, r4
 800af04:	9b07      	ldr	r3, [sp, #28]
 800af06:	bfbc      	itt	lt
 800af08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af0a:	2400      	movlt	r4, #0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bfb5      	itete	lt
 800af10:	eba8 0603 	sublt.w	r6, r8, r3
 800af14:	9b07      	ldrge	r3, [sp, #28]
 800af16:	2300      	movlt	r3, #0
 800af18:	4646      	movge	r6, r8
 800af1a:	e730      	b.n	800ad7e <_dtoa_r+0x71e>
 800af1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af20:	4646      	mov	r6, r8
 800af22:	e735      	b.n	800ad90 <_dtoa_r+0x730>
 800af24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af26:	e75c      	b.n	800ade2 <_dtoa_r+0x782>
 800af28:	2300      	movs	r3, #0
 800af2a:	e788      	b.n	800ae3e <_dtoa_r+0x7de>
 800af2c:	3fe00000 	.word	0x3fe00000
 800af30:	40240000 	.word	0x40240000
 800af34:	40140000 	.word	0x40140000
 800af38:	9b02      	ldr	r3, [sp, #8]
 800af3a:	e780      	b.n	800ae3e <_dtoa_r+0x7de>
 800af3c:	2300      	movs	r3, #0
 800af3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af40:	e782      	b.n	800ae48 <_dtoa_r+0x7e8>
 800af42:	d099      	beq.n	800ae78 <_dtoa_r+0x818>
 800af44:	9a08      	ldr	r2, [sp, #32]
 800af46:	331c      	adds	r3, #28
 800af48:	441a      	add	r2, r3
 800af4a:	4498      	add	r8, r3
 800af4c:	441e      	add	r6, r3
 800af4e:	9208      	str	r2, [sp, #32]
 800af50:	e792      	b.n	800ae78 <_dtoa_r+0x818>
 800af52:	4603      	mov	r3, r0
 800af54:	e7f6      	b.n	800af44 <_dtoa_r+0x8e4>
 800af56:	9b07      	ldr	r3, [sp, #28]
 800af58:	9704      	str	r7, [sp, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dc20      	bgt.n	800afa0 <_dtoa_r+0x940>
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af62:	2b02      	cmp	r3, #2
 800af64:	dd1e      	ble.n	800afa4 <_dtoa_r+0x944>
 800af66:	9b00      	ldr	r3, [sp, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f47f aec0 	bne.w	800acee <_dtoa_r+0x68e>
 800af6e:	4621      	mov	r1, r4
 800af70:	2205      	movs	r2, #5
 800af72:	4658      	mov	r0, fp
 800af74:	f000 f9e4 	bl	800b340 <__multadd>
 800af78:	4601      	mov	r1, r0
 800af7a:	4604      	mov	r4, r0
 800af7c:	4648      	mov	r0, r9
 800af7e:	f000 fbf7 	bl	800b770 <__mcmp>
 800af82:	2800      	cmp	r0, #0
 800af84:	f77f aeb3 	ble.w	800acee <_dtoa_r+0x68e>
 800af88:	4656      	mov	r6, sl
 800af8a:	2331      	movs	r3, #49	@ 0x31
 800af8c:	f806 3b01 	strb.w	r3, [r6], #1
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	3301      	adds	r3, #1
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	e6ae      	b.n	800acf6 <_dtoa_r+0x696>
 800af98:	9c07      	ldr	r4, [sp, #28]
 800af9a:	9704      	str	r7, [sp, #16]
 800af9c:	4625      	mov	r5, r4
 800af9e:	e7f3      	b.n	800af88 <_dtoa_r+0x928>
 800afa0:	9b07      	ldr	r3, [sp, #28]
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 8104 	beq.w	800b1b4 <_dtoa_r+0xb54>
 800afac:	2e00      	cmp	r6, #0
 800afae:	dd05      	ble.n	800afbc <_dtoa_r+0x95c>
 800afb0:	4629      	mov	r1, r5
 800afb2:	4632      	mov	r2, r6
 800afb4:	4658      	mov	r0, fp
 800afb6:	f000 fb6f 	bl	800b698 <__lshift>
 800afba:	4605      	mov	r5, r0
 800afbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d05a      	beq.n	800b078 <_dtoa_r+0xa18>
 800afc2:	6869      	ldr	r1, [r5, #4]
 800afc4:	4658      	mov	r0, fp
 800afc6:	f000 f959 	bl	800b27c <_Balloc>
 800afca:	4606      	mov	r6, r0
 800afcc:	b928      	cbnz	r0, 800afda <_dtoa_r+0x97a>
 800afce:	4b84      	ldr	r3, [pc, #528]	@ (800b1e0 <_dtoa_r+0xb80>)
 800afd0:	4602      	mov	r2, r0
 800afd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800afd6:	f7ff bb5a 	b.w	800a68e <_dtoa_r+0x2e>
 800afda:	692a      	ldr	r2, [r5, #16]
 800afdc:	3202      	adds	r2, #2
 800afde:	0092      	lsls	r2, r2, #2
 800afe0:	f105 010c 	add.w	r1, r5, #12
 800afe4:	300c      	adds	r0, #12
 800afe6:	f000 fee9 	bl	800bdbc <memcpy>
 800afea:	2201      	movs	r2, #1
 800afec:	4631      	mov	r1, r6
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 fb52 	bl	800b698 <__lshift>
 800aff4:	f10a 0301 	add.w	r3, sl, #1
 800aff8:	9307      	str	r3, [sp, #28]
 800affa:	9b00      	ldr	r3, [sp, #0]
 800affc:	4453      	add	r3, sl
 800affe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	462f      	mov	r7, r5
 800b008:	930a      	str	r3, [sp, #40]	@ 0x28
 800b00a:	4605      	mov	r5, r0
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	4621      	mov	r1, r4
 800b010:	3b01      	subs	r3, #1
 800b012:	4648      	mov	r0, r9
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	f7ff fa9a 	bl	800a54e <quorem>
 800b01a:	4639      	mov	r1, r7
 800b01c:	9002      	str	r0, [sp, #8]
 800b01e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b022:	4648      	mov	r0, r9
 800b024:	f000 fba4 	bl	800b770 <__mcmp>
 800b028:	462a      	mov	r2, r5
 800b02a:	9008      	str	r0, [sp, #32]
 800b02c:	4621      	mov	r1, r4
 800b02e:	4658      	mov	r0, fp
 800b030:	f000 fbba 	bl	800b7a8 <__mdiff>
 800b034:	68c2      	ldr	r2, [r0, #12]
 800b036:	4606      	mov	r6, r0
 800b038:	bb02      	cbnz	r2, 800b07c <_dtoa_r+0xa1c>
 800b03a:	4601      	mov	r1, r0
 800b03c:	4648      	mov	r0, r9
 800b03e:	f000 fb97 	bl	800b770 <__mcmp>
 800b042:	4602      	mov	r2, r0
 800b044:	4631      	mov	r1, r6
 800b046:	4658      	mov	r0, fp
 800b048:	920e      	str	r2, [sp, #56]	@ 0x38
 800b04a:	f000 f957 	bl	800b2fc <_Bfree>
 800b04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b050:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b052:	9e07      	ldr	r6, [sp, #28]
 800b054:	ea43 0102 	orr.w	r1, r3, r2
 800b058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b05a:	4319      	orrs	r1, r3
 800b05c:	d110      	bne.n	800b080 <_dtoa_r+0xa20>
 800b05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b062:	d029      	beq.n	800b0b8 <_dtoa_r+0xa58>
 800b064:	9b08      	ldr	r3, [sp, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	dd02      	ble.n	800b070 <_dtoa_r+0xa10>
 800b06a:	9b02      	ldr	r3, [sp, #8]
 800b06c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b070:	9b00      	ldr	r3, [sp, #0]
 800b072:	f883 8000 	strb.w	r8, [r3]
 800b076:	e63f      	b.n	800acf8 <_dtoa_r+0x698>
 800b078:	4628      	mov	r0, r5
 800b07a:	e7bb      	b.n	800aff4 <_dtoa_r+0x994>
 800b07c:	2201      	movs	r2, #1
 800b07e:	e7e1      	b.n	800b044 <_dtoa_r+0x9e4>
 800b080:	9b08      	ldr	r3, [sp, #32]
 800b082:	2b00      	cmp	r3, #0
 800b084:	db04      	blt.n	800b090 <_dtoa_r+0xa30>
 800b086:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b088:	430b      	orrs	r3, r1
 800b08a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b08c:	430b      	orrs	r3, r1
 800b08e:	d120      	bne.n	800b0d2 <_dtoa_r+0xa72>
 800b090:	2a00      	cmp	r2, #0
 800b092:	dded      	ble.n	800b070 <_dtoa_r+0xa10>
 800b094:	4649      	mov	r1, r9
 800b096:	2201      	movs	r2, #1
 800b098:	4658      	mov	r0, fp
 800b09a:	f000 fafd 	bl	800b698 <__lshift>
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4681      	mov	r9, r0
 800b0a2:	f000 fb65 	bl	800b770 <__mcmp>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	dc03      	bgt.n	800b0b2 <_dtoa_r+0xa52>
 800b0aa:	d1e1      	bne.n	800b070 <_dtoa_r+0xa10>
 800b0ac:	f018 0f01 	tst.w	r8, #1
 800b0b0:	d0de      	beq.n	800b070 <_dtoa_r+0xa10>
 800b0b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0b6:	d1d8      	bne.n	800b06a <_dtoa_r+0xa0a>
 800b0b8:	9a00      	ldr	r2, [sp, #0]
 800b0ba:	2339      	movs	r3, #57	@ 0x39
 800b0bc:	7013      	strb	r3, [r2, #0]
 800b0be:	4633      	mov	r3, r6
 800b0c0:	461e      	mov	r6, r3
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0c8:	2a39      	cmp	r2, #57	@ 0x39
 800b0ca:	d052      	beq.n	800b172 <_dtoa_r+0xb12>
 800b0cc:	3201      	adds	r2, #1
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	e612      	b.n	800acf8 <_dtoa_r+0x698>
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	dd07      	ble.n	800b0e6 <_dtoa_r+0xa86>
 800b0d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0da:	d0ed      	beq.n	800b0b8 <_dtoa_r+0xa58>
 800b0dc:	9a00      	ldr	r2, [sp, #0]
 800b0de:	f108 0301 	add.w	r3, r8, #1
 800b0e2:	7013      	strb	r3, [r2, #0]
 800b0e4:	e608      	b.n	800acf8 <_dtoa_r+0x698>
 800b0e6:	9b07      	ldr	r3, [sp, #28]
 800b0e8:	9a07      	ldr	r2, [sp, #28]
 800b0ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d028      	beq.n	800b146 <_dtoa_r+0xae6>
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	4658      	mov	r0, fp
 800b0fc:	f000 f920 	bl	800b340 <__multadd>
 800b100:	42af      	cmp	r7, r5
 800b102:	4681      	mov	r9, r0
 800b104:	f04f 0300 	mov.w	r3, #0
 800b108:	f04f 020a 	mov.w	r2, #10
 800b10c:	4639      	mov	r1, r7
 800b10e:	4658      	mov	r0, fp
 800b110:	d107      	bne.n	800b122 <_dtoa_r+0xac2>
 800b112:	f000 f915 	bl	800b340 <__multadd>
 800b116:	4607      	mov	r7, r0
 800b118:	4605      	mov	r5, r0
 800b11a:	9b07      	ldr	r3, [sp, #28]
 800b11c:	3301      	adds	r3, #1
 800b11e:	9307      	str	r3, [sp, #28]
 800b120:	e774      	b.n	800b00c <_dtoa_r+0x9ac>
 800b122:	f000 f90d 	bl	800b340 <__multadd>
 800b126:	4629      	mov	r1, r5
 800b128:	4607      	mov	r7, r0
 800b12a:	2300      	movs	r3, #0
 800b12c:	220a      	movs	r2, #10
 800b12e:	4658      	mov	r0, fp
 800b130:	f000 f906 	bl	800b340 <__multadd>
 800b134:	4605      	mov	r5, r0
 800b136:	e7f0      	b.n	800b11a <_dtoa_r+0xaba>
 800b138:	9b00      	ldr	r3, [sp, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfcc      	ite	gt
 800b13e:	461e      	movgt	r6, r3
 800b140:	2601      	movle	r6, #1
 800b142:	4456      	add	r6, sl
 800b144:	2700      	movs	r7, #0
 800b146:	4649      	mov	r1, r9
 800b148:	2201      	movs	r2, #1
 800b14a:	4658      	mov	r0, fp
 800b14c:	f000 faa4 	bl	800b698 <__lshift>
 800b150:	4621      	mov	r1, r4
 800b152:	4681      	mov	r9, r0
 800b154:	f000 fb0c 	bl	800b770 <__mcmp>
 800b158:	2800      	cmp	r0, #0
 800b15a:	dcb0      	bgt.n	800b0be <_dtoa_r+0xa5e>
 800b15c:	d102      	bne.n	800b164 <_dtoa_r+0xb04>
 800b15e:	f018 0f01 	tst.w	r8, #1
 800b162:	d1ac      	bne.n	800b0be <_dtoa_r+0xa5e>
 800b164:	4633      	mov	r3, r6
 800b166:	461e      	mov	r6, r3
 800b168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b16c:	2a30      	cmp	r2, #48	@ 0x30
 800b16e:	d0fa      	beq.n	800b166 <_dtoa_r+0xb06>
 800b170:	e5c2      	b.n	800acf8 <_dtoa_r+0x698>
 800b172:	459a      	cmp	sl, r3
 800b174:	d1a4      	bne.n	800b0c0 <_dtoa_r+0xa60>
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	2331      	movs	r3, #49	@ 0x31
 800b17e:	f88a 3000 	strb.w	r3, [sl]
 800b182:	e5b9      	b.n	800acf8 <_dtoa_r+0x698>
 800b184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b186:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b1e4 <_dtoa_r+0xb84>
 800b18a:	b11b      	cbz	r3, 800b194 <_dtoa_r+0xb34>
 800b18c:	f10a 0308 	add.w	r3, sl, #8
 800b190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	4650      	mov	r0, sl
 800b196:	b019      	add	sp, #100	@ 0x64
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	f77f ae37 	ble.w	800ae12 <_dtoa_r+0x7b2>
 800b1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	e655      	b.n	800ae58 <_dtoa_r+0x7f8>
 800b1ac:	9b00      	ldr	r3, [sp, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f77f aed6 	ble.w	800af60 <_dtoa_r+0x900>
 800b1b4:	4656      	mov	r6, sl
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4648      	mov	r0, r9
 800b1ba:	f7ff f9c8 	bl	800a54e <quorem>
 800b1be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1c2:	f806 8b01 	strb.w	r8, [r6], #1
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	eba6 020a 	sub.w	r2, r6, sl
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	ddb3      	ble.n	800b138 <_dtoa_r+0xad8>
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	220a      	movs	r2, #10
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	f000 f8b2 	bl	800b340 <__multadd>
 800b1dc:	4681      	mov	r9, r0
 800b1de:	e7ea      	b.n	800b1b6 <_dtoa_r+0xb56>
 800b1e0:	0800c590 	.word	0x0800c590
 800b1e4:	0800c514 	.word	0x0800c514

0800b1e8 <_free_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	d041      	beq.n	800b274 <_free_r+0x8c>
 800b1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f4:	1f0c      	subs	r4, r1, #4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bfb8      	it	lt
 800b1fa:	18e4      	addlt	r4, r4, r3
 800b1fc:	f7fe fb80 	bl	8009900 <__malloc_lock>
 800b200:	4a1d      	ldr	r2, [pc, #116]	@ (800b278 <_free_r+0x90>)
 800b202:	6813      	ldr	r3, [r2, #0]
 800b204:	b933      	cbnz	r3, 800b214 <_free_r+0x2c>
 800b206:	6063      	str	r3, [r4, #4]
 800b208:	6014      	str	r4, [r2, #0]
 800b20a:	4628      	mov	r0, r5
 800b20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b210:	f7fe bb7c 	b.w	800990c <__malloc_unlock>
 800b214:	42a3      	cmp	r3, r4
 800b216:	d908      	bls.n	800b22a <_free_r+0x42>
 800b218:	6820      	ldr	r0, [r4, #0]
 800b21a:	1821      	adds	r1, r4, r0
 800b21c:	428b      	cmp	r3, r1
 800b21e:	bf01      	itttt	eq
 800b220:	6819      	ldreq	r1, [r3, #0]
 800b222:	685b      	ldreq	r3, [r3, #4]
 800b224:	1809      	addeq	r1, r1, r0
 800b226:	6021      	streq	r1, [r4, #0]
 800b228:	e7ed      	b.n	800b206 <_free_r+0x1e>
 800b22a:	461a      	mov	r2, r3
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	b10b      	cbz	r3, 800b234 <_free_r+0x4c>
 800b230:	42a3      	cmp	r3, r4
 800b232:	d9fa      	bls.n	800b22a <_free_r+0x42>
 800b234:	6811      	ldr	r1, [r2, #0]
 800b236:	1850      	adds	r0, r2, r1
 800b238:	42a0      	cmp	r0, r4
 800b23a:	d10b      	bne.n	800b254 <_free_r+0x6c>
 800b23c:	6820      	ldr	r0, [r4, #0]
 800b23e:	4401      	add	r1, r0
 800b240:	1850      	adds	r0, r2, r1
 800b242:	4283      	cmp	r3, r0
 800b244:	6011      	str	r1, [r2, #0]
 800b246:	d1e0      	bne.n	800b20a <_free_r+0x22>
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	6053      	str	r3, [r2, #4]
 800b24e:	4408      	add	r0, r1
 800b250:	6010      	str	r0, [r2, #0]
 800b252:	e7da      	b.n	800b20a <_free_r+0x22>
 800b254:	d902      	bls.n	800b25c <_free_r+0x74>
 800b256:	230c      	movs	r3, #12
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	e7d6      	b.n	800b20a <_free_r+0x22>
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	1821      	adds	r1, r4, r0
 800b260:	428b      	cmp	r3, r1
 800b262:	bf04      	itt	eq
 800b264:	6819      	ldreq	r1, [r3, #0]
 800b266:	685b      	ldreq	r3, [r3, #4]
 800b268:	6063      	str	r3, [r4, #4]
 800b26a:	bf04      	itt	eq
 800b26c:	1809      	addeq	r1, r1, r0
 800b26e:	6021      	streq	r1, [r4, #0]
 800b270:	6054      	str	r4, [r2, #4]
 800b272:	e7ca      	b.n	800b20a <_free_r+0x22>
 800b274:	bd38      	pop	{r3, r4, r5, pc}
 800b276:	bf00      	nop
 800b278:	20001f84 	.word	0x20001f84

0800b27c <_Balloc>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	69c6      	ldr	r6, [r0, #28]
 800b280:	4604      	mov	r4, r0
 800b282:	460d      	mov	r5, r1
 800b284:	b976      	cbnz	r6, 800b2a4 <_Balloc+0x28>
 800b286:	2010      	movs	r0, #16
 800b288:	f7fe fa90 	bl	80097ac <malloc>
 800b28c:	4602      	mov	r2, r0
 800b28e:	61e0      	str	r0, [r4, #28]
 800b290:	b920      	cbnz	r0, 800b29c <_Balloc+0x20>
 800b292:	4b18      	ldr	r3, [pc, #96]	@ (800b2f4 <_Balloc+0x78>)
 800b294:	4818      	ldr	r0, [pc, #96]	@ (800b2f8 <_Balloc+0x7c>)
 800b296:	216b      	movs	r1, #107	@ 0x6b
 800b298:	f000 fd9e 	bl	800bdd8 <__assert_func>
 800b29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a0:	6006      	str	r6, [r0, #0]
 800b2a2:	60c6      	str	r6, [r0, #12]
 800b2a4:	69e6      	ldr	r6, [r4, #28]
 800b2a6:	68f3      	ldr	r3, [r6, #12]
 800b2a8:	b183      	cbz	r3, 800b2cc <_Balloc+0x50>
 800b2aa:	69e3      	ldr	r3, [r4, #28]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2b2:	b9b8      	cbnz	r0, 800b2e4 <_Balloc+0x68>
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ba:	1d72      	adds	r2, r6, #5
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 fda8 	bl	800be14 <_calloc_r>
 800b2c4:	b160      	cbz	r0, 800b2e0 <_Balloc+0x64>
 800b2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ca:	e00e      	b.n	800b2ea <_Balloc+0x6e>
 800b2cc:	2221      	movs	r2, #33	@ 0x21
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fd9f 	bl	800be14 <_calloc_r>
 800b2d6:	69e3      	ldr	r3, [r4, #28]
 800b2d8:	60f0      	str	r0, [r6, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e4      	bne.n	800b2aa <_Balloc+0x2e>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	6802      	ldr	r2, [r0, #0]
 800b2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2f0:	e7f7      	b.n	800b2e2 <_Balloc+0x66>
 800b2f2:	bf00      	nop
 800b2f4:	0800c521 	.word	0x0800c521
 800b2f8:	0800c5a1 	.word	0x0800c5a1

0800b2fc <_Bfree>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	69c6      	ldr	r6, [r0, #28]
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Bfree+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7fe fa50 	bl	80097ac <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	61e8      	str	r0, [r5, #28]
 800b310:	b920      	cbnz	r0, 800b31c <_Bfree+0x20>
 800b312:	4b09      	ldr	r3, [pc, #36]	@ (800b338 <_Bfree+0x3c>)
 800b314:	4809      	ldr	r0, [pc, #36]	@ (800b33c <_Bfree+0x40>)
 800b316:	218f      	movs	r1, #143	@ 0x8f
 800b318:	f000 fd5e 	bl	800bdd8 <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	b13c      	cbz	r4, 800b336 <_Bfree+0x3a>
 800b326:	69eb      	ldr	r3, [r5, #28]
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b330:	6021      	str	r1, [r4, #0]
 800b332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	0800c521 	.word	0x0800c521
 800b33c:	0800c5a1 	.word	0x0800c5a1

0800b340 <__multadd>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	690d      	ldr	r5, [r1, #16]
 800b346:	4607      	mov	r7, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	461e      	mov	r6, r3
 800b34c:	f101 0c14 	add.w	ip, r1, #20
 800b350:	2000      	movs	r0, #0
 800b352:	f8dc 3000 	ldr.w	r3, [ip]
 800b356:	b299      	uxth	r1, r3
 800b358:	fb02 6101 	mla	r1, r2, r1, r6
 800b35c:	0c1e      	lsrs	r6, r3, #16
 800b35e:	0c0b      	lsrs	r3, r1, #16
 800b360:	fb02 3306 	mla	r3, r2, r6, r3
 800b364:	b289      	uxth	r1, r1
 800b366:	3001      	adds	r0, #1
 800b368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b36c:	4285      	cmp	r5, r0
 800b36e:	f84c 1b04 	str.w	r1, [ip], #4
 800b372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b376:	dcec      	bgt.n	800b352 <__multadd+0x12>
 800b378:	b30e      	cbz	r6, 800b3be <__multadd+0x7e>
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	dc19      	bgt.n	800b3b4 <__multadd+0x74>
 800b380:	6861      	ldr	r1, [r4, #4]
 800b382:	4638      	mov	r0, r7
 800b384:	3101      	adds	r1, #1
 800b386:	f7ff ff79 	bl	800b27c <_Balloc>
 800b38a:	4680      	mov	r8, r0
 800b38c:	b928      	cbnz	r0, 800b39a <__multadd+0x5a>
 800b38e:	4602      	mov	r2, r0
 800b390:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c4 <__multadd+0x84>)
 800b392:	480d      	ldr	r0, [pc, #52]	@ (800b3c8 <__multadd+0x88>)
 800b394:	21ba      	movs	r1, #186	@ 0xba
 800b396:	f000 fd1f 	bl	800bdd8 <__assert_func>
 800b39a:	6922      	ldr	r2, [r4, #16]
 800b39c:	3202      	adds	r2, #2
 800b39e:	f104 010c 	add.w	r1, r4, #12
 800b3a2:	0092      	lsls	r2, r2, #2
 800b3a4:	300c      	adds	r0, #12
 800b3a6:	f000 fd09 	bl	800bdbc <memcpy>
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff ffa5 	bl	800b2fc <_Bfree>
 800b3b2:	4644      	mov	r4, r8
 800b3b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	615e      	str	r6, [r3, #20]
 800b3bc:	6125      	str	r5, [r4, #16]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	0800c590 	.word	0x0800c590
 800b3c8:	0800c5a1 	.word	0x0800c5a1

0800b3cc <__hi0bits>:
 800b3cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	bf36      	itet	cc
 800b3d4:	0403      	lslcc	r3, r0, #16
 800b3d6:	2000      	movcs	r0, #0
 800b3d8:	2010      	movcc	r0, #16
 800b3da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3de:	bf3c      	itt	cc
 800b3e0:	021b      	lslcc	r3, r3, #8
 800b3e2:	3008      	addcc	r0, #8
 800b3e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3e8:	bf3c      	itt	cc
 800b3ea:	011b      	lslcc	r3, r3, #4
 800b3ec:	3004      	addcc	r0, #4
 800b3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f2:	bf3c      	itt	cc
 800b3f4:	009b      	lslcc	r3, r3, #2
 800b3f6:	3002      	addcc	r0, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	db05      	blt.n	800b408 <__hi0bits+0x3c>
 800b3fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b400:	f100 0001 	add.w	r0, r0, #1
 800b404:	bf08      	it	eq
 800b406:	2020      	moveq	r0, #32
 800b408:	4770      	bx	lr

0800b40a <__lo0bits>:
 800b40a:	6803      	ldr	r3, [r0, #0]
 800b40c:	4602      	mov	r2, r0
 800b40e:	f013 0007 	ands.w	r0, r3, #7
 800b412:	d00b      	beq.n	800b42c <__lo0bits+0x22>
 800b414:	07d9      	lsls	r1, r3, #31
 800b416:	d421      	bmi.n	800b45c <__lo0bits+0x52>
 800b418:	0798      	lsls	r0, r3, #30
 800b41a:	bf49      	itett	mi
 800b41c:	085b      	lsrmi	r3, r3, #1
 800b41e:	089b      	lsrpl	r3, r3, #2
 800b420:	2001      	movmi	r0, #1
 800b422:	6013      	strmi	r3, [r2, #0]
 800b424:	bf5c      	itt	pl
 800b426:	6013      	strpl	r3, [r2, #0]
 800b428:	2002      	movpl	r0, #2
 800b42a:	4770      	bx	lr
 800b42c:	b299      	uxth	r1, r3
 800b42e:	b909      	cbnz	r1, 800b434 <__lo0bits+0x2a>
 800b430:	0c1b      	lsrs	r3, r3, #16
 800b432:	2010      	movs	r0, #16
 800b434:	b2d9      	uxtb	r1, r3
 800b436:	b909      	cbnz	r1, 800b43c <__lo0bits+0x32>
 800b438:	3008      	adds	r0, #8
 800b43a:	0a1b      	lsrs	r3, r3, #8
 800b43c:	0719      	lsls	r1, r3, #28
 800b43e:	bf04      	itt	eq
 800b440:	091b      	lsreq	r3, r3, #4
 800b442:	3004      	addeq	r0, #4
 800b444:	0799      	lsls	r1, r3, #30
 800b446:	bf04      	itt	eq
 800b448:	089b      	lsreq	r3, r3, #2
 800b44a:	3002      	addeq	r0, #2
 800b44c:	07d9      	lsls	r1, r3, #31
 800b44e:	d403      	bmi.n	800b458 <__lo0bits+0x4e>
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	f100 0001 	add.w	r0, r0, #1
 800b456:	d003      	beq.n	800b460 <__lo0bits+0x56>
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	4770      	bx	lr
 800b45c:	2000      	movs	r0, #0
 800b45e:	4770      	bx	lr
 800b460:	2020      	movs	r0, #32
 800b462:	4770      	bx	lr

0800b464 <__i2b>:
 800b464:	b510      	push	{r4, lr}
 800b466:	460c      	mov	r4, r1
 800b468:	2101      	movs	r1, #1
 800b46a:	f7ff ff07 	bl	800b27c <_Balloc>
 800b46e:	4602      	mov	r2, r0
 800b470:	b928      	cbnz	r0, 800b47e <__i2b+0x1a>
 800b472:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <__i2b+0x24>)
 800b474:	4805      	ldr	r0, [pc, #20]	@ (800b48c <__i2b+0x28>)
 800b476:	f240 1145 	movw	r1, #325	@ 0x145
 800b47a:	f000 fcad 	bl	800bdd8 <__assert_func>
 800b47e:	2301      	movs	r3, #1
 800b480:	6144      	str	r4, [r0, #20]
 800b482:	6103      	str	r3, [r0, #16]
 800b484:	bd10      	pop	{r4, pc}
 800b486:	bf00      	nop
 800b488:	0800c590 	.word	0x0800c590
 800b48c:	0800c5a1 	.word	0x0800c5a1

0800b490 <__multiply>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	4614      	mov	r4, r2
 800b496:	690a      	ldr	r2, [r1, #16]
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	bfa8      	it	ge
 800b49e:	4623      	movge	r3, r4
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	bfa4      	itt	ge
 800b4a4:	460c      	movge	r4, r1
 800b4a6:	461f      	movge	r7, r3
 800b4a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b4ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b4b0:	68a3      	ldr	r3, [r4, #8]
 800b4b2:	6861      	ldr	r1, [r4, #4]
 800b4b4:	eb0a 0609 	add.w	r6, sl, r9
 800b4b8:	42b3      	cmp	r3, r6
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	bfb8      	it	lt
 800b4be:	3101      	addlt	r1, #1
 800b4c0:	f7ff fedc 	bl	800b27c <_Balloc>
 800b4c4:	b930      	cbnz	r0, 800b4d4 <__multiply+0x44>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	4b44      	ldr	r3, [pc, #272]	@ (800b5dc <__multiply+0x14c>)
 800b4ca:	4845      	ldr	r0, [pc, #276]	@ (800b5e0 <__multiply+0x150>)
 800b4cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4d0:	f000 fc82 	bl	800bdd8 <__assert_func>
 800b4d4:	f100 0514 	add.w	r5, r0, #20
 800b4d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4dc:	462b      	mov	r3, r5
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4543      	cmp	r3, r8
 800b4e2:	d321      	bcc.n	800b528 <__multiply+0x98>
 800b4e4:	f107 0114 	add.w	r1, r7, #20
 800b4e8:	f104 0214 	add.w	r2, r4, #20
 800b4ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b4f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b4f4:	9302      	str	r3, [sp, #8]
 800b4f6:	1b13      	subs	r3, r2, r4
 800b4f8:	3b15      	subs	r3, #21
 800b4fa:	f023 0303 	bic.w	r3, r3, #3
 800b4fe:	3304      	adds	r3, #4
 800b500:	f104 0715 	add.w	r7, r4, #21
 800b504:	42ba      	cmp	r2, r7
 800b506:	bf38      	it	cc
 800b508:	2304      	movcc	r3, #4
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	9103      	str	r1, [sp, #12]
 800b510:	428b      	cmp	r3, r1
 800b512:	d80c      	bhi.n	800b52e <__multiply+0x9e>
 800b514:	2e00      	cmp	r6, #0
 800b516:	dd03      	ble.n	800b520 <__multiply+0x90>
 800b518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d05b      	beq.n	800b5d8 <__multiply+0x148>
 800b520:	6106      	str	r6, [r0, #16]
 800b522:	b005      	add	sp, #20
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	f843 2b04 	str.w	r2, [r3], #4
 800b52c:	e7d8      	b.n	800b4e0 <__multiply+0x50>
 800b52e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b532:	f1ba 0f00 	cmp.w	sl, #0
 800b536:	d024      	beq.n	800b582 <__multiply+0xf2>
 800b538:	f104 0e14 	add.w	lr, r4, #20
 800b53c:	46a9      	mov	r9, r5
 800b53e:	f04f 0c00 	mov.w	ip, #0
 800b542:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b546:	f8d9 3000 	ldr.w	r3, [r9]
 800b54a:	fa1f fb87 	uxth.w	fp, r7
 800b54e:	b29b      	uxth	r3, r3
 800b550:	fb0a 330b 	mla	r3, sl, fp, r3
 800b554:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b558:	f8d9 7000 	ldr.w	r7, [r9]
 800b55c:	4463      	add	r3, ip
 800b55e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b562:	fb0a c70b 	mla	r7, sl, fp, ip
 800b566:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b570:	4572      	cmp	r2, lr
 800b572:	f849 3b04 	str.w	r3, [r9], #4
 800b576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b57a:	d8e2      	bhi.n	800b542 <__multiply+0xb2>
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	f845 c003 	str.w	ip, [r5, r3]
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b588:	3104      	adds	r1, #4
 800b58a:	f1b9 0f00 	cmp.w	r9, #0
 800b58e:	d021      	beq.n	800b5d4 <__multiply+0x144>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	f104 0c14 	add.w	ip, r4, #20
 800b596:	46ae      	mov	lr, r5
 800b598:	f04f 0a00 	mov.w	sl, #0
 800b59c:	f8bc b000 	ldrh.w	fp, [ip]
 800b5a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b5a4:	fb09 770b 	mla	r7, r9, fp, r7
 800b5a8:	4457      	add	r7, sl
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b5b0:	f84e 3b04 	str.w	r3, [lr], #4
 800b5b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5bc:	f8be 3000 	ldrh.w	r3, [lr]
 800b5c0:	fb09 330a 	mla	r3, r9, sl, r3
 800b5c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b5c8:	4562      	cmp	r2, ip
 800b5ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5ce:	d8e5      	bhi.n	800b59c <__multiply+0x10c>
 800b5d0:	9f01      	ldr	r7, [sp, #4]
 800b5d2:	51eb      	str	r3, [r5, r7]
 800b5d4:	3504      	adds	r5, #4
 800b5d6:	e799      	b.n	800b50c <__multiply+0x7c>
 800b5d8:	3e01      	subs	r6, #1
 800b5da:	e79b      	b.n	800b514 <__multiply+0x84>
 800b5dc:	0800c590 	.word	0x0800c590
 800b5e0:	0800c5a1 	.word	0x0800c5a1

0800b5e4 <__pow5mult>:
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e8:	4615      	mov	r5, r2
 800b5ea:	f012 0203 	ands.w	r2, r2, #3
 800b5ee:	4607      	mov	r7, r0
 800b5f0:	460e      	mov	r6, r1
 800b5f2:	d007      	beq.n	800b604 <__pow5mult+0x20>
 800b5f4:	4c25      	ldr	r4, [pc, #148]	@ (800b68c <__pow5mult+0xa8>)
 800b5f6:	3a01      	subs	r2, #1
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5fe:	f7ff fe9f 	bl	800b340 <__multadd>
 800b602:	4606      	mov	r6, r0
 800b604:	10ad      	asrs	r5, r5, #2
 800b606:	d03d      	beq.n	800b684 <__pow5mult+0xa0>
 800b608:	69fc      	ldr	r4, [r7, #28]
 800b60a:	b97c      	cbnz	r4, 800b62c <__pow5mult+0x48>
 800b60c:	2010      	movs	r0, #16
 800b60e:	f7fe f8cd 	bl	80097ac <malloc>
 800b612:	4602      	mov	r2, r0
 800b614:	61f8      	str	r0, [r7, #28]
 800b616:	b928      	cbnz	r0, 800b624 <__pow5mult+0x40>
 800b618:	4b1d      	ldr	r3, [pc, #116]	@ (800b690 <__pow5mult+0xac>)
 800b61a:	481e      	ldr	r0, [pc, #120]	@ (800b694 <__pow5mult+0xb0>)
 800b61c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b620:	f000 fbda 	bl	800bdd8 <__assert_func>
 800b624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b628:	6004      	str	r4, [r0, #0]
 800b62a:	60c4      	str	r4, [r0, #12]
 800b62c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b634:	b94c      	cbnz	r4, 800b64a <__pow5mult+0x66>
 800b636:	f240 2171 	movw	r1, #625	@ 0x271
 800b63a:	4638      	mov	r0, r7
 800b63c:	f7ff ff12 	bl	800b464 <__i2b>
 800b640:	2300      	movs	r3, #0
 800b642:	f8c8 0008 	str.w	r0, [r8, #8]
 800b646:	4604      	mov	r4, r0
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	f04f 0900 	mov.w	r9, #0
 800b64e:	07eb      	lsls	r3, r5, #31
 800b650:	d50a      	bpl.n	800b668 <__pow5mult+0x84>
 800b652:	4631      	mov	r1, r6
 800b654:	4622      	mov	r2, r4
 800b656:	4638      	mov	r0, r7
 800b658:	f7ff ff1a 	bl	800b490 <__multiply>
 800b65c:	4631      	mov	r1, r6
 800b65e:	4680      	mov	r8, r0
 800b660:	4638      	mov	r0, r7
 800b662:	f7ff fe4b 	bl	800b2fc <_Bfree>
 800b666:	4646      	mov	r6, r8
 800b668:	106d      	asrs	r5, r5, #1
 800b66a:	d00b      	beq.n	800b684 <__pow5mult+0xa0>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	b938      	cbnz	r0, 800b680 <__pow5mult+0x9c>
 800b670:	4622      	mov	r2, r4
 800b672:	4621      	mov	r1, r4
 800b674:	4638      	mov	r0, r7
 800b676:	f7ff ff0b 	bl	800b490 <__multiply>
 800b67a:	6020      	str	r0, [r4, #0]
 800b67c:	f8c0 9000 	str.w	r9, [r0]
 800b680:	4604      	mov	r4, r0
 800b682:	e7e4      	b.n	800b64e <__pow5mult+0x6a>
 800b684:	4630      	mov	r0, r6
 800b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68a:	bf00      	nop
 800b68c:	0800c5fc 	.word	0x0800c5fc
 800b690:	0800c521 	.word	0x0800c521
 800b694:	0800c5a1 	.word	0x0800c5a1

0800b698 <__lshift>:
 800b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	460c      	mov	r4, r1
 800b69e:	6849      	ldr	r1, [r1, #4]
 800b6a0:	6923      	ldr	r3, [r4, #16]
 800b6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6a6:	68a3      	ldr	r3, [r4, #8]
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	4691      	mov	r9, r2
 800b6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6b0:	f108 0601 	add.w	r6, r8, #1
 800b6b4:	42b3      	cmp	r3, r6
 800b6b6:	db0b      	blt.n	800b6d0 <__lshift+0x38>
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	f7ff fddf 	bl	800b27c <_Balloc>
 800b6be:	4605      	mov	r5, r0
 800b6c0:	b948      	cbnz	r0, 800b6d6 <__lshift+0x3e>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4b28      	ldr	r3, [pc, #160]	@ (800b768 <__lshift+0xd0>)
 800b6c6:	4829      	ldr	r0, [pc, #164]	@ (800b76c <__lshift+0xd4>)
 800b6c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6cc:	f000 fb84 	bl	800bdd8 <__assert_func>
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	e7ee      	b.n	800b6b4 <__lshift+0x1c>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f100 0114 	add.w	r1, r0, #20
 800b6dc:	f100 0210 	add.w	r2, r0, #16
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	4553      	cmp	r3, sl
 800b6e4:	db33      	blt.n	800b74e <__lshift+0xb6>
 800b6e6:	6920      	ldr	r0, [r4, #16]
 800b6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6ec:	f104 0314 	add.w	r3, r4, #20
 800b6f0:	f019 091f 	ands.w	r9, r9, #31
 800b6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6fc:	d02b      	beq.n	800b756 <__lshift+0xbe>
 800b6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800b702:	468a      	mov	sl, r1
 800b704:	2200      	movs	r2, #0
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	fa00 f009 	lsl.w	r0, r0, r9
 800b70c:	4310      	orrs	r0, r2
 800b70e:	f84a 0b04 	str.w	r0, [sl], #4
 800b712:	f853 2b04 	ldr.w	r2, [r3], #4
 800b716:	459c      	cmp	ip, r3
 800b718:	fa22 f20e 	lsr.w	r2, r2, lr
 800b71c:	d8f3      	bhi.n	800b706 <__lshift+0x6e>
 800b71e:	ebac 0304 	sub.w	r3, ip, r4
 800b722:	3b15      	subs	r3, #21
 800b724:	f023 0303 	bic.w	r3, r3, #3
 800b728:	3304      	adds	r3, #4
 800b72a:	f104 0015 	add.w	r0, r4, #21
 800b72e:	4584      	cmp	ip, r0
 800b730:	bf38      	it	cc
 800b732:	2304      	movcc	r3, #4
 800b734:	50ca      	str	r2, [r1, r3]
 800b736:	b10a      	cbz	r2, 800b73c <__lshift+0xa4>
 800b738:	f108 0602 	add.w	r6, r8, #2
 800b73c:	3e01      	subs	r6, #1
 800b73e:	4638      	mov	r0, r7
 800b740:	612e      	str	r6, [r5, #16]
 800b742:	4621      	mov	r1, r4
 800b744:	f7ff fdda 	bl	800b2fc <_Bfree>
 800b748:	4628      	mov	r0, r5
 800b74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b752:	3301      	adds	r3, #1
 800b754:	e7c5      	b.n	800b6e2 <__lshift+0x4a>
 800b756:	3904      	subs	r1, #4
 800b758:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b760:	459c      	cmp	ip, r3
 800b762:	d8f9      	bhi.n	800b758 <__lshift+0xc0>
 800b764:	e7ea      	b.n	800b73c <__lshift+0xa4>
 800b766:	bf00      	nop
 800b768:	0800c590 	.word	0x0800c590
 800b76c:	0800c5a1 	.word	0x0800c5a1

0800b770 <__mcmp>:
 800b770:	690a      	ldr	r2, [r1, #16]
 800b772:	4603      	mov	r3, r0
 800b774:	6900      	ldr	r0, [r0, #16]
 800b776:	1a80      	subs	r0, r0, r2
 800b778:	b530      	push	{r4, r5, lr}
 800b77a:	d10e      	bne.n	800b79a <__mcmp+0x2a>
 800b77c:	3314      	adds	r3, #20
 800b77e:	3114      	adds	r1, #20
 800b780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b790:	4295      	cmp	r5, r2
 800b792:	d003      	beq.n	800b79c <__mcmp+0x2c>
 800b794:	d205      	bcs.n	800b7a2 <__mcmp+0x32>
 800b796:	f04f 30ff 	mov.w	r0, #4294967295
 800b79a:	bd30      	pop	{r4, r5, pc}
 800b79c:	42a3      	cmp	r3, r4
 800b79e:	d3f3      	bcc.n	800b788 <__mcmp+0x18>
 800b7a0:	e7fb      	b.n	800b79a <__mcmp+0x2a>
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	e7f9      	b.n	800b79a <__mcmp+0x2a>
	...

0800b7a8 <__mdiff>:
 800b7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	4689      	mov	r9, r1
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4648      	mov	r0, r9
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	f7ff ffdb 	bl	800b770 <__mcmp>
 800b7ba:	1e05      	subs	r5, r0, #0
 800b7bc:	d112      	bne.n	800b7e4 <__mdiff+0x3c>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7ff fd5b 	bl	800b27c <_Balloc>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	b928      	cbnz	r0, 800b7d6 <__mdiff+0x2e>
 800b7ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b8c8 <__mdiff+0x120>)
 800b7cc:	f240 2137 	movw	r1, #567	@ 0x237
 800b7d0:	483e      	ldr	r0, [pc, #248]	@ (800b8cc <__mdiff+0x124>)
 800b7d2:	f000 fb01 	bl	800bdd8 <__assert_func>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7dc:	4610      	mov	r0, r2
 800b7de:	b003      	add	sp, #12
 800b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e4:	bfbc      	itt	lt
 800b7e6:	464b      	movlt	r3, r9
 800b7e8:	46a1      	movlt	r9, r4
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7f0:	bfba      	itte	lt
 800b7f2:	461c      	movlt	r4, r3
 800b7f4:	2501      	movlt	r5, #1
 800b7f6:	2500      	movge	r5, #0
 800b7f8:	f7ff fd40 	bl	800b27c <_Balloc>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	b918      	cbnz	r0, 800b808 <__mdiff+0x60>
 800b800:	4b31      	ldr	r3, [pc, #196]	@ (800b8c8 <__mdiff+0x120>)
 800b802:	f240 2145 	movw	r1, #581	@ 0x245
 800b806:	e7e3      	b.n	800b7d0 <__mdiff+0x28>
 800b808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b80c:	6926      	ldr	r6, [r4, #16]
 800b80e:	60c5      	str	r5, [r0, #12]
 800b810:	f109 0310 	add.w	r3, r9, #16
 800b814:	f109 0514 	add.w	r5, r9, #20
 800b818:	f104 0e14 	add.w	lr, r4, #20
 800b81c:	f100 0b14 	add.w	fp, r0, #20
 800b820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	46d9      	mov	r9, fp
 800b82c:	f04f 0c00 	mov.w	ip, #0
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b83a:	9301      	str	r3, [sp, #4]
 800b83c:	fa1f f38a 	uxth.w	r3, sl
 800b840:	4619      	mov	r1, r3
 800b842:	b283      	uxth	r3, r0
 800b844:	1acb      	subs	r3, r1, r3
 800b846:	0c00      	lsrs	r0, r0, #16
 800b848:	4463      	add	r3, ip
 800b84a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b84e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b852:	b29b      	uxth	r3, r3
 800b854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b858:	4576      	cmp	r6, lr
 800b85a:	f849 3b04 	str.w	r3, [r9], #4
 800b85e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b862:	d8e5      	bhi.n	800b830 <__mdiff+0x88>
 800b864:	1b33      	subs	r3, r6, r4
 800b866:	3b15      	subs	r3, #21
 800b868:	f023 0303 	bic.w	r3, r3, #3
 800b86c:	3415      	adds	r4, #21
 800b86e:	3304      	adds	r3, #4
 800b870:	42a6      	cmp	r6, r4
 800b872:	bf38      	it	cc
 800b874:	2304      	movcc	r3, #4
 800b876:	441d      	add	r5, r3
 800b878:	445b      	add	r3, fp
 800b87a:	461e      	mov	r6, r3
 800b87c:	462c      	mov	r4, r5
 800b87e:	4544      	cmp	r4, r8
 800b880:	d30e      	bcc.n	800b8a0 <__mdiff+0xf8>
 800b882:	f108 0103 	add.w	r1, r8, #3
 800b886:	1b49      	subs	r1, r1, r5
 800b888:	f021 0103 	bic.w	r1, r1, #3
 800b88c:	3d03      	subs	r5, #3
 800b88e:	45a8      	cmp	r8, r5
 800b890:	bf38      	it	cc
 800b892:	2100      	movcc	r1, #0
 800b894:	440b      	add	r3, r1
 800b896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b89a:	b191      	cbz	r1, 800b8c2 <__mdiff+0x11a>
 800b89c:	6117      	str	r7, [r2, #16]
 800b89e:	e79d      	b.n	800b7dc <__mdiff+0x34>
 800b8a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8a4:	46e6      	mov	lr, ip
 800b8a6:	0c08      	lsrs	r0, r1, #16
 800b8a8:	fa1c fc81 	uxtah	ip, ip, r1
 800b8ac:	4471      	add	r1, lr
 800b8ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8b2:	b289      	uxth	r1, r1
 800b8b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8b8:	f846 1b04 	str.w	r1, [r6], #4
 800b8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8c0:	e7dd      	b.n	800b87e <__mdiff+0xd6>
 800b8c2:	3f01      	subs	r7, #1
 800b8c4:	e7e7      	b.n	800b896 <__mdiff+0xee>
 800b8c6:	bf00      	nop
 800b8c8:	0800c590 	.word	0x0800c590
 800b8cc:	0800c5a1 	.word	0x0800c5a1

0800b8d0 <__d2b>:
 800b8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	ec59 8b10 	vmov	r8, r9, d0
 800b8dc:	4616      	mov	r6, r2
 800b8de:	f7ff fccd 	bl	800b27c <_Balloc>
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	b930      	cbnz	r0, 800b8f4 <__d2b+0x24>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	4b23      	ldr	r3, [pc, #140]	@ (800b978 <__d2b+0xa8>)
 800b8ea:	4824      	ldr	r0, [pc, #144]	@ (800b97c <__d2b+0xac>)
 800b8ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8f0:	f000 fa72 	bl	800bdd8 <__assert_func>
 800b8f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8fc:	b10d      	cbz	r5, 800b902 <__d2b+0x32>
 800b8fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	f1b8 0300 	subs.w	r3, r8, #0
 800b908:	d023      	beq.n	800b952 <__d2b+0x82>
 800b90a:	4668      	mov	r0, sp
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f7ff fd7c 	bl	800b40a <__lo0bits>
 800b912:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b916:	b1d0      	cbz	r0, 800b94e <__d2b+0x7e>
 800b918:	f1c0 0320 	rsb	r3, r0, #32
 800b91c:	fa02 f303 	lsl.w	r3, r2, r3
 800b920:	430b      	orrs	r3, r1
 800b922:	40c2      	lsrs	r2, r0
 800b924:	6163      	str	r3, [r4, #20]
 800b926:	9201      	str	r2, [sp, #4]
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	61a3      	str	r3, [r4, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bf0c      	ite	eq
 800b930:	2201      	moveq	r2, #1
 800b932:	2202      	movne	r2, #2
 800b934:	6122      	str	r2, [r4, #16]
 800b936:	b1a5      	cbz	r5, 800b962 <__d2b+0x92>
 800b938:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b93c:	4405      	add	r5, r0
 800b93e:	603d      	str	r5, [r7, #0]
 800b940:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b944:	6030      	str	r0, [r6, #0]
 800b946:	4620      	mov	r0, r4
 800b948:	b003      	add	sp, #12
 800b94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b94e:	6161      	str	r1, [r4, #20]
 800b950:	e7ea      	b.n	800b928 <__d2b+0x58>
 800b952:	a801      	add	r0, sp, #4
 800b954:	f7ff fd59 	bl	800b40a <__lo0bits>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	6163      	str	r3, [r4, #20]
 800b95c:	3020      	adds	r0, #32
 800b95e:	2201      	movs	r2, #1
 800b960:	e7e8      	b.n	800b934 <__d2b+0x64>
 800b962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b966:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b96a:	6038      	str	r0, [r7, #0]
 800b96c:	6918      	ldr	r0, [r3, #16]
 800b96e:	f7ff fd2d 	bl	800b3cc <__hi0bits>
 800b972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b976:	e7e5      	b.n	800b944 <__d2b+0x74>
 800b978:	0800c590 	.word	0x0800c590
 800b97c:	0800c5a1 	.word	0x0800c5a1

0800b980 <__ssputs_r>:
 800b980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b984:	688e      	ldr	r6, [r1, #8]
 800b986:	461f      	mov	r7, r3
 800b988:	42be      	cmp	r6, r7
 800b98a:	680b      	ldr	r3, [r1, #0]
 800b98c:	4682      	mov	sl, r0
 800b98e:	460c      	mov	r4, r1
 800b990:	4690      	mov	r8, r2
 800b992:	d82d      	bhi.n	800b9f0 <__ssputs_r+0x70>
 800b994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b99c:	d026      	beq.n	800b9ec <__ssputs_r+0x6c>
 800b99e:	6965      	ldr	r5, [r4, #20]
 800b9a0:	6909      	ldr	r1, [r1, #16]
 800b9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9a6:	eba3 0901 	sub.w	r9, r3, r1
 800b9aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9ae:	1c7b      	adds	r3, r7, #1
 800b9b0:	444b      	add	r3, r9
 800b9b2:	106d      	asrs	r5, r5, #1
 800b9b4:	429d      	cmp	r5, r3
 800b9b6:	bf38      	it	cc
 800b9b8:	461d      	movcc	r5, r3
 800b9ba:	0553      	lsls	r3, r2, #21
 800b9bc:	d527      	bpl.n	800ba0e <__ssputs_r+0x8e>
 800b9be:	4629      	mov	r1, r5
 800b9c0:	f7fd ff1e 	bl	8009800 <_malloc_r>
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	b360      	cbz	r0, 800ba22 <__ssputs_r+0xa2>
 800b9c8:	6921      	ldr	r1, [r4, #16]
 800b9ca:	464a      	mov	r2, r9
 800b9cc:	f000 f9f6 	bl	800bdbc <memcpy>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	6126      	str	r6, [r4, #16]
 800b9de:	6165      	str	r5, [r4, #20]
 800b9e0:	444e      	add	r6, r9
 800b9e2:	eba5 0509 	sub.w	r5, r5, r9
 800b9e6:	6026      	str	r6, [r4, #0]
 800b9e8:	60a5      	str	r5, [r4, #8]
 800b9ea:	463e      	mov	r6, r7
 800b9ec:	42be      	cmp	r6, r7
 800b9ee:	d900      	bls.n	800b9f2 <__ssputs_r+0x72>
 800b9f0:	463e      	mov	r6, r7
 800b9f2:	6820      	ldr	r0, [r4, #0]
 800b9f4:	4632      	mov	r2, r6
 800b9f6:	4641      	mov	r1, r8
 800b9f8:	f000 f9c6 	bl	800bd88 <memmove>
 800b9fc:	68a3      	ldr	r3, [r4, #8]
 800b9fe:	1b9b      	subs	r3, r3, r6
 800ba00:	60a3      	str	r3, [r4, #8]
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	4433      	add	r3, r6
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0e:	462a      	mov	r2, r5
 800ba10:	f000 fa26 	bl	800be60 <_realloc_r>
 800ba14:	4606      	mov	r6, r0
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d1e0      	bne.n	800b9dc <__ssputs_r+0x5c>
 800ba1a:	6921      	ldr	r1, [r4, #16]
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	f7ff fbe3 	bl	800b1e8 <_free_r>
 800ba22:	230c      	movs	r3, #12
 800ba24:	f8ca 3000 	str.w	r3, [sl]
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	e7e9      	b.n	800ba0a <__ssputs_r+0x8a>
	...

0800ba38 <_svfiprintf_r>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	4698      	mov	r8, r3
 800ba3e:	898b      	ldrh	r3, [r1, #12]
 800ba40:	061b      	lsls	r3, r3, #24
 800ba42:	b09d      	sub	sp, #116	@ 0x74
 800ba44:	4607      	mov	r7, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	d510      	bpl.n	800ba6e <_svfiprintf_r+0x36>
 800ba4c:	690b      	ldr	r3, [r1, #16]
 800ba4e:	b973      	cbnz	r3, 800ba6e <_svfiprintf_r+0x36>
 800ba50:	2140      	movs	r1, #64	@ 0x40
 800ba52:	f7fd fed5 	bl	8009800 <_malloc_r>
 800ba56:	6028      	str	r0, [r5, #0]
 800ba58:	6128      	str	r0, [r5, #16]
 800ba5a:	b930      	cbnz	r0, 800ba6a <_svfiprintf_r+0x32>
 800ba5c:	230c      	movs	r3, #12
 800ba5e:	603b      	str	r3, [r7, #0]
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	b01d      	add	sp, #116	@ 0x74
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	2340      	movs	r3, #64	@ 0x40
 800ba6c:	616b      	str	r3, [r5, #20]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba72:	2320      	movs	r3, #32
 800ba74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba7c:	2330      	movs	r3, #48	@ 0x30
 800ba7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc1c <_svfiprintf_r+0x1e4>
 800ba82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba86:	f04f 0901 	mov.w	r9, #1
 800ba8a:	4623      	mov	r3, r4
 800ba8c:	469a      	mov	sl, r3
 800ba8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba92:	b10a      	cbz	r2, 800ba98 <_svfiprintf_r+0x60>
 800ba94:	2a25      	cmp	r2, #37	@ 0x25
 800ba96:	d1f9      	bne.n	800ba8c <_svfiprintf_r+0x54>
 800ba98:	ebba 0b04 	subs.w	fp, sl, r4
 800ba9c:	d00b      	beq.n	800bab6 <_svfiprintf_r+0x7e>
 800ba9e:	465b      	mov	r3, fp
 800baa0:	4622      	mov	r2, r4
 800baa2:	4629      	mov	r1, r5
 800baa4:	4638      	mov	r0, r7
 800baa6:	f7ff ff6b 	bl	800b980 <__ssputs_r>
 800baaa:	3001      	adds	r0, #1
 800baac:	f000 80a7 	beq.w	800bbfe <_svfiprintf_r+0x1c6>
 800bab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bab2:	445a      	add	r2, fp
 800bab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bab6:	f89a 3000 	ldrb.w	r3, [sl]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 809f 	beq.w	800bbfe <_svfiprintf_r+0x1c6>
 800bac0:	2300      	movs	r3, #0
 800bac2:	f04f 32ff 	mov.w	r2, #4294967295
 800bac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baca:	f10a 0a01 	add.w	sl, sl, #1
 800bace:	9304      	str	r3, [sp, #16]
 800bad0:	9307      	str	r3, [sp, #28]
 800bad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bad6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bad8:	4654      	mov	r4, sl
 800bada:	2205      	movs	r2, #5
 800badc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae0:	484e      	ldr	r0, [pc, #312]	@ (800bc1c <_svfiprintf_r+0x1e4>)
 800bae2:	f7f4 fb7d 	bl	80001e0 <memchr>
 800bae6:	9a04      	ldr	r2, [sp, #16]
 800bae8:	b9d8      	cbnz	r0, 800bb22 <_svfiprintf_r+0xea>
 800baea:	06d0      	lsls	r0, r2, #27
 800baec:	bf44      	itt	mi
 800baee:	2320      	movmi	r3, #32
 800baf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baf4:	0711      	lsls	r1, r2, #28
 800baf6:	bf44      	itt	mi
 800baf8:	232b      	movmi	r3, #43	@ 0x2b
 800bafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bafe:	f89a 3000 	ldrb.w	r3, [sl]
 800bb02:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb04:	d015      	beq.n	800bb32 <_svfiprintf_r+0xfa>
 800bb06:	9a07      	ldr	r2, [sp, #28]
 800bb08:	4654      	mov	r4, sl
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	f04f 0c0a 	mov.w	ip, #10
 800bb10:	4621      	mov	r1, r4
 800bb12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb16:	3b30      	subs	r3, #48	@ 0x30
 800bb18:	2b09      	cmp	r3, #9
 800bb1a:	d94b      	bls.n	800bbb4 <_svfiprintf_r+0x17c>
 800bb1c:	b1b0      	cbz	r0, 800bb4c <_svfiprintf_r+0x114>
 800bb1e:	9207      	str	r2, [sp, #28]
 800bb20:	e014      	b.n	800bb4c <_svfiprintf_r+0x114>
 800bb22:	eba0 0308 	sub.w	r3, r0, r8
 800bb26:	fa09 f303 	lsl.w	r3, r9, r3
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	46a2      	mov	sl, r4
 800bb30:	e7d2      	b.n	800bad8 <_svfiprintf_r+0xa0>
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	1d19      	adds	r1, r3, #4
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	9103      	str	r1, [sp, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	bfbb      	ittet	lt
 800bb3e:	425b      	neglt	r3, r3
 800bb40:	f042 0202 	orrlt.w	r2, r2, #2
 800bb44:	9307      	strge	r3, [sp, #28]
 800bb46:	9307      	strlt	r3, [sp, #28]
 800bb48:	bfb8      	it	lt
 800bb4a:	9204      	strlt	r2, [sp, #16]
 800bb4c:	7823      	ldrb	r3, [r4, #0]
 800bb4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb50:	d10a      	bne.n	800bb68 <_svfiprintf_r+0x130>
 800bb52:	7863      	ldrb	r3, [r4, #1]
 800bb54:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb56:	d132      	bne.n	800bbbe <_svfiprintf_r+0x186>
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	1d1a      	adds	r2, r3, #4
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	9203      	str	r2, [sp, #12]
 800bb60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb64:	3402      	adds	r4, #2
 800bb66:	9305      	str	r3, [sp, #20]
 800bb68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc2c <_svfiprintf_r+0x1f4>
 800bb6c:	7821      	ldrb	r1, [r4, #0]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	4650      	mov	r0, sl
 800bb72:	f7f4 fb35 	bl	80001e0 <memchr>
 800bb76:	b138      	cbz	r0, 800bb88 <_svfiprintf_r+0x150>
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	eba0 000a 	sub.w	r0, r0, sl
 800bb7e:	2240      	movs	r2, #64	@ 0x40
 800bb80:	4082      	lsls	r2, r0
 800bb82:	4313      	orrs	r3, r2
 800bb84:	3401      	adds	r4, #1
 800bb86:	9304      	str	r3, [sp, #16]
 800bb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8c:	4824      	ldr	r0, [pc, #144]	@ (800bc20 <_svfiprintf_r+0x1e8>)
 800bb8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb92:	2206      	movs	r2, #6
 800bb94:	f7f4 fb24 	bl	80001e0 <memchr>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d036      	beq.n	800bc0a <_svfiprintf_r+0x1d2>
 800bb9c:	4b21      	ldr	r3, [pc, #132]	@ (800bc24 <_svfiprintf_r+0x1ec>)
 800bb9e:	bb1b      	cbnz	r3, 800bbe8 <_svfiprintf_r+0x1b0>
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	3307      	adds	r3, #7
 800bba4:	f023 0307 	bic.w	r3, r3, #7
 800bba8:	3308      	adds	r3, #8
 800bbaa:	9303      	str	r3, [sp, #12]
 800bbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbae:	4433      	add	r3, r6
 800bbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb2:	e76a      	b.n	800ba8a <_svfiprintf_r+0x52>
 800bbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb8:	460c      	mov	r4, r1
 800bbba:	2001      	movs	r0, #1
 800bbbc:	e7a8      	b.n	800bb10 <_svfiprintf_r+0xd8>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	3401      	adds	r4, #1
 800bbc2:	9305      	str	r3, [sp, #20]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	f04f 0c0a 	mov.w	ip, #10
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbd0:	3a30      	subs	r2, #48	@ 0x30
 800bbd2:	2a09      	cmp	r2, #9
 800bbd4:	d903      	bls.n	800bbde <_svfiprintf_r+0x1a6>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0c6      	beq.n	800bb68 <_svfiprintf_r+0x130>
 800bbda:	9105      	str	r1, [sp, #20]
 800bbdc:	e7c4      	b.n	800bb68 <_svfiprintf_r+0x130>
 800bbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e7f0      	b.n	800bbca <_svfiprintf_r+0x192>
 800bbe8:	ab03      	add	r3, sp, #12
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	462a      	mov	r2, r5
 800bbee:	4b0e      	ldr	r3, [pc, #56]	@ (800bc28 <_svfiprintf_r+0x1f0>)
 800bbf0:	a904      	add	r1, sp, #16
 800bbf2:	4638      	mov	r0, r7
 800bbf4:	f7fd ff30 	bl	8009a58 <_printf_float>
 800bbf8:	1c42      	adds	r2, r0, #1
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	d1d6      	bne.n	800bbac <_svfiprintf_r+0x174>
 800bbfe:	89ab      	ldrh	r3, [r5, #12]
 800bc00:	065b      	lsls	r3, r3, #25
 800bc02:	f53f af2d 	bmi.w	800ba60 <_svfiprintf_r+0x28>
 800bc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc08:	e72c      	b.n	800ba64 <_svfiprintf_r+0x2c>
 800bc0a:	ab03      	add	r3, sp, #12
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4b05      	ldr	r3, [pc, #20]	@ (800bc28 <_svfiprintf_r+0x1f0>)
 800bc12:	a904      	add	r1, sp, #16
 800bc14:	4638      	mov	r0, r7
 800bc16:	f7fe f9b7 	bl	8009f88 <_printf_i>
 800bc1a:	e7ed      	b.n	800bbf8 <_svfiprintf_r+0x1c0>
 800bc1c:	0800c6f8 	.word	0x0800c6f8
 800bc20:	0800c702 	.word	0x0800c702
 800bc24:	08009a59 	.word	0x08009a59
 800bc28:	0800b981 	.word	0x0800b981
 800bc2c:	0800c6fe 	.word	0x0800c6fe

0800bc30 <__sflush_r>:
 800bc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc38:	0716      	lsls	r6, r2, #28
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	d454      	bmi.n	800bcea <__sflush_r+0xba>
 800bc40:	684b      	ldr	r3, [r1, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dc02      	bgt.n	800bc4c <__sflush_r+0x1c>
 800bc46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dd48      	ble.n	800bcde <__sflush_r+0xae>
 800bc4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc4e:	2e00      	cmp	r6, #0
 800bc50:	d045      	beq.n	800bcde <__sflush_r+0xae>
 800bc52:	2300      	movs	r3, #0
 800bc54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc58:	682f      	ldr	r7, [r5, #0]
 800bc5a:	6a21      	ldr	r1, [r4, #32]
 800bc5c:	602b      	str	r3, [r5, #0]
 800bc5e:	d030      	beq.n	800bcc2 <__sflush_r+0x92>
 800bc60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	0759      	lsls	r1, r3, #29
 800bc66:	d505      	bpl.n	800bc74 <__sflush_r+0x44>
 800bc68:	6863      	ldr	r3, [r4, #4]
 800bc6a:	1ad2      	subs	r2, r2, r3
 800bc6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc6e:	b10b      	cbz	r3, 800bc74 <__sflush_r+0x44>
 800bc70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	2300      	movs	r3, #0
 800bc76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc78:	6a21      	ldr	r1, [r4, #32]
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	47b0      	blx	r6
 800bc7e:	1c43      	adds	r3, r0, #1
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	d106      	bne.n	800bc92 <__sflush_r+0x62>
 800bc84:	6829      	ldr	r1, [r5, #0]
 800bc86:	291d      	cmp	r1, #29
 800bc88:	d82b      	bhi.n	800bce2 <__sflush_r+0xb2>
 800bc8a:	4a2a      	ldr	r2, [pc, #168]	@ (800bd34 <__sflush_r+0x104>)
 800bc8c:	410a      	asrs	r2, r1
 800bc8e:	07d6      	lsls	r6, r2, #31
 800bc90:	d427      	bmi.n	800bce2 <__sflush_r+0xb2>
 800bc92:	2200      	movs	r2, #0
 800bc94:	6062      	str	r2, [r4, #4]
 800bc96:	04d9      	lsls	r1, r3, #19
 800bc98:	6922      	ldr	r2, [r4, #16]
 800bc9a:	6022      	str	r2, [r4, #0]
 800bc9c:	d504      	bpl.n	800bca8 <__sflush_r+0x78>
 800bc9e:	1c42      	adds	r2, r0, #1
 800bca0:	d101      	bne.n	800bca6 <__sflush_r+0x76>
 800bca2:	682b      	ldr	r3, [r5, #0]
 800bca4:	b903      	cbnz	r3, 800bca8 <__sflush_r+0x78>
 800bca6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcaa:	602f      	str	r7, [r5, #0]
 800bcac:	b1b9      	cbz	r1, 800bcde <__sflush_r+0xae>
 800bcae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	d002      	beq.n	800bcbc <__sflush_r+0x8c>
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f7ff fa96 	bl	800b1e8 <_free_r>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcc0:	e00d      	b.n	800bcde <__sflush_r+0xae>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	47b0      	blx	r6
 800bcc8:	4602      	mov	r2, r0
 800bcca:	1c50      	adds	r0, r2, #1
 800bccc:	d1c9      	bne.n	800bc62 <__sflush_r+0x32>
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0c6      	beq.n	800bc62 <__sflush_r+0x32>
 800bcd4:	2b1d      	cmp	r3, #29
 800bcd6:	d001      	beq.n	800bcdc <__sflush_r+0xac>
 800bcd8:	2b16      	cmp	r3, #22
 800bcda:	d11e      	bne.n	800bd1a <__sflush_r+0xea>
 800bcdc:	602f      	str	r7, [r5, #0]
 800bcde:	2000      	movs	r0, #0
 800bce0:	e022      	b.n	800bd28 <__sflush_r+0xf8>
 800bce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bce6:	b21b      	sxth	r3, r3
 800bce8:	e01b      	b.n	800bd22 <__sflush_r+0xf2>
 800bcea:	690f      	ldr	r7, [r1, #16]
 800bcec:	2f00      	cmp	r7, #0
 800bcee:	d0f6      	beq.n	800bcde <__sflush_r+0xae>
 800bcf0:	0793      	lsls	r3, r2, #30
 800bcf2:	680e      	ldr	r6, [r1, #0]
 800bcf4:	bf08      	it	eq
 800bcf6:	694b      	ldreq	r3, [r1, #20]
 800bcf8:	600f      	str	r7, [r1, #0]
 800bcfa:	bf18      	it	ne
 800bcfc:	2300      	movne	r3, #0
 800bcfe:	eba6 0807 	sub.w	r8, r6, r7
 800bd02:	608b      	str	r3, [r1, #8]
 800bd04:	f1b8 0f00 	cmp.w	r8, #0
 800bd08:	dde9      	ble.n	800bcde <__sflush_r+0xae>
 800bd0a:	6a21      	ldr	r1, [r4, #32]
 800bd0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd0e:	4643      	mov	r3, r8
 800bd10:	463a      	mov	r2, r7
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b0      	blx	r6
 800bd16:	2800      	cmp	r0, #0
 800bd18:	dc08      	bgt.n	800bd2c <__sflush_r+0xfc>
 800bd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	f04f 30ff 	mov.w	r0, #4294967295
 800bd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd2c:	4407      	add	r7, r0
 800bd2e:	eba8 0800 	sub.w	r8, r8, r0
 800bd32:	e7e7      	b.n	800bd04 <__sflush_r+0xd4>
 800bd34:	dfbffffe 	.word	0xdfbffffe

0800bd38 <_fflush_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	690b      	ldr	r3, [r1, #16]
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	460c      	mov	r4, r1
 800bd40:	b913      	cbnz	r3, 800bd48 <_fflush_r+0x10>
 800bd42:	2500      	movs	r5, #0
 800bd44:	4628      	mov	r0, r5
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	b118      	cbz	r0, 800bd52 <_fflush_r+0x1a>
 800bd4a:	6a03      	ldr	r3, [r0, #32]
 800bd4c:	b90b      	cbnz	r3, 800bd52 <_fflush_r+0x1a>
 800bd4e:	f7fe fac7 	bl	800a2e0 <__sinit>
 800bd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0f3      	beq.n	800bd42 <_fflush_r+0xa>
 800bd5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd5c:	07d0      	lsls	r0, r2, #31
 800bd5e:	d404      	bmi.n	800bd6a <_fflush_r+0x32>
 800bd60:	0599      	lsls	r1, r3, #22
 800bd62:	d402      	bmi.n	800bd6a <_fflush_r+0x32>
 800bd64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd66:	f7fe fbf0 	bl	800a54a <__retarget_lock_acquire_recursive>
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	f7ff ff5f 	bl	800bc30 <__sflush_r>
 800bd72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd74:	07da      	lsls	r2, r3, #31
 800bd76:	4605      	mov	r5, r0
 800bd78:	d4e4      	bmi.n	800bd44 <_fflush_r+0xc>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	059b      	lsls	r3, r3, #22
 800bd7e:	d4e1      	bmi.n	800bd44 <_fflush_r+0xc>
 800bd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd82:	f7fe fbe3 	bl	800a54c <__retarget_lock_release_recursive>
 800bd86:	e7dd      	b.n	800bd44 <_fflush_r+0xc>

0800bd88 <memmove>:
 800bd88:	4288      	cmp	r0, r1
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	eb01 0402 	add.w	r4, r1, r2
 800bd90:	d902      	bls.n	800bd98 <memmove+0x10>
 800bd92:	4284      	cmp	r4, r0
 800bd94:	4623      	mov	r3, r4
 800bd96:	d807      	bhi.n	800bda8 <memmove+0x20>
 800bd98:	1e43      	subs	r3, r0, #1
 800bd9a:	42a1      	cmp	r1, r4
 800bd9c:	d008      	beq.n	800bdb0 <memmove+0x28>
 800bd9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bda2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bda6:	e7f8      	b.n	800bd9a <memmove+0x12>
 800bda8:	4402      	add	r2, r0
 800bdaa:	4601      	mov	r1, r0
 800bdac:	428a      	cmp	r2, r1
 800bdae:	d100      	bne.n	800bdb2 <memmove+0x2a>
 800bdb0:	bd10      	pop	{r4, pc}
 800bdb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdba:	e7f7      	b.n	800bdac <memmove+0x24>

0800bdbc <memcpy>:
 800bdbc:	440a      	add	r2, r1
 800bdbe:	4291      	cmp	r1, r2
 800bdc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdc4:	d100      	bne.n	800bdc8 <memcpy+0xc>
 800bdc6:	4770      	bx	lr
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdd2:	4291      	cmp	r1, r2
 800bdd4:	d1f9      	bne.n	800bdca <memcpy+0xe>
 800bdd6:	bd10      	pop	{r4, pc}

0800bdd8 <__assert_func>:
 800bdd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdda:	4614      	mov	r4, r2
 800bddc:	461a      	mov	r2, r3
 800bdde:	4b09      	ldr	r3, [pc, #36]	@ (800be04 <__assert_func+0x2c>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4605      	mov	r5, r0
 800bde4:	68d8      	ldr	r0, [r3, #12]
 800bde6:	b954      	cbnz	r4, 800bdfe <__assert_func+0x26>
 800bde8:	4b07      	ldr	r3, [pc, #28]	@ (800be08 <__assert_func+0x30>)
 800bdea:	461c      	mov	r4, r3
 800bdec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdf0:	9100      	str	r1, [sp, #0]
 800bdf2:	462b      	mov	r3, r5
 800bdf4:	4905      	ldr	r1, [pc, #20]	@ (800be0c <__assert_func+0x34>)
 800bdf6:	f000 f86f 	bl	800bed8 <fiprintf>
 800bdfa:	f000 f87f 	bl	800befc <abort>
 800bdfe:	4b04      	ldr	r3, [pc, #16]	@ (800be10 <__assert_func+0x38>)
 800be00:	e7f4      	b.n	800bdec <__assert_func+0x14>
 800be02:	bf00      	nop
 800be04:	20000114 	.word	0x20000114
 800be08:	0800c74e 	.word	0x0800c74e
 800be0c:	0800c720 	.word	0x0800c720
 800be10:	0800c713 	.word	0x0800c713

0800be14 <_calloc_r>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	fba1 5402 	umull	r5, r4, r1, r2
 800be1a:	b93c      	cbnz	r4, 800be2c <_calloc_r+0x18>
 800be1c:	4629      	mov	r1, r5
 800be1e:	f7fd fcef 	bl	8009800 <_malloc_r>
 800be22:	4606      	mov	r6, r0
 800be24:	b928      	cbnz	r0, 800be32 <_calloc_r+0x1e>
 800be26:	2600      	movs	r6, #0
 800be28:	4630      	mov	r0, r6
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	220c      	movs	r2, #12
 800be2e:	6002      	str	r2, [r0, #0]
 800be30:	e7f9      	b.n	800be26 <_calloc_r+0x12>
 800be32:	462a      	mov	r2, r5
 800be34:	4621      	mov	r1, r4
 800be36:	f7fe faec 	bl	800a412 <memset>
 800be3a:	e7f5      	b.n	800be28 <_calloc_r+0x14>

0800be3c <__ascii_mbtowc>:
 800be3c:	b082      	sub	sp, #8
 800be3e:	b901      	cbnz	r1, 800be42 <__ascii_mbtowc+0x6>
 800be40:	a901      	add	r1, sp, #4
 800be42:	b142      	cbz	r2, 800be56 <__ascii_mbtowc+0x1a>
 800be44:	b14b      	cbz	r3, 800be5a <__ascii_mbtowc+0x1e>
 800be46:	7813      	ldrb	r3, [r2, #0]
 800be48:	600b      	str	r3, [r1, #0]
 800be4a:	7812      	ldrb	r2, [r2, #0]
 800be4c:	1e10      	subs	r0, r2, #0
 800be4e:	bf18      	it	ne
 800be50:	2001      	movne	r0, #1
 800be52:	b002      	add	sp, #8
 800be54:	4770      	bx	lr
 800be56:	4610      	mov	r0, r2
 800be58:	e7fb      	b.n	800be52 <__ascii_mbtowc+0x16>
 800be5a:	f06f 0001 	mvn.w	r0, #1
 800be5e:	e7f8      	b.n	800be52 <__ascii_mbtowc+0x16>

0800be60 <_realloc_r>:
 800be60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be64:	4680      	mov	r8, r0
 800be66:	4615      	mov	r5, r2
 800be68:	460c      	mov	r4, r1
 800be6a:	b921      	cbnz	r1, 800be76 <_realloc_r+0x16>
 800be6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be70:	4611      	mov	r1, r2
 800be72:	f7fd bcc5 	b.w	8009800 <_malloc_r>
 800be76:	b92a      	cbnz	r2, 800be84 <_realloc_r+0x24>
 800be78:	f7ff f9b6 	bl	800b1e8 <_free_r>
 800be7c:	2400      	movs	r4, #0
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	f000 f841 	bl	800bf0a <_malloc_usable_size_r>
 800be88:	4285      	cmp	r5, r0
 800be8a:	4606      	mov	r6, r0
 800be8c:	d802      	bhi.n	800be94 <_realloc_r+0x34>
 800be8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800be92:	d8f4      	bhi.n	800be7e <_realloc_r+0x1e>
 800be94:	4629      	mov	r1, r5
 800be96:	4640      	mov	r0, r8
 800be98:	f7fd fcb2 	bl	8009800 <_malloc_r>
 800be9c:	4607      	mov	r7, r0
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d0ec      	beq.n	800be7c <_realloc_r+0x1c>
 800bea2:	42b5      	cmp	r5, r6
 800bea4:	462a      	mov	r2, r5
 800bea6:	4621      	mov	r1, r4
 800bea8:	bf28      	it	cs
 800beaa:	4632      	movcs	r2, r6
 800beac:	f7ff ff86 	bl	800bdbc <memcpy>
 800beb0:	4621      	mov	r1, r4
 800beb2:	4640      	mov	r0, r8
 800beb4:	f7ff f998 	bl	800b1e8 <_free_r>
 800beb8:	463c      	mov	r4, r7
 800beba:	e7e0      	b.n	800be7e <_realloc_r+0x1e>

0800bebc <__ascii_wctomb>:
 800bebc:	4603      	mov	r3, r0
 800bebe:	4608      	mov	r0, r1
 800bec0:	b141      	cbz	r1, 800bed4 <__ascii_wctomb+0x18>
 800bec2:	2aff      	cmp	r2, #255	@ 0xff
 800bec4:	d904      	bls.n	800bed0 <__ascii_wctomb+0x14>
 800bec6:	228a      	movs	r2, #138	@ 0x8a
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	f04f 30ff 	mov.w	r0, #4294967295
 800bece:	4770      	bx	lr
 800bed0:	700a      	strb	r2, [r1, #0]
 800bed2:	2001      	movs	r0, #1
 800bed4:	4770      	bx	lr
	...

0800bed8 <fiprintf>:
 800bed8:	b40e      	push	{r1, r2, r3}
 800beda:	b503      	push	{r0, r1, lr}
 800bedc:	4601      	mov	r1, r0
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	4805      	ldr	r0, [pc, #20]	@ (800bef8 <fiprintf+0x20>)
 800bee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee6:	6800      	ldr	r0, [r0, #0]
 800bee8:	9301      	str	r3, [sp, #4]
 800beea:	f000 f83f 	bl	800bf6c <_vfiprintf_r>
 800beee:	b002      	add	sp, #8
 800bef0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bef4:	b003      	add	sp, #12
 800bef6:	4770      	bx	lr
 800bef8:	20000114 	.word	0x20000114

0800befc <abort>:
 800befc:	b508      	push	{r3, lr}
 800befe:	2006      	movs	r0, #6
 800bf00:	f000 fa08 	bl	800c314 <raise>
 800bf04:	2001      	movs	r0, #1
 800bf06:	f7f5 fd01 	bl	800190c <_exit>

0800bf0a <_malloc_usable_size_r>:
 800bf0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf0e:	1f18      	subs	r0, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bfbc      	itt	lt
 800bf14:	580b      	ldrlt	r3, [r1, r0]
 800bf16:	18c0      	addlt	r0, r0, r3
 800bf18:	4770      	bx	lr

0800bf1a <__sfputc_r>:
 800bf1a:	6893      	ldr	r3, [r2, #8]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	b410      	push	{r4}
 800bf22:	6093      	str	r3, [r2, #8]
 800bf24:	da08      	bge.n	800bf38 <__sfputc_r+0x1e>
 800bf26:	6994      	ldr	r4, [r2, #24]
 800bf28:	42a3      	cmp	r3, r4
 800bf2a:	db01      	blt.n	800bf30 <__sfputc_r+0x16>
 800bf2c:	290a      	cmp	r1, #10
 800bf2e:	d103      	bne.n	800bf38 <__sfputc_r+0x1e>
 800bf30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf34:	f000 b932 	b.w	800c19c <__swbuf_r>
 800bf38:	6813      	ldr	r3, [r2, #0]
 800bf3a:	1c58      	adds	r0, r3, #1
 800bf3c:	6010      	str	r0, [r2, #0]
 800bf3e:	7019      	strb	r1, [r3, #0]
 800bf40:	4608      	mov	r0, r1
 800bf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <__sfputs_r>:
 800bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	460f      	mov	r7, r1
 800bf4e:	4614      	mov	r4, r2
 800bf50:	18d5      	adds	r5, r2, r3
 800bf52:	42ac      	cmp	r4, r5
 800bf54:	d101      	bne.n	800bf5a <__sfputs_r+0x12>
 800bf56:	2000      	movs	r0, #0
 800bf58:	e007      	b.n	800bf6a <__sfputs_r+0x22>
 800bf5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5e:	463a      	mov	r2, r7
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7ff ffda 	bl	800bf1a <__sfputc_r>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d1f3      	bne.n	800bf52 <__sfputs_r+0xa>
 800bf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf6c <_vfiprintf_r>:
 800bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	460d      	mov	r5, r1
 800bf72:	b09d      	sub	sp, #116	@ 0x74
 800bf74:	4614      	mov	r4, r2
 800bf76:	4698      	mov	r8, r3
 800bf78:	4606      	mov	r6, r0
 800bf7a:	b118      	cbz	r0, 800bf84 <_vfiprintf_r+0x18>
 800bf7c:	6a03      	ldr	r3, [r0, #32]
 800bf7e:	b90b      	cbnz	r3, 800bf84 <_vfiprintf_r+0x18>
 800bf80:	f7fe f9ae 	bl	800a2e0 <__sinit>
 800bf84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf86:	07d9      	lsls	r1, r3, #31
 800bf88:	d405      	bmi.n	800bf96 <_vfiprintf_r+0x2a>
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	059a      	lsls	r2, r3, #22
 800bf8e:	d402      	bmi.n	800bf96 <_vfiprintf_r+0x2a>
 800bf90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf92:	f7fe fada 	bl	800a54a <__retarget_lock_acquire_recursive>
 800bf96:	89ab      	ldrh	r3, [r5, #12]
 800bf98:	071b      	lsls	r3, r3, #28
 800bf9a:	d501      	bpl.n	800bfa0 <_vfiprintf_r+0x34>
 800bf9c:	692b      	ldr	r3, [r5, #16]
 800bf9e:	b99b      	cbnz	r3, 800bfc8 <_vfiprintf_r+0x5c>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f000 f938 	bl	800c218 <__swsetup_r>
 800bfa8:	b170      	cbz	r0, 800bfc8 <_vfiprintf_r+0x5c>
 800bfaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfac:	07dc      	lsls	r4, r3, #31
 800bfae:	d504      	bpl.n	800bfba <_vfiprintf_r+0x4e>
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb4:	b01d      	add	sp, #116	@ 0x74
 800bfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	0598      	lsls	r0, r3, #22
 800bfbe:	d4f7      	bmi.n	800bfb0 <_vfiprintf_r+0x44>
 800bfc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfc2:	f7fe fac3 	bl	800a54c <__retarget_lock_release_recursive>
 800bfc6:	e7f3      	b.n	800bfb0 <_vfiprintf_r+0x44>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfcc:	2320      	movs	r3, #32
 800bfce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfd6:	2330      	movs	r3, #48	@ 0x30
 800bfd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c188 <_vfiprintf_r+0x21c>
 800bfdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfe0:	f04f 0901 	mov.w	r9, #1
 800bfe4:	4623      	mov	r3, r4
 800bfe6:	469a      	mov	sl, r3
 800bfe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfec:	b10a      	cbz	r2, 800bff2 <_vfiprintf_r+0x86>
 800bfee:	2a25      	cmp	r2, #37	@ 0x25
 800bff0:	d1f9      	bne.n	800bfe6 <_vfiprintf_r+0x7a>
 800bff2:	ebba 0b04 	subs.w	fp, sl, r4
 800bff6:	d00b      	beq.n	800c010 <_vfiprintf_r+0xa4>
 800bff8:	465b      	mov	r3, fp
 800bffa:	4622      	mov	r2, r4
 800bffc:	4629      	mov	r1, r5
 800bffe:	4630      	mov	r0, r6
 800c000:	f7ff ffa2 	bl	800bf48 <__sfputs_r>
 800c004:	3001      	adds	r0, #1
 800c006:	f000 80a7 	beq.w	800c158 <_vfiprintf_r+0x1ec>
 800c00a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c00c:	445a      	add	r2, fp
 800c00e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c010:	f89a 3000 	ldrb.w	r3, [sl]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 809f 	beq.w	800c158 <_vfiprintf_r+0x1ec>
 800c01a:	2300      	movs	r3, #0
 800c01c:	f04f 32ff 	mov.w	r2, #4294967295
 800c020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c024:	f10a 0a01 	add.w	sl, sl, #1
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	9307      	str	r3, [sp, #28]
 800c02c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c030:	931a      	str	r3, [sp, #104]	@ 0x68
 800c032:	4654      	mov	r4, sl
 800c034:	2205      	movs	r2, #5
 800c036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c03a:	4853      	ldr	r0, [pc, #332]	@ (800c188 <_vfiprintf_r+0x21c>)
 800c03c:	f7f4 f8d0 	bl	80001e0 <memchr>
 800c040:	9a04      	ldr	r2, [sp, #16]
 800c042:	b9d8      	cbnz	r0, 800c07c <_vfiprintf_r+0x110>
 800c044:	06d1      	lsls	r1, r2, #27
 800c046:	bf44      	itt	mi
 800c048:	2320      	movmi	r3, #32
 800c04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c04e:	0713      	lsls	r3, r2, #28
 800c050:	bf44      	itt	mi
 800c052:	232b      	movmi	r3, #43	@ 0x2b
 800c054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c058:	f89a 3000 	ldrb.w	r3, [sl]
 800c05c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c05e:	d015      	beq.n	800c08c <_vfiprintf_r+0x120>
 800c060:	9a07      	ldr	r2, [sp, #28]
 800c062:	4654      	mov	r4, sl
 800c064:	2000      	movs	r0, #0
 800c066:	f04f 0c0a 	mov.w	ip, #10
 800c06a:	4621      	mov	r1, r4
 800c06c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c070:	3b30      	subs	r3, #48	@ 0x30
 800c072:	2b09      	cmp	r3, #9
 800c074:	d94b      	bls.n	800c10e <_vfiprintf_r+0x1a2>
 800c076:	b1b0      	cbz	r0, 800c0a6 <_vfiprintf_r+0x13a>
 800c078:	9207      	str	r2, [sp, #28]
 800c07a:	e014      	b.n	800c0a6 <_vfiprintf_r+0x13a>
 800c07c:	eba0 0308 	sub.w	r3, r0, r8
 800c080:	fa09 f303 	lsl.w	r3, r9, r3
 800c084:	4313      	orrs	r3, r2
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	46a2      	mov	sl, r4
 800c08a:	e7d2      	b.n	800c032 <_vfiprintf_r+0xc6>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	1d19      	adds	r1, r3, #4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	9103      	str	r1, [sp, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfbb      	ittet	lt
 800c098:	425b      	neglt	r3, r3
 800c09a:	f042 0202 	orrlt.w	r2, r2, #2
 800c09e:	9307      	strge	r3, [sp, #28]
 800c0a0:	9307      	strlt	r3, [sp, #28]
 800c0a2:	bfb8      	it	lt
 800c0a4:	9204      	strlt	r2, [sp, #16]
 800c0a6:	7823      	ldrb	r3, [r4, #0]
 800c0a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0aa:	d10a      	bne.n	800c0c2 <_vfiprintf_r+0x156>
 800c0ac:	7863      	ldrb	r3, [r4, #1]
 800c0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0b0:	d132      	bne.n	800c118 <_vfiprintf_r+0x1ac>
 800c0b2:	9b03      	ldr	r3, [sp, #12]
 800c0b4:	1d1a      	adds	r2, r3, #4
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	9203      	str	r2, [sp, #12]
 800c0ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0be:	3402      	adds	r4, #2
 800c0c0:	9305      	str	r3, [sp, #20]
 800c0c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c198 <_vfiprintf_r+0x22c>
 800c0c6:	7821      	ldrb	r1, [r4, #0]
 800c0c8:	2203      	movs	r2, #3
 800c0ca:	4650      	mov	r0, sl
 800c0cc:	f7f4 f888 	bl	80001e0 <memchr>
 800c0d0:	b138      	cbz	r0, 800c0e2 <_vfiprintf_r+0x176>
 800c0d2:	9b04      	ldr	r3, [sp, #16]
 800c0d4:	eba0 000a 	sub.w	r0, r0, sl
 800c0d8:	2240      	movs	r2, #64	@ 0x40
 800c0da:	4082      	lsls	r2, r0
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	3401      	adds	r4, #1
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e6:	4829      	ldr	r0, [pc, #164]	@ (800c18c <_vfiprintf_r+0x220>)
 800c0e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ec:	2206      	movs	r2, #6
 800c0ee:	f7f4 f877 	bl	80001e0 <memchr>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d03f      	beq.n	800c176 <_vfiprintf_r+0x20a>
 800c0f6:	4b26      	ldr	r3, [pc, #152]	@ (800c190 <_vfiprintf_r+0x224>)
 800c0f8:	bb1b      	cbnz	r3, 800c142 <_vfiprintf_r+0x1d6>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	3307      	adds	r3, #7
 800c0fe:	f023 0307 	bic.w	r3, r3, #7
 800c102:	3308      	adds	r3, #8
 800c104:	9303      	str	r3, [sp, #12]
 800c106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c108:	443b      	add	r3, r7
 800c10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c10c:	e76a      	b.n	800bfe4 <_vfiprintf_r+0x78>
 800c10e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c112:	460c      	mov	r4, r1
 800c114:	2001      	movs	r0, #1
 800c116:	e7a8      	b.n	800c06a <_vfiprintf_r+0xfe>
 800c118:	2300      	movs	r3, #0
 800c11a:	3401      	adds	r4, #1
 800c11c:	9305      	str	r3, [sp, #20]
 800c11e:	4619      	mov	r1, r3
 800c120:	f04f 0c0a 	mov.w	ip, #10
 800c124:	4620      	mov	r0, r4
 800c126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c12a:	3a30      	subs	r2, #48	@ 0x30
 800c12c:	2a09      	cmp	r2, #9
 800c12e:	d903      	bls.n	800c138 <_vfiprintf_r+0x1cc>
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0c6      	beq.n	800c0c2 <_vfiprintf_r+0x156>
 800c134:	9105      	str	r1, [sp, #20]
 800c136:	e7c4      	b.n	800c0c2 <_vfiprintf_r+0x156>
 800c138:	fb0c 2101 	mla	r1, ip, r1, r2
 800c13c:	4604      	mov	r4, r0
 800c13e:	2301      	movs	r3, #1
 800c140:	e7f0      	b.n	800c124 <_vfiprintf_r+0x1b8>
 800c142:	ab03      	add	r3, sp, #12
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	462a      	mov	r2, r5
 800c148:	4b12      	ldr	r3, [pc, #72]	@ (800c194 <_vfiprintf_r+0x228>)
 800c14a:	a904      	add	r1, sp, #16
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7fd fc83 	bl	8009a58 <_printf_float>
 800c152:	4607      	mov	r7, r0
 800c154:	1c78      	adds	r0, r7, #1
 800c156:	d1d6      	bne.n	800c106 <_vfiprintf_r+0x19a>
 800c158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c15a:	07d9      	lsls	r1, r3, #31
 800c15c:	d405      	bmi.n	800c16a <_vfiprintf_r+0x1fe>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	059a      	lsls	r2, r3, #22
 800c162:	d402      	bmi.n	800c16a <_vfiprintf_r+0x1fe>
 800c164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c166:	f7fe f9f1 	bl	800a54c <__retarget_lock_release_recursive>
 800c16a:	89ab      	ldrh	r3, [r5, #12]
 800c16c:	065b      	lsls	r3, r3, #25
 800c16e:	f53f af1f 	bmi.w	800bfb0 <_vfiprintf_r+0x44>
 800c172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c174:	e71e      	b.n	800bfb4 <_vfiprintf_r+0x48>
 800c176:	ab03      	add	r3, sp, #12
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	462a      	mov	r2, r5
 800c17c:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <_vfiprintf_r+0x228>)
 800c17e:	a904      	add	r1, sp, #16
 800c180:	4630      	mov	r0, r6
 800c182:	f7fd ff01 	bl	8009f88 <_printf_i>
 800c186:	e7e4      	b.n	800c152 <_vfiprintf_r+0x1e6>
 800c188:	0800c6f8 	.word	0x0800c6f8
 800c18c:	0800c702 	.word	0x0800c702
 800c190:	08009a59 	.word	0x08009a59
 800c194:	0800bf49 	.word	0x0800bf49
 800c198:	0800c6fe 	.word	0x0800c6fe

0800c19c <__swbuf_r>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	460e      	mov	r6, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	b118      	cbz	r0, 800c1ae <__swbuf_r+0x12>
 800c1a6:	6a03      	ldr	r3, [r0, #32]
 800c1a8:	b90b      	cbnz	r3, 800c1ae <__swbuf_r+0x12>
 800c1aa:	f7fe f899 	bl	800a2e0 <__sinit>
 800c1ae:	69a3      	ldr	r3, [r4, #24]
 800c1b0:	60a3      	str	r3, [r4, #8]
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	071a      	lsls	r2, r3, #28
 800c1b6:	d501      	bpl.n	800c1bc <__swbuf_r+0x20>
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	b943      	cbnz	r3, 800c1ce <__swbuf_r+0x32>
 800c1bc:	4621      	mov	r1, r4
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f000 f82a 	bl	800c218 <__swsetup_r>
 800c1c4:	b118      	cbz	r0, 800c1ce <__swbuf_r+0x32>
 800c1c6:	f04f 37ff 	mov.w	r7, #4294967295
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	6922      	ldr	r2, [r4, #16]
 800c1d2:	1a98      	subs	r0, r3, r2
 800c1d4:	6963      	ldr	r3, [r4, #20]
 800c1d6:	b2f6      	uxtb	r6, r6
 800c1d8:	4283      	cmp	r3, r0
 800c1da:	4637      	mov	r7, r6
 800c1dc:	dc05      	bgt.n	800c1ea <__swbuf_r+0x4e>
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7ff fda9 	bl	800bd38 <_fflush_r>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d1ed      	bne.n	800c1c6 <__swbuf_r+0x2a>
 800c1ea:	68a3      	ldr	r3, [r4, #8]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	60a3      	str	r3, [r4, #8]
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	6022      	str	r2, [r4, #0]
 800c1f6:	701e      	strb	r6, [r3, #0]
 800c1f8:	6962      	ldr	r2, [r4, #20]
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d004      	beq.n	800c20a <__swbuf_r+0x6e>
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	07db      	lsls	r3, r3, #31
 800c204:	d5e1      	bpl.n	800c1ca <__swbuf_r+0x2e>
 800c206:	2e0a      	cmp	r6, #10
 800c208:	d1df      	bne.n	800c1ca <__swbuf_r+0x2e>
 800c20a:	4621      	mov	r1, r4
 800c20c:	4628      	mov	r0, r5
 800c20e:	f7ff fd93 	bl	800bd38 <_fflush_r>
 800c212:	2800      	cmp	r0, #0
 800c214:	d0d9      	beq.n	800c1ca <__swbuf_r+0x2e>
 800c216:	e7d6      	b.n	800c1c6 <__swbuf_r+0x2a>

0800c218 <__swsetup_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4b29      	ldr	r3, [pc, #164]	@ (800c2c0 <__swsetup_r+0xa8>)
 800c21c:	4605      	mov	r5, r0
 800c21e:	6818      	ldr	r0, [r3, #0]
 800c220:	460c      	mov	r4, r1
 800c222:	b118      	cbz	r0, 800c22c <__swsetup_r+0x14>
 800c224:	6a03      	ldr	r3, [r0, #32]
 800c226:	b90b      	cbnz	r3, 800c22c <__swsetup_r+0x14>
 800c228:	f7fe f85a 	bl	800a2e0 <__sinit>
 800c22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c230:	0719      	lsls	r1, r3, #28
 800c232:	d422      	bmi.n	800c27a <__swsetup_r+0x62>
 800c234:	06da      	lsls	r2, r3, #27
 800c236:	d407      	bmi.n	800c248 <__swsetup_r+0x30>
 800c238:	2209      	movs	r2, #9
 800c23a:	602a      	str	r2, [r5, #0]
 800c23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	f04f 30ff 	mov.w	r0, #4294967295
 800c246:	e033      	b.n	800c2b0 <__swsetup_r+0x98>
 800c248:	0758      	lsls	r0, r3, #29
 800c24a:	d512      	bpl.n	800c272 <__swsetup_r+0x5a>
 800c24c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c24e:	b141      	cbz	r1, 800c262 <__swsetup_r+0x4a>
 800c250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <__swsetup_r+0x46>
 800c258:	4628      	mov	r0, r5
 800c25a:	f7fe ffc5 	bl	800b1e8 <_free_r>
 800c25e:	2300      	movs	r3, #0
 800c260:	6363      	str	r3, [r4, #52]	@ 0x34
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	2300      	movs	r3, #0
 800c26c:	6063      	str	r3, [r4, #4]
 800c26e:	6923      	ldr	r3, [r4, #16]
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	f043 0308 	orr.w	r3, r3, #8
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	6923      	ldr	r3, [r4, #16]
 800c27c:	b94b      	cbnz	r3, 800c292 <__swsetup_r+0x7a>
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c288:	d003      	beq.n	800c292 <__swsetup_r+0x7a>
 800c28a:	4621      	mov	r1, r4
 800c28c:	4628      	mov	r0, r5
 800c28e:	f000 f883 	bl	800c398 <__smakebuf_r>
 800c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c296:	f013 0201 	ands.w	r2, r3, #1
 800c29a:	d00a      	beq.n	800c2b2 <__swsetup_r+0x9a>
 800c29c:	2200      	movs	r2, #0
 800c29e:	60a2      	str	r2, [r4, #8]
 800c2a0:	6962      	ldr	r2, [r4, #20]
 800c2a2:	4252      	negs	r2, r2
 800c2a4:	61a2      	str	r2, [r4, #24]
 800c2a6:	6922      	ldr	r2, [r4, #16]
 800c2a8:	b942      	cbnz	r2, 800c2bc <__swsetup_r+0xa4>
 800c2aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ae:	d1c5      	bne.n	800c23c <__swsetup_r+0x24>
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	0799      	lsls	r1, r3, #30
 800c2b4:	bf58      	it	pl
 800c2b6:	6962      	ldrpl	r2, [r4, #20]
 800c2b8:	60a2      	str	r2, [r4, #8]
 800c2ba:	e7f4      	b.n	800c2a6 <__swsetup_r+0x8e>
 800c2bc:	2000      	movs	r0, #0
 800c2be:	e7f7      	b.n	800c2b0 <__swsetup_r+0x98>
 800c2c0:	20000114 	.word	0x20000114

0800c2c4 <_raise_r>:
 800c2c4:	291f      	cmp	r1, #31
 800c2c6:	b538      	push	{r3, r4, r5, lr}
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	d904      	bls.n	800c2d8 <_raise_r+0x14>
 800c2ce:	2316      	movs	r3, #22
 800c2d0:	6003      	str	r3, [r0, #0]
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2da:	b112      	cbz	r2, 800c2e2 <_raise_r+0x1e>
 800c2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2e0:	b94b      	cbnz	r3, 800c2f6 <_raise_r+0x32>
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f000 f830 	bl	800c348 <_getpid_r>
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f2:	f000 b817 	b.w	800c324 <_kill_r>
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d00a      	beq.n	800c310 <_raise_r+0x4c>
 800c2fa:	1c59      	adds	r1, r3, #1
 800c2fc:	d103      	bne.n	800c306 <_raise_r+0x42>
 800c2fe:	2316      	movs	r3, #22
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	2001      	movs	r0, #1
 800c304:	e7e7      	b.n	800c2d6 <_raise_r+0x12>
 800c306:	2100      	movs	r1, #0
 800c308:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c30c:	4620      	mov	r0, r4
 800c30e:	4798      	blx	r3
 800c310:	2000      	movs	r0, #0
 800c312:	e7e0      	b.n	800c2d6 <_raise_r+0x12>

0800c314 <raise>:
 800c314:	4b02      	ldr	r3, [pc, #8]	@ (800c320 <raise+0xc>)
 800c316:	4601      	mov	r1, r0
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f7ff bfd3 	b.w	800c2c4 <_raise_r>
 800c31e:	bf00      	nop
 800c320:	20000114 	.word	0x20000114

0800c324 <_kill_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4d07      	ldr	r5, [pc, #28]	@ (800c344 <_kill_r+0x20>)
 800c328:	2300      	movs	r3, #0
 800c32a:	4604      	mov	r4, r0
 800c32c:	4608      	mov	r0, r1
 800c32e:	4611      	mov	r1, r2
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	f7f5 fadb 	bl	80018ec <_kill>
 800c336:	1c43      	adds	r3, r0, #1
 800c338:	d102      	bne.n	800c340 <_kill_r+0x1c>
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	b103      	cbz	r3, 800c340 <_kill_r+0x1c>
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	bd38      	pop	{r3, r4, r5, pc}
 800c342:	bf00      	nop
 800c344:	200020c4 	.word	0x200020c4

0800c348 <_getpid_r>:
 800c348:	f7f5 bac8 	b.w	80018dc <_getpid>

0800c34c <__swhatbuf_r>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	460c      	mov	r4, r1
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	2900      	cmp	r1, #0
 800c356:	b096      	sub	sp, #88	@ 0x58
 800c358:	4615      	mov	r5, r2
 800c35a:	461e      	mov	r6, r3
 800c35c:	da0d      	bge.n	800c37a <__swhatbuf_r+0x2e>
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c364:	f04f 0100 	mov.w	r1, #0
 800c368:	bf14      	ite	ne
 800c36a:	2340      	movne	r3, #64	@ 0x40
 800c36c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c370:	2000      	movs	r0, #0
 800c372:	6031      	str	r1, [r6, #0]
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	b016      	add	sp, #88	@ 0x58
 800c378:	bd70      	pop	{r4, r5, r6, pc}
 800c37a:	466a      	mov	r2, sp
 800c37c:	f000 f848 	bl	800c410 <_fstat_r>
 800c380:	2800      	cmp	r0, #0
 800c382:	dbec      	blt.n	800c35e <__swhatbuf_r+0x12>
 800c384:	9901      	ldr	r1, [sp, #4]
 800c386:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c38a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c38e:	4259      	negs	r1, r3
 800c390:	4159      	adcs	r1, r3
 800c392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c396:	e7eb      	b.n	800c370 <__swhatbuf_r+0x24>

0800c398 <__smakebuf_r>:
 800c398:	898b      	ldrh	r3, [r1, #12]
 800c39a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c39c:	079d      	lsls	r5, r3, #30
 800c39e:	4606      	mov	r6, r0
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	d507      	bpl.n	800c3b4 <__smakebuf_r+0x1c>
 800c3a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	6163      	str	r3, [r4, #20]
 800c3b0:	b003      	add	sp, #12
 800c3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b4:	ab01      	add	r3, sp, #4
 800c3b6:	466a      	mov	r2, sp
 800c3b8:	f7ff ffc8 	bl	800c34c <__swhatbuf_r>
 800c3bc:	9f00      	ldr	r7, [sp, #0]
 800c3be:	4605      	mov	r5, r0
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f7fd fa1c 	bl	8009800 <_malloc_r>
 800c3c8:	b948      	cbnz	r0, 800c3de <__smakebuf_r+0x46>
 800c3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ce:	059a      	lsls	r2, r3, #22
 800c3d0:	d4ee      	bmi.n	800c3b0 <__smakebuf_r+0x18>
 800c3d2:	f023 0303 	bic.w	r3, r3, #3
 800c3d6:	f043 0302 	orr.w	r3, r3, #2
 800c3da:	81a3      	strh	r3, [r4, #12]
 800c3dc:	e7e2      	b.n	800c3a4 <__smakebuf_r+0xc>
 800c3de:	89a3      	ldrh	r3, [r4, #12]
 800c3e0:	6020      	str	r0, [r4, #0]
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3ee:	b15b      	cbz	r3, 800c408 <__smakebuf_r+0x70>
 800c3f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f000 f81d 	bl	800c434 <_isatty_r>
 800c3fa:	b128      	cbz	r0, 800c408 <__smakebuf_r+0x70>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f023 0303 	bic.w	r3, r3, #3
 800c402:	f043 0301 	orr.w	r3, r3, #1
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	431d      	orrs	r5, r3
 800c40c:	81a5      	strh	r5, [r4, #12]
 800c40e:	e7cf      	b.n	800c3b0 <__smakebuf_r+0x18>

0800c410 <_fstat_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d07      	ldr	r5, [pc, #28]	@ (800c430 <_fstat_r+0x20>)
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	4611      	mov	r1, r2
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	f7f5 fac5 	bl	80019ac <_fstat>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	d102      	bne.n	800c42c <_fstat_r+0x1c>
 800c426:	682b      	ldr	r3, [r5, #0]
 800c428:	b103      	cbz	r3, 800c42c <_fstat_r+0x1c>
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	bf00      	nop
 800c430:	200020c4 	.word	0x200020c4

0800c434 <_isatty_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d06      	ldr	r5, [pc, #24]	@ (800c450 <_isatty_r+0x1c>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f5 fac4 	bl	80019cc <_isatty>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_isatty_r+0x1a>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_isatty_r+0x1a>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	200020c4 	.word	0x200020c4

0800c454 <_init>:
 800c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c456:	bf00      	nop
 800c458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45a:	bc08      	pop	{r3}
 800c45c:	469e      	mov	lr, r3
 800c45e:	4770      	bx	lr

0800c460 <_fini>:
 800c460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c462:	bf00      	nop
 800c464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c466:	bc08      	pop	{r3}
 800c468:	469e      	mov	lr, r3
 800c46a:	4770      	bx	lr
